/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import topology.instances.nnreal
import order.liminf_limsup
import topology.metric_space.lipschitz
/-!
# Extended non-negative reals
-/

noncomputable theory

open classical set filter metric
open_locale classical topological_space ennreal nnreal big_operators filter

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}

namespace ennreal
variables {a b c d : ‚Ñù‚â•0‚àû} {r p q : ‚Ñù‚â•0}
variables {x y z : ‚Ñù‚â•0‚àû} {Œµ Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñù‚â•0‚àû} {s : set ‚Ñù‚â•0‚àû}

section topological_space
open topological_space

/-- Topology on `‚Ñù‚â•0‚àû`.

Note: this is different from the `emetric_space` topology. The `emetric_space` topology has
`is_open {‚ä§}`, while this topology doesn't have singleton elements. -/
instance : topological_space ‚Ñù‚â•0‚àû := preorder.topology ‚Ñù‚â•0‚àû

instance : order_topology ‚Ñù‚â•0‚àû := ‚ü®rfl‚ü©

instance : t2_space ‚Ñù‚â•0‚àû := by apply_instance -- short-circuit type class inference

instance : second_countable_topology ‚Ñù‚â•0‚àû :=
‚ü®‚ü®‚ãÉq ‚â• (0:‚Ñö), {{a : ‚Ñù‚â•0‚àû | a < real.to_nnreal q}, {a : ‚Ñù‚â•0‚àû | ‚Üë(real.to_nnreal q) < a}},
  (countable_encodable _).bUnion $ assume a ha, (countable_singleton _).insert _,
  le_antisymm
    (le_generate_from $ by simp [or_imp_distrib, is_open_lt', is_open_gt'] {contextual := tt})
    (le_generate_from $ Œª s h, begin
      rcases h with ‚ü®a, hs | hs‚ü©;
      [ rw show s = ‚ãÉq‚àà{q:‚Ñö | 0 ‚â§ q ‚àß a < real.to_nnreal q}, {b | ‚Üë(real.to_nnreal q) < b},
           from set.ext (assume b, by simp [hs, @ennreal.lt_iff_exists_rat_btwn a b, and_assoc]),
        rw show s = ‚ãÉq‚àà{q:‚Ñö | 0 ‚â§ q ‚àß ‚Üë(real.to_nnreal q) < a}, {b | b < ‚Üë(real.to_nnreal q)},
           from set.ext (assume b,
             by simp [hs, @ennreal.lt_iff_exists_rat_btwn b a, and_comm, and_assoc])];
      { apply is_open_Union, intro q,
        apply is_open_Union, intro hq,
        exact generate_open.basic _ (mem_bUnion hq.1 $ by simp) }
    end)‚ü©‚ü©

lemma embedding_coe : embedding (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
‚ü®‚ü®begin
  refine le_antisymm _ _,
  { rw [@order_topology.topology_eq_generate_intervals ‚Ñù‚â•0‚àû _,
      ‚Üê coinduced_le_iff_le_induced],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    show is_open {b : ‚Ñù‚â•0 | a < ‚Üëb},
    { cases a; simp [none_eq_top, some_eq_coe, is_open_lt'] },
    show is_open {b : ‚Ñù‚â•0 | ‚Üëb < a},
    { cases a; simp [none_eq_top, some_eq_coe, is_open_gt', is_open_const] } },
  { rw [@order_topology.topology_eq_generate_intervals ‚Ñù‚â•0 _],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    exact ‚ü®Ioi a, is_open_Ioi, by simp [Ioi]‚ü©,
    exact ‚ü®Iio a, is_open_Iio, by simp [Iio]‚ü© }
  end‚ü©,
  assume a b, coe_eq_coe.1‚ü©

lemma is_open_ne_top : is_open {a : ‚Ñù‚â•0‚àû | a ‚â† ‚ä§} := is_open_ne

lemma is_open_Ico_zero : is_open (Ico 0 b) := by { rw ennreal.Ico_eq_Iio, exact is_open_Iio}

lemma open_embedding_coe : open_embedding (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
‚ü®embedding_coe, by { convert is_open_ne_top, ext (x|_); simp [none_eq_top, some_eq_coe] }‚ü©

lemma coe_range_mem_nhds : range (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) ‚àà ùìù (r : ‚Ñù‚â•0‚àû) :=
is_open.mem_nhds open_embedding_coe.open_range $ mem_range_self _

@[norm_cast] lemma tendsto_coe {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0} {a : ‚Ñù‚â•0} :
  tendsto (Œªa, (m a : ‚Ñù‚â•0‚àû)) f (ùìù ‚Üëa) ‚Üî tendsto m f (ùìù a) :=
embedding_coe.tendsto_nhds_iff.symm

lemma continuous_coe : continuous (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
embedding_coe.continuous

lemma continuous_coe_iff  {Œ±} [topological_space Œ±] {f : Œ± ‚Üí ‚Ñù‚â•0} :
  continuous (Œªa, (f a : ‚Ñù‚â•0‚àû)) ‚Üî continuous f :=
embedding_coe.continuous_iff.symm

lemma nhds_coe {r : ‚Ñù‚â•0} : ùìù (r : ‚Ñù‚â•0‚àû) = (ùìù r).map coe :=
(open_embedding_coe.map_nhds_eq r).symm

lemma tendsto_nhds_coe_iff {Œ± : Type*} {l : filter Œ±} {x : ‚Ñù‚â•0} {f : ‚Ñù‚â•0‚àû ‚Üí Œ±} :
  tendsto f (ùìù ‚Üëx) l ‚Üî tendsto (f ‚àò coe : ‚Ñù‚â•0 ‚Üí Œ±) (ùìù x) l :=
show _ ‚â§ _ ‚Üî _ ‚â§ _, by rw [nhds_coe, filter.map_map]

lemma continuous_at_coe_iff {Œ± : Type*} [topological_space Œ±] {x : ‚Ñù‚â•0} {f : ‚Ñù‚â•0‚àû ‚Üí Œ±} :
  continuous_at f (‚Üëx) ‚Üî continuous_at (f ‚àò coe : ‚Ñù‚â•0 ‚Üí Œ±) x :=
tendsto_nhds_coe_iff

lemma nhds_coe_coe {r p : ‚Ñù‚â•0} :
  ùìù ((r : ‚Ñù‚â•0‚àû), (p : ‚Ñù‚â•0‚àû)) = (ùìù (r, p)).map (Œªp:‚Ñù‚â•0√ó‚Ñù‚â•0, (p.1, p.2)) :=
((open_embedding_coe.prod open_embedding_coe).map_nhds_eq (r, p)).symm

lemma continuous_of_real : continuous ennreal.of_real :=
(continuous_coe_iff.2 continuous_id).comp nnreal.continuous_of_real

lemma tendsto_of_real {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù} {a : ‚Ñù} (h : tendsto m f (ùìù a)) :
  tendsto (Œªa, ennreal.of_real (m a)) f (ùìù (ennreal.of_real a)) :=
tendsto.comp (continuous.tendsto continuous_of_real _) h

lemma tendsto_to_nnreal {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) :
  tendsto ennreal.to_nnreal (ùìù a) (ùìù a.to_nnreal) :=
begin
  lift a to ‚Ñù‚â•0 using ha,
  rw [nhds_coe, tendsto_map'_iff],
  exact tendsto_id
end

lemma eventually_eq_of_to_real_eventually_eq {l : filter Œ±} {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû}
  (hfi : ‚àÄ·∂† x in l, f x ‚â† ‚àû) (hgi : ‚àÄ·∂† x in l, g x ‚â† ‚àû)
  (hfg : (Œª x, (f x).to_real) =·∂†[l] (Œª x, (g x).to_real)) :
  f =·∂†[l] g :=
begin
  filter_upwards [hfi, hgi, hfg] with _ hfx hgx _,
  rwa ‚Üê ennreal.to_real_eq_to_real hfx hgx,
end

lemma continuous_on_to_nnreal : continuous_on ennreal.to_nnreal {a | a ‚â† ‚àû}  :=
Œª a ha, continuous_at.continuous_within_at (tendsto_to_nnreal ha)

lemma tendsto_to_real {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : tendsto ennreal.to_real (ùìù a) (ùìù a.to_real) :=
nnreal.tendsto_coe.2 $ tendsto_to_nnreal ha

/-- The set of finite `‚Ñù‚â•0‚àû` numbers is homeomorphic to `‚Ñù‚â•0`. -/
def ne_top_homeomorph_nnreal : {a | a ‚â† ‚àû} ‚âÉ‚Çú ‚Ñù‚â•0 :=
{ continuous_to_fun := continuous_on_iff_continuous_restrict.1 continuous_on_to_nnreal,
  continuous_inv_fun := continuous_subtype_mk _ continuous_coe,
  .. ne_top_equiv_nnreal }

/-- The set of finite `‚Ñù‚â•0‚àû` numbers is homeomorphic to `‚Ñù‚â•0`. -/
def lt_top_homeomorph_nnreal : {a | a < ‚àû} ‚âÉ‚Çú ‚Ñù‚â•0 :=
by refine (homeomorph.set_congr $ set.ext $ Œª x, _).trans ne_top_homeomorph_nnreal;
  simp only [mem_set_of_eq, lt_top_iff_ne_top]

lemma nhds_top : ùìù ‚àû = ‚®Ö a ‚â† ‚àû, ùìü (Ioi a) :=
nhds_top_order.trans $ by simp [lt_top_iff_ne_top, Ioi]

lemma nhds_top' : ùìù ‚àû = ‚®Ö r : ‚Ñù‚â•0, ùìü (Ioi r) :=
nhds_top.trans $ infi_ne_top _

lemma nhds_top_basis : (ùìù ‚àû).has_basis (Œª a, a < ‚àû) (Œª a, Ioi a) := nhds_top_basis

lemma tendsto_nhds_top_iff_nnreal {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {f : filter Œ±} :
  tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ x : ‚Ñù‚â•0, ‚àÄ·∂† a in f, ‚Üëx < m a :=
by simp only [nhds_top', tendsto_infi, tendsto_principal, mem_Ioi]

lemma tendsto_nhds_top_iff_nat {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {f : filter Œ±} :
  tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ n : ‚Ñï, ‚àÄ·∂† a in f, ‚Üën < m a :=
tendsto_nhds_top_iff_nnreal.trans ‚ü®Œª h n, by simpa only [ennreal.coe_nat] using h n,
  Œª h x, let ‚ü®n, hn‚ü© := exists_nat_gt x in
    (h n).mono (Œª y, lt_trans $ by rwa [‚Üê ennreal.coe_nat, coe_lt_coe])‚ü©

lemma tendsto_nhds_top {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {f : filter Œ±}
  (h : ‚àÄ n : ‚Ñï, ‚àÄ·∂† a in f, ‚Üën < m a) : tendsto m f (ùìù ‚ä§) :=
tendsto_nhds_top_iff_nat.2 h

lemma tendsto_nat_nhds_top : tendsto (Œª n : ‚Ñï, ‚Üën) at_top (ùìù ‚àû) :=
tendsto_nhds_top $ Œª n, mem_at_top_sets.2
  ‚ü®n+1, Œª m hm, ennreal.coe_nat_lt_coe_nat.2 $ nat.lt_of_succ_le hm‚ü©

@[simp, norm_cast] lemma tendsto_coe_nhds_top {f : Œ± ‚Üí ‚Ñù‚â•0} {l : filter Œ±} :
  tendsto (Œª x, (f x : ‚Ñù‚â•0‚àû)) l (ùìù ‚àû) ‚Üî tendsto f l at_top :=
by rw [tendsto_nhds_top_iff_nnreal, at_top_basis_Ioi.tendsto_right_iff];
  [simp, apply_instance, apply_instance]

lemma nhds_zero : ùìù (0 : ‚Ñù‚â•0‚àû) = ‚®Öa ‚â† 0, ùìü (Iio a) :=
nhds_bot_order.trans $ by simp [bot_lt_iff_ne_bot, Iio]

lemma nhds_zero_basis : (ùìù (0 : ‚Ñù‚â•0‚àû)).has_basis (Œª a : ‚Ñù‚â•0‚àû, 0 < a) (Œª a, Iio a) := nhds_bot_basis

lemma nhds_zero_basis_Iic : (ùìù (0 : ‚Ñù‚â•0‚àû)).has_basis (Œª a : ‚Ñù‚â•0‚àû, 0 < a) Iic := nhds_bot_basis_Iic

@[instance] lemma nhds_within_Ioi_coe_ne_bot {r : ‚Ñù‚â•0} : (ùìù[>] (r : ‚Ñù‚â•0‚àû)).ne_bot :=
nhds_within_Ioi_self_ne_bot' ‚ü®‚ä§, ennreal.coe_lt_top‚ü©

@[instance] lemma nhds_within_Ioi_zero_ne_bot : (ùìù[>] (0 : ‚Ñù‚â•0‚àû)).ne_bot :=
nhds_within_Ioi_coe_ne_bot

-- using Icc because
-- ‚Ä¢ don't have 'Ioo (x - Œµ) (x + Œµ) ‚àà ùìù x' unless x > 0
-- ‚Ä¢ (x - y ‚â§ Œµ ‚Üî x ‚â§ Œµ + y) is true, while (x - y < Œµ ‚Üî x < Œµ + y) is not
lemma Icc_mem_nhds (xt : x ‚â† ‚ä§) (Œµ0 : Œµ ‚â† 0) : Icc (x - Œµ) (x + Œµ) ‚àà ùìù x :=
begin
  rw _root_.mem_nhds_iff,
  by_cases x0 : x = 0,
  { use Iio (x + Œµ),
    have : Iio (x + Œµ) ‚äÜ Icc (x - Œµ) (x + Œµ), assume a, rw x0, simpa using le_of_lt,
    use this, exact ‚ü®is_open_Iio, mem_Iio_self_add xt Œµ0‚ü© },
  { use Ioo (x - Œµ) (x + Œµ), use Ioo_subset_Icc_self,
    exact ‚ü®is_open_Ioo, mem_Ioo_self_sub_add xt x0 Œµ0 Œµ0 ‚ü© }
end

lemma nhds_of_ne_top (xt : x ‚â† ‚ä§) : ùìù x = ‚®Ö Œµ > 0, ùìü (Icc (x - Œµ) (x + Œµ)) :=
begin
  refine le_antisymm _ _,
  -- first direction
  simp only [le_infi_iff, le_principal_iff], assume Œµ Œµ0, exact Icc_mem_nhds xt Œµ0.lt.ne',
  -- second direction
  rw nhds_generate_from, refine le_infi (assume s, le_infi $ assume hs, _),
  rcases hs with ‚ü®xs, ‚ü®a, (rfl : s = Ioi a)|(rfl : s = Iio a)‚ü©‚ü©,
  { rcases exists_between xs with ‚ü®b, ab, bx‚ü©,
    have xb_pos : 0 < x - b := tsub_pos_iff_lt.2 bx,
    have xxb : x - (x - b) = b := sub_sub_cancel xt bx.le,
    refine infi_le_of_le (x - b) (infi_le_of_le xb_pos _),
    simp only [mem_principal, le_principal_iff],
    assume y, rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, rw xxb at h‚ÇÅ, calc a < b : ab ... ‚â§ y : h‚ÇÅ },
  { rcases exists_between xs with ‚ü®b, xb, ba‚ü©,
    have bx_pos : 0 < b - x := tsub_pos_iff_lt.2 xb,
    have xbx : x + (b - x) = b := add_tsub_cancel_of_le xb.le,
    refine infi_le_of_le (b - x) (infi_le_of_le bx_pos _),
    simp only [mem_principal, le_principal_iff],
    assume y, rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©, rw xbx at h‚ÇÇ, calc y ‚â§ b : h‚ÇÇ ... < a : ba },
end

/-- Characterization of neighborhoods for `‚Ñù‚â•0‚àû` numbers. See also `tendsto_order`
for a version with strict inequalities. -/
protected theorem tendsto_nhds {f : filter Œ±} {u : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) :
  tendsto u f (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† x in f, (u x) ‚àà Icc (a - Œµ) (a + Œµ) :=
by simp only [nhds_of_ne_top ha, tendsto_infi, tendsto_principal, mem_Icc]

protected lemma tendsto_at_top [nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
  (ha : a ‚â† ‚ä§) : tendsto f at_top (ùìù a) ‚Üî ‚àÄŒµ>0, ‚àÉN, ‚àÄn‚â•N, (f n) ‚àà Icc (a - Œµ) (a + Œµ) :=
by simp only [ennreal.tendsto_nhds ha, mem_at_top_sets, mem_set_of_eq, filter.eventually]

instance : has_continuous_add ‚Ñù‚â•0‚àû :=
begin
  refine ‚ü®continuous_iff_continuous_at.2 _‚ü©,
  rintro ‚ü®(_|a), b‚ü©,
  { exact tendsto_nhds_top_mono' continuous_at_fst (Œª p, le_add_right le_rfl) },
  rcases b with (_|b),
  { exact tendsto_nhds_top_mono' continuous_at_snd (Œª p, le_add_left le_rfl) },
  simp only [continuous_at, some_eq_coe, nhds_coe_coe, ‚Üê coe_add, tendsto_map'_iff, (‚àò),
    tendsto_coe, tendsto_add]
end

protected lemma tendsto_at_top_zero [hŒ≤ : nonempty Œ≤] [semilattice_sup Œ≤] {f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû} :
  filter.at_top.tendsto f (ùìù 0) ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, f n ‚â§ Œµ :=
begin
  rw ennreal.tendsto_at_top zero_ne_top,
  { simp_rw [set.mem_Icc, zero_add, zero_tsub, zero_le _, true_and], },
  { exact hŒ≤, },
end

lemma tendsto_sub {a b : ‚Ñù‚â•0‚àû} (h : a ‚â† ‚àû ‚à® b ‚â† ‚àû) :
  tendsto (Œª p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû, p.1 - p.2) (ùìù (a, b)) (ùìù (a - b)) :=
begin
  cases a; cases b,
  { simp only [eq_self_iff_true, not_true, ne.def, none_eq_top, or_self] at h, contradiction },
  { simp only [some_eq_coe, with_top.top_sub_coe, none_eq_top],
    apply tendsto_nhds_top_iff_nnreal.2 (Œª n, _),
    rw [nhds_prod_eq, eventually_prod_iff],
    refine ‚ü®Œª z, ((n + (b + 1)) : ‚Ñù‚â•0‚àû) < z,
            Ioi_mem_nhds (by simp only [one_lt_top, add_lt_top, coe_lt_top, and_self]),
            Œª z, z < b + 1, Iio_mem_nhds ((ennreal.lt_add_right coe_ne_top one_ne_zero)),
            Œª x hx y hy, _‚ü©,
    dsimp,
    rw lt_tsub_iff_right,
    have : ((n : ‚Ñù‚â•0‚àû) + y) + (b + 1) < x + (b + 1) := calc
      ((n : ‚Ñù‚â•0‚àû) + y) + (b + 1) = ((n : ‚Ñù‚â•0‚àû) + (b + 1)) + y : by abel
      ... < x + (b + 1) : ennreal.add_lt_add hx hy,
    exact lt_of_add_lt_add_right this },
  { simp only [some_eq_coe, with_top.sub_top, none_eq_top],
    suffices H : ‚àÄ·∂† (p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû) in ùìù (a, ‚àû), 0 = p.1 - p.2,
      from tendsto_const_nhds.congr' H,
    rw [nhds_prod_eq, eventually_prod_iff],
    refine ‚ü®Œª z, z < a + 1, Iio_mem_nhds (ennreal.lt_add_right coe_ne_top one_ne_zero),
            Œª z, (a : ‚Ñù‚â•0‚àû) + 1 < z,
            Ioi_mem_nhds (by simp only [one_lt_top, add_lt_top, coe_lt_top, and_self]),
            Œª x hx y hy, _‚ü©,
    rw eq_comm,
    simp only [tsub_eq_zero_iff_le, (has_lt.lt.trans hx hy).le], },
  { simp only [some_eq_coe, nhds_coe_coe, tendsto_map'_iff, function.comp, ‚Üê ennreal.coe_sub,
               tendsto_coe],
    exact continuous.tendsto (by continuity) _ }
end

protected lemma tendsto.sub {f : filter Œ±} {ma : Œ± ‚Üí ‚Ñù‚â•0‚àû} {mb : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hma : tendsto ma f (ùìù a)) (hmb : tendsto mb f (ùìù b)) (h : a ‚â† ‚àû ‚à® b ‚â† ‚àû) :
  tendsto (Œª a, ma a - mb a) f (ùìù (a - b)) :=
show tendsto ((Œª p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû, p.1 - p.2) ‚àò (Œªa, (ma a, mb a))) f (ùìù (a - b)), from
tendsto.comp (ennreal.tendsto_sub h) (hma.prod_mk_nhds hmb)

protected lemma tendsto_mul (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) :
  tendsto (Œªp:‚Ñù‚â•0‚àû√ó‚Ñù‚â•0‚àû, p.1 * p.2) (ùìù (a, b)) (ùìù (a * b)) :=
have ht : ‚àÄb:‚Ñù‚â•0‚àû, b ‚â† 0 ‚Üí tendsto (Œªp:‚Ñù‚â•0‚àû√ó‚Ñù‚â•0‚àû, p.1 * p.2) (ùìù ((‚ä§:‚Ñù‚â•0‚àû), b)) (ùìù ‚ä§),
begin
  refine assume b hb, tendsto_nhds_top_iff_nnreal.2 $ assume n, _,
  rcases lt_iff_exists_nnreal_btwn.1 (pos_iff_ne_zero.2 hb) with ‚ü®Œµ, hŒµ, hŒµb‚ü©,
  replace hŒµ : 0 < Œµ, from coe_pos.1 hŒµ,
  filter_upwards [prod_is_open.mem_nhds (lt_mem_nhds $ @coe_lt_top (n / Œµ)) (lt_mem_nhds hŒµb)],
  rintros ‚ü®a‚ÇÅ, a‚ÇÇ‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  dsimp at h‚ÇÅ h‚ÇÇ ‚ä¢,
  rw [‚Üê div_mul_cancel n hŒµ.ne', coe_mul],
  exact mul_lt_mul h‚ÇÅ h‚ÇÇ
end,
begin
  cases a, {simp [none_eq_top] at hb, simp [none_eq_top, ht b hb, top_mul, hb] },
  cases b,
  { simp [none_eq_top] at ha,
    simp [*, nhds_swap (a : ‚Ñù‚â•0‚àû) ‚ä§, none_eq_top, some_eq_coe, top_mul, tendsto_map'_iff, (‚àò),
      mul_comm] },
  simp [some_eq_coe, nhds_coe_coe, tendsto_map'_iff, (‚àò)],
  simp only [coe_mul.symm, tendsto_coe, tendsto_mul]
end

protected lemma tendsto.mul {f : filter Œ±} {ma : Œ± ‚Üí ‚Ñù‚â•0‚àû} {mb : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hma : tendsto ma f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) (hmb : tendsto mb f (ùìù b)) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) :
  tendsto (Œªa, ma a * mb a) f (ùìù (a * b)) :=
show tendsto ((Œªp:‚Ñù‚â•0‚àû√ó‚Ñù‚â•0‚àû, p.1 * p.2) ‚àò (Œªa, (ma a, mb a))) f (ùìù (a * b)), from
tendsto.comp (ennreal.tendsto_mul ha hb) (hma.prod_mk_nhds hmb)

protected lemma tendsto.const_mul {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hm : tendsto m f (ùìù b)) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) : tendsto (Œªb, a * m b) f (ùìù (a * b)) :=
by_cases
  (assume : a = 0, by simp [this, tendsto_const_nhds])
  (assume ha : a ‚â† 0, ennreal.tendsto.mul tendsto_const_nhds (or.inl ha) hm hb)

protected lemma tendsto.mul_const {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hm : tendsto m f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) : tendsto (Œªx, m x * b) f (ùìù (a * b)) :=
by simpa only [mul_comm] using ennreal.tendsto.const_mul hm ha

lemma tendsto_finset_prod_of_ne_top {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} {x : filter Œ±} {a : Œπ ‚Üí ‚Ñù‚â•0‚àû}
  (s : finset Œπ) (h : ‚àÄ i ‚àà s, tendsto (f i) x (ùìù (a i))) (h' : ‚àÄ i ‚àà s, a i ‚â† ‚àû):
  tendsto (Œª b, ‚àè c in s, f c b) x (ùìù (‚àè c in s, a c)) :=
begin
  induction s using finset.induction with a s has IH, { simp [tendsto_const_nhds] },
  simp only [finset.prod_insert has],
  apply tendsto.mul (h _ (finset.mem_insert_self _ _)),
  { right,
    exact (prod_lt_top (Œª i hi, h' _ (finset.mem_insert_of_mem hi))).ne },
  { exact IH (Œª i hi, h _ (finset.mem_insert_of_mem hi))
      (Œª i hi, h' _ (finset.mem_insert_of_mem hi)) },
  { exact or.inr (h' _ (finset.mem_insert_self _ _)) }
end

protected lemma continuous_at_const_mul {a b : ‚Ñù‚â•0‚àû} (h : a ‚â† ‚ä§ ‚à® b ‚â† 0) :
  continuous_at ((*) a) b :=
tendsto.const_mul tendsto_id h.symm

protected lemma continuous_at_mul_const {a b : ‚Ñù‚â•0‚àû} (h : a ‚â† ‚ä§ ‚à® b ‚â† 0) :
  continuous_at (Œª x, x * a) b :=
tendsto.mul_const tendsto_id h.symm

protected lemma continuous_const_mul {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : continuous ((*) a) :=
continuous_iff_continuous_at.2 $ Œª x, ennreal.continuous_at_const_mul (or.inl ha)

protected lemma continuous_mul_const {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : continuous (Œª x, x * a) :=
continuous_iff_continuous_at.2 $ Œª x, ennreal.continuous_at_mul_const (or.inl ha)

@[continuity]
lemma continuous_pow (n : ‚Ñï) : continuous (Œª a : ‚Ñù‚â•0‚àû, a ^ n) :=
begin
  induction n with n IH,
  { simp [continuous_const] },
  simp_rw [nat.succ_eq_add_one, pow_add, pow_one, continuous_iff_continuous_at],
  assume x,
  refine ennreal.tendsto.mul (IH.tendsto _) _ tendsto_id _;
  by_cases H : x = 0,
  { simp only [H, zero_ne_top, ne.def, or_true, not_false_iff]},
  { exact or.inl (Œª h, H (pow_eq_zero h)) },
  { simp only [H, pow_eq_top_iff, zero_ne_top, false_or, eq_self_iff_true,
               not_true, ne.def, not_false_iff, false_and], },
  { simp only [H, true_or, ne.def, not_false_iff] }
end

protected lemma tendsto.pow {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} {n : ‚Ñï}
  (hm : tendsto m f (ùìù a)) :
  tendsto (Œª x, (m x) ^ n) f (ùìù (a ^ n)) :=
((continuous_pow n).tendsto a).comp hm

lemma le_of_forall_lt_one_mul_le {x y : ‚Ñù‚â•0‚àû} (h : ‚àÄ a < 1, a * x ‚â§ y) : x ‚â§ y :=
begin
  have : tendsto (* x) (ùìù[<] 1) (ùìù (1 * x)) :=
    (ennreal.continuous_at_mul_const (or.inr one_ne_zero)).mono_left inf_le_left,
  rw one_mul at this,
  haveI : (ùìù[<] (1 : ‚Ñù‚â•0‚àû)).ne_bot := nhds_within_Iio_self_ne_bot' ‚ü®0, ennreal.zero_lt_one‚ü©,
  exact le_of_tendsto this (eventually_nhds_within_iff.2 $ eventually_of_forall h)
end

lemma infi_mul_left' {Œπ} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
  (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0) (h0 : a = 0 ‚Üí nonempty Œπ) :
  (‚®Ö i, a * f i) = a * ‚®Ö i, f i :=
begin
  by_cases H : a = ‚ä§ ‚àß (‚®Ö i, f i) = 0,
  { rcases h H.1 H.2 with ‚ü®i, hi‚ü©,
    rw [H.2, mul_zero, ‚Üê bot_eq_zero, infi_eq_bot],
    exact Œª b hb, ‚ü®i, by rwa [hi, mul_zero, ‚Üê bot_eq_zero]‚ü© },
  { rw not_and_distrib at H,
    casesI is_empty_or_nonempty Œπ,
    { rw [infi_of_empty, infi_of_empty, mul_top, if_neg],
      exact mt h0 (not_nonempty_iff.2 ‚Äπ_‚Ä∫) },
    { exact (map_infi_of_continuous_at_of_monotone' (ennreal.continuous_at_const_mul H)
        ennreal.mul_left_mono).symm } }
end

lemma infi_mul_left {Œπ} [nonempty Œπ] {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
  (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0) :
  (‚®Ö i, a * f i) = a * ‚®Ö i, f i :=
infi_mul_left' h (Œª _, ‚Äπnonempty Œπ‚Ä∫)

lemma infi_mul_right' {Œπ} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
  (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0) (h0 : a = 0 ‚Üí nonempty Œπ) :
  (‚®Ö i, f i * a) = (‚®Ö i, f i) * a :=
by simpa only [mul_comm a] using infi_mul_left' h h0

lemma infi_mul_right {Œπ} [nonempty Œπ] {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
  (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0) :
  (‚®Ö i, f i * a) = (‚®Ö i, f i) * a :=
infi_mul_right' h (Œª _, ‚Äπnonempty Œπ‚Ä∫)

lemma inv_map_infi {Œπ : Sort*} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
  (infi x)‚Åª¬π = (‚®Ü i, (x i)‚Åª¬π) :=
order_iso.inv_ennreal.map_infi x

lemma inv_map_supr {Œπ : Sort*} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
  (supr x)‚Åª¬π = (‚®Ö i, (x i)‚Åª¬π) :=
order_iso.inv_ennreal.map_supr x

lemma inv_limsup {Œπ : Sort*} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} {l : filter Œπ} :
  (l.limsup x)‚Åª¬π = l.liminf (Œª i, (x i)‚Åª¬π) :=
by simp only [limsup_eq_infi_supr, inv_map_infi, inv_map_supr, liminf_eq_supr_infi]

lemma inv_liminf {Œπ : Sort*} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} {l : filter Œπ} :
  (l.liminf x)‚Åª¬π = l.limsup (Œª i, (x i)‚Åª¬π) :=
by simp only [limsup_eq_infi_supr, inv_map_infi, inv_map_supr, liminf_eq_supr_infi]

protected lemma continuous_inv : continuous (has_inv.inv : ‚Ñù‚â•0‚àû ‚Üí ‚Ñù‚â•0‚àû) :=
continuous_iff_continuous_at.2 $ Œª a, tendsto_order.2
‚ü®begin
  assume b hb,
  simp only [@ennreal.lt_inv_iff_lt_inv b],
  exact gt_mem_nhds (ennreal.lt_inv_iff_lt_inv.1 hb),
end,
begin
  assume b hb,
  simp only [gt_iff_lt, @ennreal.inv_lt_iff_inv_lt _ b],
  exact lt_mem_nhds (ennreal.inv_lt_iff_inv_lt.1 hb)
end‚ü©

@[simp] protected lemma tendsto_inv_iff {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} :
  tendsto (Œª x, (m x)‚Åª¬π) f (ùìù a‚Åª¬π) ‚Üî tendsto m f (ùìù a) :=
‚ü®Œª h, by simpa only [function.comp, ennreal.inv_inv]
  using (ennreal.continuous_inv.tendsto a‚Åª¬π).comp h,
  (ennreal.continuous_inv.tendsto a).comp‚ü©

protected lemma tendsto.div {f : filter Œ±} {ma : Œ± ‚Üí ‚Ñù‚â•0‚àû} {mb : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hma : tendsto ma f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† 0) (hmb : tendsto mb f (ùìù b)) (hb : b ‚â† ‚ä§ ‚à® a ‚â† ‚ä§) :
  tendsto (Œªa, ma a / mb a) f (ùìù (a / b)) :=
by { apply tendsto.mul hma _ (ennreal.tendsto_inv_iff.2 hmb) _; simp [ha, hb] }

protected lemma tendsto.const_div {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hm : tendsto m f (ùìù b)) (hb : b ‚â† ‚ä§ ‚à® a ‚â† ‚ä§) : tendsto (Œªb, a / m b) f (ùìù (a / b)) :=
by { apply tendsto.const_mul (ennreal.tendsto_inv_iff.2 hm), simp [hb] }

protected lemma tendsto.div_const {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
  (hm : tendsto m f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† 0) : tendsto (Œªx, m x / b) f (ùìù (a / b)) :=
by { apply tendsto.mul_const hm, simp [ha] }

protected lemma tendsto_inv_nat_nhds_zero : tendsto (Œª n : ‚Ñï, (n : ‚Ñù‚â•0‚àû)‚Åª¬π) at_top (ùìù 0) :=
ennreal.inv_top ‚ñ∏ ennreal.tendsto_inv_iff.2 tendsto_nat_nhds_top

lemma bsupr_add {Œπ} {s : set Œπ} (hs : s.nonempty) {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
  (‚®Ü i ‚àà s, f i) + a = ‚®Ü i ‚àà s, f i + a :=
begin
  simp only [‚Üê Sup_image], symmetry,
  rw [image_comp (+ a)],
  refine is_lub.Sup_eq ((is_lub_Sup $ f '' s).is_lub_of_tendsto _ (hs.image _) _),
  exacts [Œª x _ y _ hxy, add_le_add hxy le_rfl,
    tendsto.add (tendsto_id' inf_le_left) tendsto_const_nhds]
end

lemma Sup_add {s : set ‚Ñù‚â•0‚àû} (hs : s.nonempty) : Sup s + a = ‚®Üb‚ààs, b + a :=
by rw [Sup_eq_supr, bsupr_add hs]

lemma supr_add {Œπ : Sort*} {s : Œπ ‚Üí ‚Ñù‚â•0‚àû} [h : nonempty Œπ] : supr s + a = ‚®Üb, s b + a :=
let ‚ü®x‚ü© := h in
calc supr s + a = Sup (range s) + a : by rw Sup_range
  ... = (‚®Üb‚ààrange s, b + a) : Sup_add ‚ü®s x, x, rfl‚ü©
  ... = _ : supr_range

lemma add_supr {Œπ : Sort*} {s : Œπ ‚Üí ‚Ñù‚â•0‚àû} [h : nonempty Œπ] : a + supr s = ‚®Üb, a + s b :=
by rw [add_comm, supr_add]; simp [add_comm]

lemma supr_add_supr {Œπ : Sort*} {f g : Œπ ‚Üí ‚Ñù‚â•0‚àû} (h : ‚àÄi j, ‚àÉk, f i + g j ‚â§ f k + g k) :
  supr f + supr g = (‚®Ü a, f a + g a) :=
begin
  by_cases hŒπ : nonempty Œπ,
  { letI := hŒπ,
    refine le_antisymm _ (supr_le $ Œª a, add_le_add (le_supr _ _) (le_supr _ _)),
    simpa [add_supr, supr_add] using
      Œª i j:Œπ, show f i + g j ‚â§ ‚®Ü a, f a + g a, from
      let ‚ü®k, hk‚ü© := h i j in le_supr_of_le k hk },
  { have : ‚àÄf:Œπ ‚Üí ‚Ñù‚â•0‚àû, (‚®Üi, f i) = 0 := Œª f, supr_eq_zero.mpr (Œª i, (hŒπ ‚ü®i‚ü©).elim),
    rw [this, this, this, zero_add] }
end

lemma supr_add_supr_of_monotone {Œπ : Sort*} [semilattice_sup Œπ]
  {f g : Œπ ‚Üí ‚Ñù‚â•0‚àû} (hf : monotone f) (hg : monotone g) :
  supr f + supr g = (‚®Ü a, f a + g a) :=
supr_add_supr $ assume i j, ‚ü®i ‚äî j, add_le_add (hf $ le_sup_left) (hg $ le_sup_right)‚ü©

lemma finset_sum_supr_nat {Œ±} {Œπ} [semilattice_sup Œπ] {s : finset Œ±} {f : Œ± ‚Üí Œπ ‚Üí ‚Ñù‚â•0‚àû}
  (hf : ‚àÄa, monotone (f a)) :
  ‚àë a in s, supr (f a) = (‚®Ü n, ‚àë a in s, f a n) :=
begin
  refine finset.induction_on s _ _,
  { simp, },
  { assume a s has ih,
    simp only [finset.sum_insert has],
    rw [ih, supr_add_supr_of_monotone (hf a)],
    assume i j h,
    exact (finset.sum_le_sum $ assume a ha, hf a h) }
end

lemma mul_Sup {s : set ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : a * Sup s = ‚®Üi‚ààs, a * i :=
begin
  by_cases hs : ‚àÄx‚ààs, x = (0:‚Ñù‚â•0‚àû),
  { have h‚ÇÅ : Sup s = 0 := (bot_unique $ Sup_le $ assume a ha, (hs a ha).symm ‚ñ∏ le_refl 0),
    have h‚ÇÇ : (‚®Üi ‚àà s, a * i) = 0 :=
      (bot_unique $ supr_le $ assume a, supr_le $ assume ha, by simp [hs a ha]),
    rw [h‚ÇÅ, h‚ÇÇ, mul_zero] },
  { simp only [not_forall] at hs,
    rcases hs with ‚ü®x, hx, hx0‚ü©,
    have s‚ÇÅ : Sup s ‚â† 0 :=
      pos_iff_ne_zero.1 (lt_of_lt_of_le (pos_iff_ne_zero.2 hx0) (le_Sup hx)),
    have : Sup ((Œªb, a * b) '' s) = a * Sup s :=
      is_lub.Sup_eq ((is_lub_Sup s).is_lub_of_tendsto
        (assume x _ y _ h, mul_le_mul_left' h _)
        ‚ü®x, hx‚ü©
        (ennreal.tendsto.const_mul (tendsto_id' inf_le_left) (or.inl s‚ÇÅ))),
    rw [this.symm, Sup_image] }
end

lemma mul_supr {Œπ : Sort*} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : a * supr f = ‚®Üi, a * f i :=
by rw [‚Üê Sup_range, mul_Sup, supr_range]

lemma supr_mul {Œπ : Sort*} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : supr f * a = ‚®Üi, f i * a :=
by rw [mul_comm, mul_supr]; congr; funext; rw [mul_comm]

lemma supr_div {Œπ : Sort*} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : supr f / a = ‚®Üi, f i / a :=
supr_mul

protected lemma tendsto_coe_sub : ‚àÄ{b:‚Ñù‚â•0‚àû}, tendsto (Œªb:‚Ñù‚â•0‚àû, ‚Üër - b) (ùìù b) (ùìù (‚Üër - b)) :=
begin
  refine forall_ennreal.2 ‚ü®Œª a, _, _‚ü©,
  { simp [@nhds_coe a, tendsto_map'_iff, (‚àò), tendsto_coe, ‚Üê with_top.coe_sub],
    exact tendsto_const_nhds.sub tendsto_id },
  simp,
  exact (tendsto.congr' (mem_of_superset (lt_mem_nhds $ @coe_lt_top r) $
    by simp [le_of_lt] {contextual := tt})) tendsto_const_nhds
end

lemma sub_supr {Œπ : Sort*} [nonempty Œπ] {b : Œπ ‚Üí ‚Ñù‚â•0‚àû} (hr : a < ‚ä§) :
  a - (‚®Üi, b i) = (‚®Öi, a - b i) :=
let ‚ü®r, eq, _‚ü© := lt_iff_exists_coe.mp hr in
have Inf ((Œªb, ‚Üër - b) '' range b) = ‚Üër - (‚®Üi, b i),
  from is_glb.Inf_eq $ is_lub_supr.is_glb_of_tendsto
    (assume x _ y _, tsub_le_tsub (le_refl (r : ‚Ñù‚â•0‚àû)))
    (range_nonempty _)
    (ennreal.tendsto_coe_sub.comp (tendsto_id' inf_le_left)),
by rw [eq, ‚Üêthis]; simp [Inf_image, infi_range, -mem_range]; exact le_rfl

lemma exists_countable_dense_no_zero_top :
  ‚àÉ (s : set ‚Ñù‚â•0‚àû), countable s ‚àß dense s ‚àß 0 ‚àâ s ‚àß ‚àû ‚àâ s :=
begin
  obtain ‚ü®s, s_count, s_dense, hs‚ü© : ‚àÉ s : set ‚Ñù‚â•0‚àû, countable s ‚àß dense s ‚àß
    (‚àÄ x, is_bot x ‚Üí x ‚àâ s) ‚àß (‚àÄ x, is_top x ‚Üí x ‚àâ s) := exists_countable_dense_no_bot_top ‚Ñù‚â•0‚àû,
  exact ‚ü®s, s_count, s_dense, Œª h, hs.1 0 (by simp) h, Œª h, hs.2 ‚àû (by simp) h‚ü©,
end

end topological_space

section tsum

variables {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû}

@[norm_cast] protected lemma has_sum_coe {f : Œ± ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0} :
  has_sum (Œªa, (f a : ‚Ñù‚â•0‚àû)) ‚Üër ‚Üî has_sum f r :=
have (Œªs:finset Œ±, ‚àë a in s, ‚Üë(f a)) = (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) ‚àò (Œªs:finset Œ±, ‚àë a in s, f a),
  from funext $ assume s, ennreal.coe_finset_sum.symm,
by unfold has_sum; rw [this, tendsto_coe]

protected lemma tsum_coe_eq {f : Œ± ‚Üí ‚Ñù‚â•0} (h : has_sum f r) : ‚àë'a, (f a : ‚Ñù‚â•0‚àû) = r :=
(ennreal.has_sum_coe.2 h).tsum_eq

protected lemma coe_tsum {f : Œ± ‚Üí ‚Ñù‚â•0} : summable f ‚Üí ‚Üë(tsum f) = ‚àë'a, (f a : ‚Ñù‚â•0‚àû)
| ‚ü®r, hr‚ü© := by rw [hr.tsum_eq, ennreal.tsum_coe_eq hr]

protected lemma has_sum : has_sum f (‚®Üs:finset Œ±, ‚àë a in s, f a) :=
tendsto_at_top_supr $ Œª s t, finset.sum_le_sum_of_subset

@[simp] protected lemma summable : summable f := ‚ü®_, ennreal.has_sum‚ü©

lemma tsum_coe_ne_top_iff_summable {f : Œ≤ ‚Üí ‚Ñù‚â•0} :
  ‚àë' b, (f b:‚Ñù‚â•0‚àû) ‚â† ‚àû ‚Üî summable f :=
begin
  refine ‚ü®Œª h, _, Œª h, ennreal.coe_tsum h ‚ñ∏ ennreal.coe_ne_top‚ü©,
  lift (‚àë' b, (f b:‚Ñù‚â•0‚àû)) to ‚Ñù‚â•0 using h with a ha,
  refine ‚ü®a, ennreal.has_sum_coe.1 _‚ü©,
  rw ha,
  exact ennreal.summable.has_sum
end

protected lemma tsum_eq_supr_sum : ‚àë'a, f a = (‚®Üs:finset Œ±, ‚àë a in s, f a) :=
ennreal.has_sum.tsum_eq

protected lemma tsum_eq_supr_sum' {Œπ : Type*} (s : Œπ ‚Üí finset Œ±) (hs : ‚àÄ t, ‚àÉ i, t ‚äÜ s i) :
  ‚àë' a, f a = ‚®Ü i, ‚àë a in s i, f a :=
begin
  rw [ennreal.tsum_eq_supr_sum],
  symmetry,
  change (‚®Üi:Œπ, (Œª t : finset Œ±, ‚àë a in t, f a) (s i)) = ‚®Üs:finset Œ±, ‚àë a in s, f a,
  exact (finset.sum_mono_set f).supr_comp_eq hs
end

protected lemma tsum_sigma {Œ≤ : Œ± ‚Üí Type*} (f : Œ†a, Œ≤ a ‚Üí ‚Ñù‚â•0‚àû) :
  ‚àë'p:Œ£a, Œ≤ a, f p.1 p.2 = ‚àë'a b, f a b :=
tsum_sigma' (assume b, ennreal.summable) ennreal.summable

protected lemma tsum_sigma' {Œ≤ : Œ± ‚Üí Type*} (f : (Œ£ a, Œ≤ a) ‚Üí ‚Ñù‚â•0‚àû) :
  ‚àë'p:(Œ£a, Œ≤ a), f p = ‚àë'a b, f ‚ü®a, b‚ü© :=
tsum_sigma' (assume b, ennreal.summable) ennreal.summable

protected lemma tsum_prod {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñù‚â•0‚àû} : ‚àë'p:Œ±√óŒ≤, f p.1 p.2 = ‚àë'a, ‚àë'b, f a b :=
tsum_prod' ennreal.summable $ Œª _, ennreal.summable

protected lemma tsum_comm {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñù‚â•0‚àû} : ‚àë'a, ‚àë'b, f a b = ‚àë'b, ‚àë'a, f a b :=
tsum_comm' ennreal.summable (Œª _, ennreal.summable) (Œª _, ennreal.summable)

protected lemma tsum_add : ‚àë'a, (f a + g a) = (‚àë'a, f a) + (‚àë'a, g a) :=
tsum_add ennreal.summable ennreal.summable

protected lemma tsum_le_tsum (h : ‚àÄa, f a ‚â§ g a) : ‚àë'a, f a ‚â§ ‚àë'a, g a :=
tsum_le_tsum h ennreal.summable ennreal.summable

protected lemma sum_le_tsum {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (s : finset Œ±) : ‚àë x in s, f x ‚â§ ‚àë' x, f x :=
sum_le_tsum s (Œª x hx, zero_le _) ennreal.summable

protected lemma tsum_eq_supr_nat' {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {N : ‚Ñï ‚Üí ‚Ñï} (hN : tendsto N at_top at_top) :
  ‚àë'i:‚Ñï, f i = (‚®Üi:‚Ñï, ‚àë a in finset.range (N i), f a) :=
ennreal.tsum_eq_supr_sum' _ $ Œª t,
  let ‚ü®n, hn‚ü©    := t.exists_nat_subset_range,
      ‚ü®k, _, hk‚ü© := exists_le_of_tendsto_at_top hN 0 n in
  ‚ü®k, finset.subset.trans hn (finset.range_mono hk)‚ü©

protected lemma tsum_eq_supr_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} :
  ‚àë'i:‚Ñï, f i = (‚®Üi:‚Ñï, ‚àë a in finset.range i, f a) :=
ennreal.tsum_eq_supr_sum' _ finset.exists_nat_subset_range

protected lemma tsum_eq_liminf_sum_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} :
  ‚àë' i, f i = filter.at_top.liminf (Œª n, ‚àë i in finset.range n, f i) :=
begin
  rw [ennreal.tsum_eq_supr_nat, filter.liminf_eq_supr_infi_of_nat],
  congr,
  refine funext (Œª n, le_antisymm _ _),
  { refine le_binfi (Œª i hi, finset.sum_le_sum_of_subset_of_nonneg _ (Œª _ _ _, zero_le _)),
    simpa only [finset.range_subset, add_le_add_iff_right] using hi, },
  { refine le_trans (infi_le _ n) _,
    simp [le_refl n, le_refl ((finset.range n).sum f)], },
end

protected lemma le_tsum (a : Œ±) : f a ‚â§ ‚àë'a, f a :=
le_tsum' ennreal.summable a

@[simp] protected lemma tsum_eq_zero : ‚àë' i, f i = 0 ‚Üî ‚àÄ i, f i = 0 :=
‚ü®Œª h i, nonpos_iff_eq_zero.1 $ h ‚ñ∏ ennreal.le_tsum i, Œª h, by simp [h]‚ü©

protected lemma tsum_eq_top_of_eq_top : (‚àÉ a, f a = ‚àû) ‚Üí ‚àë' a, f a = ‚àû
| ‚ü®a, ha‚ü© := top_unique $ ha ‚ñ∏ ennreal.le_tsum a

@[simp] protected lemma tsum_top [nonempty Œ±] : ‚àë' a : Œ±, ‚àû = ‚àû :=
let ‚ü®a‚ü© := ‚Äπnonempty Œ±‚Ä∫ in ennreal.tsum_eq_top_of_eq_top ‚ü®a, rfl‚ü©

lemma tsum_const_eq_top_of_ne_zero {Œ± : Type*} [infinite Œ±] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† 0) :
  (‚àë' (a : Œ±), c) = ‚àû :=
begin
  have A : tendsto (Œª (n : ‚Ñï), (n : ‚Ñù‚â•0‚àû) * c) at_top (ùìù (‚àû * c)),
  { apply ennreal.tendsto.mul_const tendsto_nat_nhds_top,
    simp only [true_or, top_ne_zero, ne.def, not_false_iff] },
  have B : ‚àÄ (n : ‚Ñï), (n : ‚Ñù‚â•0‚àû) * c ‚â§ (‚àë' (a : Œ±), c),
  { assume n,
    rcases infinite.exists_subset_card_eq Œ± n with ‚ü®s, hs‚ü©,
    simpa [hs] using @ennreal.sum_le_tsum Œ± (Œª i, c) s },
  simpa [hc] using le_of_tendsto' A B,
end

protected lemma ne_top_of_tsum_ne_top (h : ‚àë' a, f a ‚â† ‚àû) (a : Œ±) : f a ‚â† ‚àû :=
Œª ha, h $ ennreal.tsum_eq_top_of_eq_top ‚ü®a, ha‚ü©

protected lemma tsum_mul_left : ‚àë'i, a * f i = a * ‚àë'i, f i :=
if h : ‚àÄi, f i = 0 then by simp [h] else
let ‚ü®i, (hi : f i ‚â† 0)‚ü© := not_forall.mp h in
have sum_ne_0 : ‚àë'i, f i ‚â† 0, from ne_of_gt $
  calc 0 < f i : lt_of_le_of_ne (zero_le _) hi.symm
    ... ‚â§ ‚àë'i, f i : ennreal.le_tsum _,
have tendsto (Œªs:finset Œ±, ‚àë j in s, a * f j) at_top (ùìù (a * ‚àë'i, f i)),
  by rw [‚Üê show (*) a ‚àò (Œªs:finset Œ±, ‚àë j in s, f j) = Œªs, ‚àë j in s, a * f j,
         from funext $ Œª s, finset.mul_sum];
  exact ennreal.tendsto.const_mul ennreal.summable.has_sum (or.inl sum_ne_0),
has_sum.tsum_eq this

protected lemma tsum_mul_right : (‚àë'i, f i * a) = (‚àë'i, f i) * a :=
by simp [mul_comm, ennreal.tsum_mul_left]

@[simp] lemma tsum_supr_eq {Œ± : Type*} (a : Œ±) {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
  ‚àë'b:Œ±, (‚®Ü (h : a = b), f b) = f a :=
le_antisymm
  (by rw [ennreal.tsum_eq_supr_sum]; exact supr_le (assume s,
    calc (‚àë b in s, ‚®Ü (h : a = b), f b) ‚â§ ‚àë b in {a}, ‚®Ü (h : a = b), f b :
        finset.sum_le_sum_of_ne_zero $ assume b _ hb,
          suffices a = b, by simpa using this.symm,
          classical.by_contradiction $ assume h,
            by simpa [h] using hb
      ... = f a : by simp))
  (calc f a ‚â§ (‚®Ü (h : a = a), f a) : le_supr (Œªh:a=a, f a) rfl
    ... ‚â§ (‚àë'b:Œ±, ‚®Ü (h : a = b), f b) : ennreal.le_tsum _)

lemma has_sum_iff_tendsto_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (r : ‚Ñù‚â•0‚àû) :
  has_sum f r ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) :=
begin
  refine ‚ü®has_sum.tendsto_sum_nat, assume h, _‚ü©,
  rw [‚Üê supr_eq_of_tendsto _ h, ‚Üê ennreal.tsum_eq_supr_nat],
  { exact ennreal.summable.has_sum },
  { exact assume s t hst, finset.sum_le_sum_of_subset (finset.range_subset.2 hst) }
end

lemma tendsto_nat_tsum (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) :
  tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù (‚àë' n, f n)) :=
by { rw ‚Üê has_sum_iff_tendsto_nat, exact ennreal.summable.has_sum }

lemma to_nnreal_apply_of_tsum_ne_top {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' i, f i ‚â† ‚àû) (x : Œ±) :
  (((ennreal.to_nnreal ‚àò f) x : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) = f x :=
coe_to_nnreal $ ennreal.ne_top_of_tsum_ne_top hf _

lemma summable_to_nnreal_of_tsum_ne_top {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' i, f i ‚â† ‚àû) :
  summable (ennreal.to_nnreal ‚àò f) :=
by simpa only [‚Üêtsum_coe_ne_top_iff_summable, to_nnreal_apply_of_tsum_ne_top hf] using hf

lemma tendsto_cofinite_zero_of_tsum_ne_top {Œ±} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' x, f x ‚â† ‚àû) :
  tendsto f cofinite (ùìù 0) :=
begin
  have f_ne_top : ‚àÄ n, f n ‚â† ‚àû, from ennreal.ne_top_of_tsum_ne_top hf,
  have h_f_coe : f = Œª n, ((f n).to_nnreal : ennreal),
    from funext (Œª n, (coe_to_nnreal (f_ne_top n)).symm),
  rw [h_f_coe, ‚Üê@coe_zero, tendsto_coe],
  exact nnreal.tendsto_cofinite_zero_of_summable (summable_to_nnreal_of_tsum_ne_top hf),
end

lemma tendsto_at_top_zero_of_tsum_ne_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' x, f x ‚â† ‚àû) :
  tendsto f at_top (ùìù 0) :=
by { rw ‚Üênat.cofinite_eq_at_top, exact tendsto_cofinite_zero_of_tsum_ne_top hf }

/-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole
space. This does not need a summability assumption, as otherwise all sums are zero. -/
lemma tendsto_tsum_compl_at_top_zero {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àë' x, f x ‚â† ‚àû) :
  tendsto (Œª (s : finset Œ±), ‚àë' b : {x // x ‚àâ s}, f b) at_top (ùìù 0) :=
begin
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using ennreal.ne_top_of_tsum_ne_top hf,
  convert ennreal.tendsto_coe.2 (nnreal.tendsto_tsum_compl_at_top_zero f),
  ext1 s,
  rw ennreal.coe_tsum,
  exact nnreal.summable_comp_injective (tsum_coe_ne_top_iff_summable.1 hf) subtype.coe_injective
end

protected lemma tsum_apply {Œπ Œ± : Type*} {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} {x : Œ±} :
  (‚àë' i, f i) x = ‚àë' i, f i x :=
tsum_apply $ pi.summable.mpr $ Œª _, ennreal.summable

lemma tsum_sub {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {g : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (h‚ÇÅ : ‚àë' i, g i ‚â† ‚àû) (h‚ÇÇ : g ‚â§ f) :
  ‚àë' i, (f i - g i) = (‚àë' i, f i) - (‚àë' i, g i) :=
begin
  have h‚ÇÉ: ‚àë' i, (f i - g i) = ‚àë' i, (f i - g i + g i) - ‚àë' i, g i,
  { rw [ennreal.tsum_add, add_sub_self h‚ÇÅ]},
  have h‚ÇÑ:(Œª i, (f i - g i) + (g i)) = f,
  { ext n, rw tsub_add_cancel_of_le (h‚ÇÇ n)},
  rw h‚ÇÑ at h‚ÇÉ, apply h‚ÇÉ,
end

lemma tsum_mono_subtype (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) {s t : set Œ±} (h : s ‚äÜ t) :
  ‚àë' (x : s), f x ‚â§ ‚àë' (x : t), f x :=
begin
  simp only [tsum_subtype],
  apply ennreal.tsum_le_tsum,
  assume x,
  split_ifs,
  { exact le_rfl },
  { exact (h_2 (h h_1)).elim },
  { exact zero_le _ },
  { exact le_rfl }
end

lemma tsum_union_le (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s t : set Œ±) :
  ‚àë' (x : s ‚à™ t), f x ‚â§ ‚àë' (x : s), f x + ‚àë' (x : t), f x :=
calc ‚àë' (x : s ‚à™ t), f x = ‚àë' (x : s ‚à™ (t \ s)), f x :
  by { apply tsum_congr_subtype, rw union_diff_self }
... = ‚àë' (x : s), f x + ‚àë' (x : t \ s), f x :
  tsum_union_disjoint disjoint_diff ennreal.summable ennreal.summable
... ‚â§ ‚àë' (x : s), f x + ‚àë' (x : t), f x :
  add_le_add le_rfl (tsum_mono_subtype _ (diff_subset _ _))

lemma tsum_bUnion_le {Œπ : Type*} (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s : finset Œπ) (t : Œπ ‚Üí set Œ±) :
  ‚àë' (x : ‚ãÉ (i ‚àà s), t i), f x ‚â§ ‚àë i in s, ‚àë' (x : t i), f x :=
begin
  classical,
  induction s using finset.induction_on with i s hi ihs h, { simp },
  have : (‚ãÉ (j ‚àà insert i s), t j) = t i ‚à™ (‚ãÉ (j ‚àà s), t j), by simp,
  rw tsum_congr_subtype f this,
  calc ‚àë' (x : (t i ‚à™ (‚ãÉ (j ‚àà s), t j))), f x ‚â§
  ‚àë' (x : t i), f x + ‚àë' (x : ‚ãÉ (j ‚àà s), t j), f x : tsum_union_le _ _ _
  ... ‚â§ ‚àë' (x : t i), f x + ‚àë i in s, ‚àë' (x : t i), f x : add_le_add le_rfl ihs
  ... = ‚àë j in insert i s, ‚àë' (x : t j), f x : (finset.sum_insert hi).symm
end

lemma tsum_Union_le {Œπ : Type*} [fintype Œπ] (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (t : Œπ ‚Üí set Œ±) :
  ‚àë' (x : ‚ãÉ i, t i), f x ‚â§ ‚àë i, ‚àë' (x : t i), f x :=
begin
  classical,
  have : (‚ãÉ i, t i) = (‚ãÉ (i ‚àà (finset.univ : finset Œπ)), t i), by simp,
  rw tsum_congr_subtype f this,
  exact tsum_bUnion_le _ _ _
end

end tsum

lemma tendsto_to_real_iff {Œπ} {fi : filter Œπ} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ i, f i ‚â† ‚àû) {x : ‚Ñù‚â•0‚àû}
  (hx : x ‚â† ‚àû) :
  fi.tendsto (Œª n, (f n).to_real) (ùìù x.to_real) ‚Üî fi.tendsto f (ùìù x) :=
begin
  refine ‚ü®Œª h, _, Œª h, tendsto.comp (ennreal.tendsto_to_real hx) h‚ü©,
  have h_eq : f = (Œª n, ennreal.of_real (f n).to_real),
    by { ext1 n, rw ennreal.of_real_to_real (hf n), },
  rw [h_eq, ‚Üê ennreal.of_real_to_real hx],
  exact ennreal.tendsto_of_real h,
end

lemma tsum_coe_ne_top_iff_summable_coe {f : Œ± ‚Üí ‚Ñù‚â•0} :
  ‚àë' a, (f a : ‚Ñù‚â•0‚àû) ‚â† ‚àû ‚Üî summable (Œª a, (f a : ‚Ñù)) :=
begin
  rw nnreal.summable_coe,
  exact tsum_coe_ne_top_iff_summable,
end

lemma tsum_coe_eq_top_iff_not_summable_coe {f : Œ± ‚Üí ‚Ñù‚â•0} :
  ‚àë' a, (f a : ‚Ñù‚â•0‚àû) = ‚àû ‚Üî ¬¨ summable (Œª a, (f a : ‚Ñù)) :=
begin
  rw [‚Üê @not_not (‚àë' a, ‚Üë(f a) = ‚ä§)],
  exact not_congr tsum_coe_ne_top_iff_summable_coe
end

lemma summable_to_real {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hsum : ‚àë' x, f x ‚â† ‚àû) :
  summable (Œª x, (f x).to_real) :=
begin
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using ennreal.ne_top_of_tsum_ne_top hsum,
  rwa ennreal.tsum_coe_ne_top_iff_summable_coe at hsum,
end

end ennreal

namespace nnreal

open_locale nnreal

lemma tsum_eq_to_nnreal_tsum {f : Œ≤ ‚Üí ‚Ñù‚â•0} :
  (‚àë' b, f b) = (‚àë' b, (f b : ‚Ñù‚â•0‚àû)).to_nnreal :=
begin
  by_cases h : summable f,
  { rw [‚Üê ennreal.coe_tsum h, ennreal.to_nnreal_coe] },
  { have A := tsum_eq_zero_of_not_summable h,
    simp only [‚Üê ennreal.tsum_coe_ne_top_iff_summable, not_not] at h,
    simp only [h, ennreal.top_to_nnreal, A] }
end

/-- Comparison test of convergence of `‚Ñù‚â•0`-valued series. -/
lemma exists_le_has_sum_of_le {f g : Œ≤ ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0}
  (hgf : ‚àÄb, g b ‚â§ f b) (hfr : has_sum f r) : ‚àÉp‚â§r, has_sum g p :=
have ‚àë'b, (g b : ‚Ñù‚â•0‚àû) ‚â§ r,
begin
  refine has_sum_le (assume b, _) ennreal.summable.has_sum (ennreal.has_sum_coe.2 hfr),
  exact ennreal.coe_le_coe.2 (hgf _)
end,
let ‚ü®p, eq, hpr‚ü© := ennreal.le_coe_iff.1 this in
‚ü®p, hpr, ennreal.has_sum_coe.1 $ eq ‚ñ∏ ennreal.summable.has_sum‚ü©

/-- Comparison test of convergence of `‚Ñù‚â•0`-valued series. -/
lemma summable_of_le {f g : Œ≤ ‚Üí ‚Ñù‚â•0} (hgf : ‚àÄb, g b ‚â§ f b) : summable f ‚Üí summable g
| ‚ü®r, hfr‚ü© := let ‚ü®p, _, hp‚ü© := exists_le_has_sum_of_le hgf hfr in hp.summable

/-- A series of non-negative real numbers converges to `r` in the sense of `has_sum` if and only if
the sequence of partial sum converges to `r`. -/
lemma has_sum_iff_tendsto_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0} :
  has_sum f r ‚Üî tendsto (Œªn:‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) :=
begin
  rw [‚Üê ennreal.has_sum_coe, ennreal.has_sum_iff_tendsto_nat],
  simp only [ennreal.coe_finset_sum.symm],
  exact ennreal.tendsto_coe
end

lemma not_summable_iff_tendsto_nat_at_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0} :
  ¬¨ summable f ‚Üî tendsto (Œª n : ‚Ñï, ‚àë i in finset.range n, f i) at_top at_top :=
begin
  split,
  { intros h,
    refine ((tendsto_of_monotone _).resolve_right h).comp _,
    exacts [finset.sum_mono_set _, tendsto_finset_range] },
  { rintros hnat ‚ü®r, hr‚ü©,
    exact not_tendsto_nhds_of_tendsto_at_top hnat _ (has_sum_iff_tendsto_nat.1 hr) }
end

lemma summable_iff_not_tendsto_nat_at_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0} :
  summable f ‚Üî ¬¨ tendsto (Œª n : ‚Ñï, ‚àë i in finset.range n, f i) at_top at_top :=
by rw [‚Üê not_iff_not, not_not, not_summable_iff_tendsto_nat_at_top]

lemma summable_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù‚â•0} {c : ‚Ñù‚â•0}
  (h : ‚àÄ n, ‚àë i in finset.range n, f i ‚â§ c) : summable f :=
begin
  apply summable_iff_not_tendsto_nat_at_top.2 (Œª H, _),
  rcases exists_lt_of_tendsto_at_top H 0 c with ‚ü®n, -, hn‚ü©,
  exact lt_irrefl _ (hn.trans_le (h n)),
end

lemma tsum_le_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù‚â•0} {c : ‚Ñù‚â•0}
  (h : ‚àÄ n, ‚àë i in finset.range n, f i ‚â§ c) : ‚àë' n, f n ‚â§ c :=
le_of_tendsto' (has_sum_iff_tendsto_nat.1 (summable_of_sum_range_le h).has_sum) h

lemma tsum_comp_le_tsum_of_inj {Œ≤ : Type*} {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : summable f)
  {i : Œ≤ ‚Üí Œ±} (hi : function.injective i) : ‚àë' x, f (i x) ‚â§ ‚àë' x, f x :=
tsum_le_tsum_of_inj i hi (Œª c hc, zero_le _) (Œª b, le_rfl) (summable_comp_injective hf hi) hf

lemma summable_sigma {Œ≤ : Œ† x : Œ±, Type*} {f : (Œ£ x, Œ≤ x) ‚Üí ‚Ñù‚â•0} :
  summable f ‚Üî (‚àÄ x, summable (Œª y, f ‚ü®x, y‚ü©)) ‚àß summable (Œª x, ‚àë' y, f ‚ü®x, y‚ü©) :=
begin
  split,
  { simp only [‚Üê nnreal.summable_coe, nnreal.coe_tsum],
    exact Œª h, ‚ü®h.sigma_factor, h.sigma‚ü© },
  { rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
    simpa only [‚Üê ennreal.tsum_coe_ne_top_iff_summable, ennreal.tsum_sigma', ennreal.coe_tsum, h‚ÇÅ]
      using h‚ÇÇ }
end

lemma indicator_summable {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : summable f) (s : set Œ±) :
  summable (s.indicator f) :=
begin
  refine nnreal.summable_of_le (Œª a, le_trans (le_of_eq (s.indicator_apply f a)) _) hf,
  split_ifs,
  exact le_refl (f a),
  exact zero_le_coe,
end

lemma tsum_indicator_ne_zero {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : summable f) {s : set Œ±} (h : ‚àÉ a ‚àà s, f a ‚â† 0) :
  ‚àë' x, (s.indicator f) x ‚â† 0 :=
Œª h', let ‚ü®a, ha, hap‚ü© := h in
  hap (trans (set.indicator_apply_eq_self.mpr (absurd ha)).symm
    (((tsum_eq_zero_iff (indicator_summable hf s)).1 h') a))

open finset

/-- For `f : ‚Ñï ‚Üí ‚Ñù‚â•0`, then `‚àë' k, f (k + i)` tends to zero. This does not require a summability
assumption on `f`, as otherwise all sums are zero. -/
lemma tendsto_sum_nat_add (f : ‚Ñï ‚Üí ‚Ñù‚â•0) : tendsto (Œª i, ‚àë' k, f (k + i)) at_top (ùìù 0) :=
begin
  rw ‚Üê tendsto_coe,
  convert tendsto_sum_nat_add (Œª i, (f i : ‚Ñù)),
  norm_cast,
end

lemma has_sum_lt {f g : Œ± ‚Üí ‚Ñù‚â•0} {sf sg : ‚Ñù‚â•0} {i : Œ±} (h : ‚àÄ (a : Œ±), f a ‚â§ g a) (hi : f i < g i)
  (hf : has_sum f sf) (hg : has_sum g sg) : sf < sg :=
begin
  have A : ‚àÄ (a : Œ±), (f a : ‚Ñù) ‚â§ g a := Œª a, nnreal.coe_le_coe.2 (h a),
  have : (sf : ‚Ñù) < sg :=
    has_sum_lt A (nnreal.coe_lt_coe.2 hi) (has_sum_coe.2 hf) (has_sum_coe.2 hg),
  exact nnreal.coe_lt_coe.1 this
end

@[mono] lemma has_sum_strict_mono
  {f g : Œ± ‚Üí ‚Ñù‚â•0} {sf sg : ‚Ñù‚â•0} (hf : has_sum f sf) (hg : has_sum g sg) (h : f < g) : sf < sg :=
let ‚ü®hle, i, hi‚ü© := pi.lt_def.mp h in has_sum_lt hle hi hf hg

lemma tsum_lt_tsum {f g : Œ± ‚Üí ‚Ñù‚â•0} {i : Œ±} (h : ‚àÄ (a : Œ±), f a ‚â§ g a) (hi : f i < g i)
  (hg : summable g) : ‚àë' n, f n < ‚àë' n, g n :=
has_sum_lt h hi (summable_of_le h hg).has_sum hg.has_sum

@[mono] lemma tsum_strict_mono {f g : Œ± ‚Üí ‚Ñù‚â•0} (hg : summable g) (h : f < g) :
  ‚àë' n, f n < ‚àë' n, g n :=
let ‚ü®hle, i, hi‚ü© := pi.lt_def.mp h in tsum_lt_tsum hle hi hg

lemma tsum_pos {g : Œ± ‚Üí ‚Ñù‚â•0} (hg : summable g) (i : Œ±) (hi : 0 < g i) :
  0 < ‚àë' b, g b :=
by { rw ‚Üê tsum_zero, exact tsum_lt_tsum (Œª a, zero_le _) hi hg }

end nnreal

namespace ennreal

lemma tsum_to_real_eq
  {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ a, f a ‚â† ‚àû) :
  (‚àë' a, f a).to_real = ‚àë' a, (f a).to_real :=
begin
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using hf,
  have : (‚àë' (a : Œ±), (f a : ‚Ñù‚â•0‚àû)).to_real =
    ((‚àë' (a : Œ±), (f a : ‚Ñù‚â•0‚àû)).to_nnreal : ‚Ñù‚â•0‚àû).to_real,
  { rw [ennreal.coe_to_real], refl },
  rw [this, ‚Üê nnreal.tsum_eq_to_nnreal_tsum, ennreal.coe_to_real],
  exact nnreal.coe_tsum
end

lemma tendsto_sum_nat_add (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (hf : ‚àë' i, f i ‚â† ‚àû) :
  tendsto (Œª i, ‚àë' k, f (k + i)) at_top (ùìù 0) :=
begin
  lift f to ‚Ñï ‚Üí ‚Ñù‚â•0 using ennreal.ne_top_of_tsum_ne_top hf,
  replace hf : summable f := tsum_coe_ne_top_iff_summable.1 hf,
  simp only [‚Üê ennreal.coe_tsum, nnreal.summable_nat_add _ hf, ‚Üê ennreal.coe_zero],
  exact_mod_cast nnreal.tendsto_sum_nat_add f
end

end ennreal

lemma tsum_comp_le_tsum_of_inj {Œ≤ : Type*} {f : Œ± ‚Üí ‚Ñù} (hf : summable f) (hn : ‚àÄ a, 0 ‚â§ f a)
  {i : Œ≤ ‚Üí Œ±} (hi : function.injective i) : tsum (f ‚àò i) ‚â§ tsum f :=
begin
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using hn,
  rw nnreal.summable_coe at hf,
  simpa only [(‚àò), ‚Üê nnreal.coe_tsum] using nnreal.tsum_comp_le_tsum_of_inj hf hi
end

/-- Comparison test of convergence of series of non-negative real numbers. -/
lemma summable_of_nonneg_of_le {f g : Œ≤ ‚Üí ‚Ñù}
  (hg : ‚àÄb, 0 ‚â§ g b) (hgf : ‚àÄb, g b ‚â§ f b) (hf : summable f) : summable g :=
begin
  lift f to Œ≤ ‚Üí ‚Ñù‚â•0 using Œª b, (hg b).trans (hgf b),
  lift g to Œ≤ ‚Üí ‚Ñù‚â•0 using hg,
  rw nnreal.summable_coe at hf ‚ä¢,
  exact nnreal.summable_of_le (Œª b, nnreal.coe_le_coe.1 (hgf b)) hf
end

/-- A series of non-negative real numbers converges to `r` in the sense of `has_sum` if and only if
the sequence of partial sum converges to `r`. -/
lemma has_sum_iff_tendsto_nat_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄi, 0 ‚â§ f i) (r : ‚Ñù) :
  has_sum f r ‚Üî tendsto (Œª n : ‚Ñï, ‚àë i in finset.range n, f i) at_top (ùìù r) :=
begin
  lift f to ‚Ñï ‚Üí ‚Ñù‚â•0 using hf,
  simp only [has_sum, ‚Üê nnreal.coe_sum, nnreal.tendsto_coe'],
  exact exists_congr (Œª hr, nnreal.has_sum_iff_tendsto_nat)
end

lemma ennreal.of_real_tsum_of_nonneg {f : Œ± ‚Üí ‚Ñù} (hf_nonneg : ‚àÄ n, 0 ‚â§ f n) (hf : summable f) :
  ennreal.of_real (‚àë' n, f n) = ‚àë' n, ennreal.of_real (f n) :=
by simp_rw [ennreal.of_real, ennreal.tsum_coe_eq (nnreal.has_sum_of_real_of_nonneg hf_nonneg hf)]

lemma not_summable_iff_tendsto_nat_at_top_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n) :
  ¬¨ summable f ‚Üî tendsto (Œª n : ‚Ñï, ‚àë i in finset.range n, f i) at_top at_top :=
begin
  lift f to ‚Ñï ‚Üí ‚Ñù‚â•0 using hf,
  exact_mod_cast nnreal.not_summable_iff_tendsto_nat_at_top
end

lemma summable_iff_not_tendsto_nat_at_top_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n) :
  summable f ‚Üî ¬¨ tendsto (Œª n : ‚Ñï, ‚àë i in finset.range n, f i) at_top at_top :=
by rw [‚Üê not_iff_not, not_not, not_summable_iff_tendsto_nat_at_top_of_nonneg hf]

lemma summable_sigma_of_nonneg {Œ≤ : Œ† x : Œ±, Type*} {f : (Œ£ x, Œ≤ x) ‚Üí ‚Ñù} (hf : ‚àÄ x, 0 ‚â§ f x) :
  summable f ‚Üî (‚àÄ x, summable (Œª y, f ‚ü®x, y‚ü©)) ‚àß summable (Œª x, ‚àë' y, f ‚ü®x, y‚ü©) :=
by { lift f to (Œ£ x, Œ≤ x) ‚Üí ‚Ñù‚â•0 using hf, exact_mod_cast nnreal.summable_sigma }

lemma summable_of_sum_le {Œπ : Type*} {f : Œπ ‚Üí ‚Ñù} {c : ‚Ñù} (hf : 0 ‚â§ f)
  (h : ‚àÄ u : finset Œπ, ‚àë x in u, f x ‚â§ c) :
  summable f :=
‚ü® ‚®Ü u : finset Œπ, ‚àë x in u, f x,
  tendsto_at_top_csupr (finset.sum_mono_set_of_nonneg hf) ‚ü®c, Œª y ‚ü®u, hu‚ü©, hu ‚ñ∏ h u‚ü© ‚ü©

lemma summable_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù} {c : ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n)
  (h : ‚àÄ n, ‚àë i in finset.range n, f i ‚â§ c) : summable f :=
begin
  apply (summable_iff_not_tendsto_nat_at_top_of_nonneg hf).2 (Œª H, _),
  rcases exists_lt_of_tendsto_at_top H 0 c with ‚ü®n, -, hn‚ü©,
  exact lt_irrefl _ (hn.trans_le (h n)),
end

lemma tsum_le_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù} {c : ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n)
  (h : ‚àÄ n, ‚àë i in finset.range n, f i ‚â§ c) : ‚àë' n, f n ‚â§ c :=
le_of_tendsto' ((has_sum_iff_tendsto_nat_of_nonneg hf _).1
  (summable_of_sum_range_le hf h).has_sum) h

/-- If a sequence `f` with non-negative terms is dominated by a sequence `g` with summable
series and at least one term of `f` is strictly smaller than the corresponding term in `g`,
then the series of `f` is strictly smaller than the series of `g`. -/
lemma tsum_lt_tsum_of_nonneg {i : ‚Ñï} {f g : ‚Ñï ‚Üí ‚Ñù}
  (h0 : ‚àÄ (b : ‚Ñï), 0 ‚â§ f b) (h : ‚àÄ (b : ‚Ñï), f b ‚â§ g b) (hi : f i < g i) (hg : summable g) :
  ‚àë' n, f n < ‚àë' n, g n :=
tsum_lt_tsum h hi (summable_of_nonneg_of_le h0 h hg) hg

section
variables [emetric_space Œ≤]
open ennreal filter emetric

/-- In an emetric ball, the distance between points is everywhere finite -/
lemma edist_ne_top_of_mem_ball {a : Œ≤} {r : ‚Ñù‚â•0‚àû} (x y : ball a r) : edist x.1 y.1 ‚â† ‚ä§ :=
lt_top_iff_ne_top.1 $
calc edist x y ‚â§ edist a x + edist a y : edist_triangle_left x.1 y.1 a
  ... < r + r : by rw [edist_comm a x, edist_comm a y]; exact add_lt_add x.2 y.2
  ... ‚â§ ‚ä§ : le_top

/-- Each ball in an extended metric space gives us a metric space, as the edist
is everywhere finite. -/
def metric_space_emetric_ball (a : Œ≤) (r : ‚Ñù‚â•0‚àû) : metric_space (ball a r) :=
emetric_space.to_metric_space edist_ne_top_of_mem_ball

local attribute [instance] metric_space_emetric_ball

lemma nhds_eq_nhds_emetric_ball (a x : Œ≤) (r : ‚Ñù‚â•0‚àû) (h : x ‚àà ball a r) :
  ùìù x = map (coe : ball a r ‚Üí Œ≤) (ùìù ‚ü®x, h‚ü©) :=
(map_nhds_subtype_coe_eq _ $ is_open.mem_nhds emetric.is_open_ball h).symm
end

section
variable [pseudo_emetric_space Œ±]
open emetric

lemma tendsto_iff_edist_tendsto_0 {l : filter Œ≤} {f : Œ≤ ‚Üí Œ±} {y : Œ±} :
  tendsto f l (ùìù y) ‚Üî tendsto (Œª x, edist (f x) y) l (ùìù 0) :=
by simp only [emetric.nhds_basis_eball.tendsto_right_iff, emetric.mem_ball,
  @tendsto_order ‚Ñù‚â•0‚àû Œ≤ _ _, forall_prop_of_false ennreal.not_lt_zero, forall_const, true_and]

/-- Yet another metric characterization of Cauchy sequences on integers. This one is often the
most efficient. -/
lemma emetric.cauchy_seq_iff_le_tendsto_0 [nonempty Œ≤] [semilattice_sup Œ≤] {s : Œ≤ ‚Üí Œ±} :
  cauchy_seq s ‚Üî (‚àÉ (b: Œ≤ ‚Üí ‚Ñù‚â•0‚àû), (‚àÄ n m N : Œ≤, N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N)
                    ‚àß (tendsto b at_top (ùìù 0))) :=
‚ü®begin
  assume hs,
  rw emetric.cauchy_seq_iff at hs,
  /- `s` is Cauchy sequence. The sequence `b` will be constructed by taking
  the supremum of the distances between `s n` and `s m` for `n m ‚â• N`-/
  let b := ŒªN, Sup ((Œª(p : Œ≤ √ó Œ≤), edist (s p.1) (s p.2))''{p | p.1 ‚â• N ‚àß p.2 ‚â• N}),
  --Prove that it bounds the distances of points in the Cauchy sequence
  have C : ‚àÄ n m N, N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N,
  { refine Œªm n N hm hn, le_Sup _,
    use (prod.mk m n),
    simp only [and_true, eq_self_iff_true, set.mem_set_of_eq],
    exact ‚ü®hm, hn‚ü© },
  --Prove that it tends to `0`, by using the Cauchy property of `s`
  have D : tendsto b at_top (ùìù 0),
  { refine tendsto_order.2 ‚ü®Œªa ha, absurd ha (ennreal.not_lt_zero), ŒªŒµ Œµpos, _‚ü©,
    rcases exists_between Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©,
    rcases hs Œ¥ Œ¥pos with ‚ü®N, hN‚ü©,
    refine filter.mem_at_top_sets.2 ‚ü®N, Œªn hn, _‚ü©,
    have : b n ‚â§ Œ¥ := Sup_le begin
      simp only [and_imp, set.mem_image, set.mem_set_of_eq, exists_imp_distrib, prod.exists],
      intros d p q hp hq hd,
      rw ‚Üê hd,
      exact le_of_lt (hN p (le_trans hn hp) q (le_trans hn hq))
    end,
    simpa using lt_of_le_of_lt this Œ¥lt },
  -- Conclude
  exact ‚ü®b, ‚ü®C, D‚ü©‚ü©
end,
begin
  rintros ‚ü®b, ‚ü®b_bound, b_lim‚ü©‚ü©,
  /-b : ‚Ñï ‚Üí ‚Ñù, b_bound : ‚àÄ (n m N : ‚Ñï), N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N,
    b_lim : tendsto b at_top (ùìù 0)-/
  refine emetric.cauchy_seq_iff.2 (ŒªŒµ Œµpos, _),
  have : ‚àÄ·∂† n in at_top, b n < Œµ := (tendsto_order.1 b_lim ).2 _ Œµpos,
  rcases filter.mem_at_top_sets.1 this with ‚ü®N, hN‚ü©,
  exact ‚ü®N, Œª m hm n hn, calc
    edist (s m) (s n) ‚â§ b N : b_bound m n N hm hn
    ... < Œµ : (hN _ (le_refl N)) ‚ü©
end‚ü©

lemma continuous_of_le_add_edist {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (C : ‚Ñù‚â•0‚àû)
  (hC : C ‚â† ‚ä§) (h : ‚àÄx y, f x ‚â§ f y + C * edist x y) : continuous f :=
begin
  rcases eq_or_ne C 0 with (rfl|C0),
  { simp only [zero_mul, add_zero] at h,
    exact continuous_of_const (Œª x y, le_antisymm (h _ _) (h _ _)) },
  { refine continuous_iff_continuous_at.2 (Œª x, _),
    by_cases hx : f x = ‚àû,
    { have : f =·∂†[ùìù x] (Œª _, ‚àû),
      { filter_upwards [emetric.ball_mem_nhds x ennreal.coe_lt_top],
        refine Œª y (hy : edist y x < ‚ä§), _, rw edist_comm at hy,
        simpa [hx, hC, hy.ne] using h x y },
      exact this.continuous_at },
    { refine (ennreal.tendsto_nhds hx).2 (Œª Œµ (Œµ0 : 0 < Œµ), _),
      filter_upwards [emetric.closed_ball_mem_nhds x (ennreal.div_pos_iff.2 ‚ü®Œµ0.ne', hC‚ü©)],
      have hŒµC : C * (Œµ / C) = Œµ := ennreal.mul_div_cancel' C0 hC,
      refine Œª y (hy : edist y x ‚â§ Œµ / C), ‚ü®tsub_le_iff_right.2 _, _‚ü©,
      { rw edist_comm at hy,
        calc f x ‚â§ f y + C * edist x y : h x y
        ... ‚â§ f y + C * (Œµ / C) : add_le_add_left (mul_le_mul_left' hy C) (f y)
        ... = f y + Œµ : by rw hŒµC },
      { calc f y ‚â§ f x + C * edist y x : h y x
        ... ‚â§ f x + C * (Œµ / C) : add_le_add_left (mul_le_mul_left' hy C) (f x)
        ... = f x + Œµ : by rw hŒµC } } }
end

theorem continuous_edist : continuous (Œªp:Œ±√óŒ±, edist p.1 p.2) :=
begin
  apply continuous_of_le_add_edist 2 (by norm_num),
  rintros ‚ü®x, y‚ü© ‚ü®x', y'‚ü©,
  calc edist x y ‚â§ edist x x' + edist x' y' + edist y' y : edist_triangle4 _ _ _ _
    ... = edist x' y' + (edist x x' + edist y y') : by simp [edist_comm]; cc
    ... ‚â§ edist x' y' + (edist (x, y) (x', y') + edist (x, y) (x', y')) :
      add_le_add_left (add_le_add (le_max_left _ _) (le_max_right _ _)) _
    ... = edist x' y' + 2 * edist (x, y) (x', y') : by rw [‚Üê mul_two, mul_comm]
end

@[continuity] theorem continuous.edist [topological_space Œ≤] {f g : Œ≤ ‚Üí Œ±}
  (hf : continuous f) (hg : continuous g) : continuous (Œªb, edist (f b) (g b)) :=
continuous_edist.comp (hf.prod_mk hg : _)

theorem filter.tendsto.edist {f g : Œ≤ ‚Üí Œ±} {x : filter Œ≤} {a b : Œ±}
  (hf : tendsto f x (ùìù a)) (hg : tendsto g x (ùìù b)) :
  tendsto (Œªx, edist (f x) (g x)) x (ùìù (edist a b)) :=
(continuous_edist.tendsto (a, b)).comp (hf.prod_mk_nhds hg)

lemma cauchy_seq_of_edist_le_of_tsum_ne_top {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû)
  (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n) (hd : tsum d ‚â† ‚àû) :
  cauchy_seq f :=
begin
  lift d to (‚Ñï ‚Üí nnreal) using (Œª i, ennreal.ne_top_of_tsum_ne_top hd i),
  rw ennreal.tsum_coe_ne_top_iff_summable at hd,
  exact cauchy_seq_of_edist_le_of_summable d hf hd
end

lemma emetric.is_closed_ball {a : Œ±} {r : ‚Ñù‚â•0‚àû} : is_closed (closed_ball a r) :=
is_closed_le (continuous_id.edist continuous_const) continuous_const

@[simp] lemma emetric.diam_closure (s : set Œ±) : diam (closure s) = diam s :=
begin
  refine le_antisymm (diam_le $ Œª x hx y hy, _) (diam_mono subset_closure),
  have : edist x y ‚àà closure (Iic (diam s)),
    from  map_mem_closure2 (@continuous_edist Œ± _) hx hy (Œª _ _, edist_le_diam_of_mem),
  rwa closure_Iic at this
end

@[simp] lemma metric.diam_closure {Œ± : Type*} [pseudo_metric_space Œ±] (s : set Œ±) :
  metric.diam (closure s) = diam s :=
by simp only [metric.diam, emetric.diam_closure]

lemma is_closed_set_of_lipschitz_on_with {Œ± Œ≤} [pseudo_emetric_space Œ±] [pseudo_emetric_space Œ≤]
  (K : ‚Ñù‚â•0) (s : set Œ±) :
  is_closed {f : Œ± ‚Üí Œ≤ | lipschitz_on_with K f s} :=
begin
  simp only [lipschitz_on_with, set_of_forall],
  refine is_closed_bInter (Œª x hx, is_closed_bInter $ Œª y hy, is_closed_le _ _),
  exacts [continuous.edist (continuous_apply x) (continuous_apply y), continuous_const]
end

lemma is_closed_set_of_lipschitz_with {Œ± Œ≤} [pseudo_emetric_space Œ±] [pseudo_emetric_space Œ≤]
  (K : ‚Ñù‚â•0) :
  is_closed {f : Œ± ‚Üí Œ≤ | lipschitz_with K f} :=
by simp only [‚Üê lipschitz_on_univ, is_closed_set_of_lipschitz_on_with]

namespace real

/-- For a bounded set `s : set ‚Ñù`, its `emetric.diam` is equal to `Sup s - Inf s` reinterpreted as
`‚Ñù‚â•0‚àû`. -/
lemma ediam_eq {s : set ‚Ñù} (h : bounded s) :
  emetric.diam s = ennreal.of_real (Sup s - Inf s) :=
begin
  rcases eq_empty_or_nonempty s with rfl|hne, { simp },
  refine le_antisymm (metric.ediam_le_of_forall_dist_le $ Œª x hx y hy, _) _,
  { have := real.subset_Icc_Inf_Sup_of_bounded h,
    exact real.dist_le_of_mem_Icc (this hx) (this hy) },
  { apply ennreal.of_real_le_of_le_to_real,
    rw [‚Üê metric.diam, ‚Üê metric.diam_closure],
    have h' := real.bounded_iff_bdd_below_bdd_above.1 h,
    calc Sup s - Inf s ‚â§ dist (Sup s) (Inf s) : le_abs_self _
                   ... ‚â§ diam (closure s)     :
      dist_le_diam_of_mem h.closure (cSup_mem_closure hne h'.2) (cInf_mem_closure hne h'.1) }
end

/-- For a bounded set `s : set ‚Ñù`, its `metric.diam` is equal to `Sup s - Inf s`. -/
lemma diam_eq {s : set ‚Ñù} (h : bounded s) : metric.diam s = Sup s - Inf s :=
begin
  rw [metric.diam, real.ediam_eq h, ennreal.to_real_of_real],
  rw real.bounded_iff_bdd_below_bdd_above at h,
  exact sub_nonneg.2 (real.Inf_le_Sup s h.1 h.2)
end

@[simp] lemma ediam_Ioo (a b : ‚Ñù) :
  emetric.diam (Ioo a b) = ennreal.of_real (b - a) :=
begin
  rcases le_or_lt b a with h|h,
  { simp [h] },
  { rw [real.ediam_eq (bounded_Ioo _ _), cSup_Ioo h, cInf_Ioo h] },
end

@[simp] lemma ediam_Icc (a b : ‚Ñù) :
  emetric.diam (Icc a b) = ennreal.of_real (b - a) :=
begin
  rcases le_or_lt a b with h|h,
  { rw [real.ediam_eq (bounded_Icc _ _), cSup_Icc h, cInf_Icc h] },
  { simp [h, h.le] }
end

@[simp] lemma ediam_Ico (a b : ‚Ñù) :
  emetric.diam (Ico a b) = ennreal.of_real (b - a) :=
le_antisymm (ediam_Icc a b ‚ñ∏ diam_mono Ico_subset_Icc_self)
  (ediam_Ioo a b ‚ñ∏ diam_mono Ioo_subset_Ico_self)

@[simp] lemma ediam_Ioc (a b : ‚Ñù) :
  emetric.diam (Ioc a b) = ennreal.of_real (b - a) :=
le_antisymm (ediam_Icc a b ‚ñ∏ diam_mono Ioc_subset_Icc_self)
  (ediam_Ioo a b ‚ñ∏ diam_mono Ioo_subset_Ioc_self)

end real

/-- If `edist (f n) (f (n+1))` is bounded above by a function `d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû`,
then the distance from `f n` to the limit is bounded by `‚àë'_{k=n}^‚àû d k`. -/
lemma edist_le_tsum_of_edist_le_of_tendsto {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû)
  (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n)
  {a : Œ±} (ha : tendsto f at_top (ùìù a)) (n : ‚Ñï) :
  edist (f n) a ‚â§ ‚àë' m, d (n + m) :=
begin
  refine le_of_tendsto (tendsto_const_nhds.edist ha)
    (mem_at_top_sets.2 ‚ü®n, Œª m hnm, _‚ü©),
  refine le_trans (edist_le_Ico_sum_of_edist_le hnm (Œª k _ _, hf k)) _,
  rw [finset.sum_Ico_eq_sum_range],
  exact sum_le_tsum _ (Œª _ _, zero_le _) ennreal.summable
end

/-- If `edist (f n) (f (n+1))` is bounded above by a function `d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû`,
then the distance from `f 0` to the limit is bounded by `‚àë'_{k=0}^‚àû d k`. -/
lemma edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû)
  (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n)
  {a : Œ±} (ha : tendsto f at_top (ùìù a)) :
  edist (f 0) a ‚â§ ‚àë' m, d m :=
by simpa using edist_le_tsum_of_edist_le_of_tendsto d hf ha 0

end --section
