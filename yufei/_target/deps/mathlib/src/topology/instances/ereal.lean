/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import data.real.ereal
import topology.algebra.order.monotone_continuity
import topology.instances.ennreal

/-!
# Topological structure on `ereal`

We endow `ereal` with the order topology, and prove basic properties of this topology.

## Main results

* `coe : ‚Ñù ‚Üí ereal` is an open embedding
* `coe : ‚Ñù‚â•0‚àû ‚Üí ereal` is an embedding
* The addition on `ereal` is continuous except at `(‚ä•, ‚ä§)` and at `(‚ä§, ‚ä•)`.
* Negation is a homeomorphism on `ereal`.

## Implementation

Most proofs are adapted from the corresponding proofs on `‚Ñù‚â•0‚àû`.
-/

noncomputable theory

open classical set filter metric topological_space
open_locale classical topological_space ennreal nnreal big_operators filter

variables {Œ± : Type*} [topological_space Œ±]

namespace ereal

instance : topological_space ereal := preorder.topology ereal

instance : order_topology ereal := ‚ü®rfl‚ü©

instance : t2_space ereal := by apply_instance

instance : second_countable_topology ereal :=
‚ü®begin
  refine ‚ü®‚ãÉ (q : ‚Ñö), {{a : ereal | a < (q : ‚Ñù)}, {a : ereal | ((q : ‚Ñù) : ereal) < a}},
    countable_Union (Œª a, (countable_singleton _).insert _), _‚ü©,
  refine le_antisymm
    (le_generate_from $ by simp [or_imp_distrib, is_open_lt', is_open_gt'] {contextual := tt}) _,
  apply le_generate_from (Œª s h, _),
  rcases h with ‚ü®a, hs | hs‚ü©;
  [ rw show s = ‚ãÉq‚àà{q:‚Ñö | a < (q : ‚Ñù)}, {b | ((q : ‚Ñù) : ereal) < b},
      by { ext x, simpa only [hs, exists_prop, mem_Union] using lt_iff_exists_rat_btwn },
    rw show s = ‚ãÉq‚àà{q:‚Ñö | ((q : ‚Ñù) : ereal) < a}, {b | b < ((q : ‚Ñù) : ereal)},
      by { ext x, simpa only [hs, and_comm, exists_prop, mem_Union] using lt_iff_exists_rat_btwn }];
  { apply is_open_Union, intro q,
    apply is_open_Union, intro hq,
    apply generate_open.basic,
    exact mem_Union.2 ‚ü®q, by simp‚ü© },
end‚ü©


/-! ### Real coercion -/

lemma embedding_coe : embedding (coe : ‚Ñù ‚Üí ereal) :=
‚ü®‚ü®begin
  refine le_antisymm _ _,
  { rw [@order_topology.topology_eq_generate_intervals ereal _,
      ‚Üê coinduced_le_iff_le_induced],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    show is_open {b : ‚Ñù | a < ‚Üëb},
    { induction a using ereal.rec,
      { simp only [is_open_univ, bot_lt_coe, set_of_true] },
      { simp only [ereal.coe_lt_coe_iff], exact is_open_Ioi },
      { simp only [set_of_false, is_open_empty, not_top_lt] } },
    show is_open {b : ‚Ñù | ‚Üëb < a},
    { induction a using ereal.rec,
      { simp only [not_lt_bot, set_of_false, is_open_empty] },
      { simp only [ereal.coe_lt_coe_iff], exact is_open_Iio },
      { simp only [is_open_univ, coe_lt_top, set_of_true] } } },
  { rw [@order_topology.topology_eq_generate_intervals ‚Ñù _],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    exact ‚ü®Ioi a, is_open_Ioi, by simp [Ioi]‚ü©,
    exact ‚ü®Iio a, is_open_Iio, by simp [Iio]‚ü© }
  end‚ü©,
  assume a b, by simp only [imp_self, ereal.coe_eq_coe_iff]‚ü©

lemma open_embedding_coe : open_embedding (coe : ‚Ñù ‚Üí ereal) :=
‚ü®embedding_coe,
begin
  convert @is_open_Ioo ereal _ _ _ ‚ä• ‚ä§,
  ext x,
  induction x using ereal.rec,
  { simp only [left_mem_Ioo, mem_range, coe_ne_bot, exists_false, not_false_iff] },
  { simp only [mem_range_self, mem_Ioo, bot_lt_coe, coe_lt_top, and_self] },
  { simp only [mem_range, right_mem_Ioo, exists_false, coe_ne_top] }
end‚ü©

@[norm_cast] lemma tendsto_coe {Œ± : Type*} {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù} {a : ‚Ñù} :
  tendsto (Œª a, (m a : ereal)) f (ùìù ‚Üëa) ‚Üî tendsto m f (ùìù a) :=
embedding_coe.tendsto_nhds_iff.symm

lemma _root_.continuous_coe_real_ereal : continuous (coe : ‚Ñù ‚Üí ereal) :=
embedding_coe.continuous

lemma continuous_coe_iff {f : Œ± ‚Üí ‚Ñù} :
  continuous (Œªa, (f a : ereal)) ‚Üî continuous f :=
embedding_coe.continuous_iff.symm

lemma nhds_coe {r : ‚Ñù} : ùìù (r : ereal) = (ùìù r).map coe :=
(open_embedding_coe.map_nhds_eq r).symm

lemma nhds_coe_coe {r p : ‚Ñù} :
  ùìù ((r : ereal), (p : ereal)) = (ùìù (r, p)).map (Œªp:‚Ñù √ó ‚Ñù, (p.1, p.2)) :=
((open_embedding_coe.prod open_embedding_coe).map_nhds_eq (r, p)).symm

lemma tendsto_to_real {a : ereal} (ha : a ‚â† ‚ä§) (h'a : a ‚â† ‚ä•) :
  tendsto ereal.to_real (ùìù a) (ùìù a.to_real) :=
begin
  lift a to ‚Ñù using and.intro ha h'a,
  rw [nhds_coe, tendsto_map'_iff],
  exact tendsto_id
end

lemma continuous_on_to_real : continuous_on ereal.to_real ({‚ä•, ‚ä§} : set ereal).compl :=
Œª a ha, continuous_at.continuous_within_at (tendsto_to_real
  (by { simp [not_or_distrib] at ha, exact ha.2 }) (by { simp [not_or_distrib] at ha, exact ha.1 }))

/-- The set of finite `ereal` numbers is homeomorphic to `‚Ñù`. -/
def ne_bot_top_homeomorph_real : ({‚ä•, ‚ä§} : set ereal).compl ‚âÉ‚Çú ‚Ñù :=
{ continuous_to_fun := continuous_on_iff_continuous_restrict.1 continuous_on_to_real,
  continuous_inv_fun := continuous_subtype_mk _ continuous_coe_real_ereal,
  .. ne_top_bot_equiv_real }


/-! ### ennreal coercion -/

lemma embedding_coe_ennreal : embedding (coe : ‚Ñù‚â•0‚àû ‚Üí ereal) :=
‚ü®‚ü®begin
  refine le_antisymm _ _,
  { rw [@order_topology.topology_eq_generate_intervals ereal _,
      ‚Üê coinduced_le_iff_le_induced],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    show is_open {b : ‚Ñù‚â•0‚àû | a < ‚Üëb},
    { induction a using ereal.rec with x,
      { simp only [is_open_univ, bot_lt_coe_ennreal, set_of_true] },
      { rcases le_or_lt 0 x with h|h,
        { have : (x : ereal) = ((id ‚ü®x, h‚ü© : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) := rfl,
          rw this,
          simp only [id.def, coe_ennreal_lt_coe_ennreal_iff],
          exact is_open_Ioi, },
        { have : ‚àÄ (y : ‚Ñù‚â•0‚àû), (x : ereal) < y := Œª y,
            (ereal.coe_lt_coe_iff.2 h).trans_le (coe_ennreal_nonneg _),
          simp only [this, is_open_univ, set_of_true] } },
      { simp only [set_of_false, is_open_empty, not_top_lt] } },
    show is_open {b : ‚Ñù‚â•0‚àû | ‚Üëb < a},
    { induction a using ereal.rec with x,
      { simp only [not_lt_bot, set_of_false, is_open_empty] },
      { rcases le_or_lt 0 x with h|h,
        { have : (x : ereal) = ((id ‚ü®x, h‚ü© : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) := rfl,
          rw this,
          simp only [id.def, coe_ennreal_lt_coe_ennreal_iff],
          exact is_open_Iio, },
        { convert is_open_empty,
          apply eq_empty_iff_forall_not_mem.2 (Œª y hy, lt_irrefl (x : ereal) _),
          exact ((ereal.coe_lt_coe_iff.2 h).trans_le (coe_ennreal_nonneg y)).trans hy } },
      { simp only [‚Üê coe_ennreal_top, coe_ennreal_lt_coe_ennreal_iff],
        exact is_open_Iio } } },
  { rw [@order_topology.topology_eq_generate_intervals ‚Ñù‚â•0‚àû _],
    refine le_generate_from (assume s ha, _),
    rcases ha with ‚ü®a, rfl | rfl‚ü©,
    exact ‚ü®Ioi a, is_open_Ioi, by simp [Ioi]‚ü©,
    exact ‚ü®Iio a, is_open_Iio, by simp [Iio]‚ü© }
  end‚ü©,
  assume a b, by simp only [imp_self, coe_ennreal_eq_coe_ennreal_iff]‚ü©

@[norm_cast] lemma tendsto_coe_ennreal {Œ± : Type*} {f : filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} :
  tendsto (Œª a, (m a : ereal)) f (ùìù ‚Üëa) ‚Üî tendsto m f (ùìù a) :=
embedding_coe_ennreal.tendsto_nhds_iff.symm

lemma _root_.continuous_coe_ennreal_ereal : continuous (coe : ‚Ñù‚â•0‚àû ‚Üí ereal) :=
embedding_coe_ennreal.continuous

lemma continuous_coe_ennreal_iff {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
  continuous (Œªa, (f a : ereal)) ‚Üî continuous f :=
embedding_coe_ennreal.continuous_iff.symm


/-! ### Neighborhoods of infinity -/

lemma nhds_top : ùìù (‚ä§ : ereal) = ‚®Ö a ‚â† ‚ä§, ùìü (Ioi a) :=
nhds_top_order.trans $ by simp [lt_top_iff_ne_top, Ioi]

lemma nhds_top' : ùìù (‚ä§ : ereal) = ‚®Ö a : ‚Ñù, ùìü (Ioi a) :=
begin
  rw [nhds_top],
  apply le_antisymm,
  { exact infi_le_infi2 (Œª x, ‚ü®x, by simp‚ü©) },
  { refine le_infi (Œª r, le_infi (Œª hr, _)),
    induction r using ereal.rec,
    { exact (infi_le _ 0).trans (by simp) },
    { exact infi_le _ _ },
    { simpa using hr, } }
end

lemma mem_nhds_top_iff {s : set ereal} :
  s ‚àà ùìù (‚ä§ : ereal) ‚Üî ‚àÉ (y : ‚Ñù), Ioi (y : ereal) ‚äÜ s :=
begin
  rw [nhds_top', mem_infi_of_directed],
  { refl },
  exact Œª x y, ‚ü®max x y, by simp [le_refl], by simp [le_refl]‚ü©,
end

lemma tendsto_nhds_top_iff_real {Œ± : Type*} {m : Œ± ‚Üí ereal} {f : filter Œ±} :
  tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ x : ‚Ñù, ‚àÄ·∂† a in f, ‚Üëx < m a :=
by simp only [nhds_top', mem_Ioi, tendsto_infi, tendsto_principal]

lemma nhds_bot : ùìù (‚ä• : ereal) = ‚®Ö a ‚â† ‚ä•, ùìü (Iio a) :=
nhds_bot_order.trans $ by simp [bot_lt_iff_ne_bot]

lemma nhds_bot' : ùìù (‚ä• : ereal) = ‚®Ö a : ‚Ñù, ùìü (Iio a) :=
begin
  rw [nhds_bot],
  apply le_antisymm,
  { exact infi_le_infi2 (Œª x, ‚ü®x, by simp‚ü©) },
  { refine le_infi (Œª r, le_infi (Œª hr, _)),
    induction r using ereal.rec,
    { simpa using hr },
    { exact infi_le _ _ },
    { exact (infi_le _ 0).trans (by simp) } }
end

lemma mem_nhds_bot_iff {s : set ereal} :
  s ‚àà ùìù (‚ä• : ereal) ‚Üî ‚àÉ (y : ‚Ñù), Iio (y : ereal) ‚äÜ s :=
begin
  rw [nhds_bot', mem_infi_of_directed],
  { refl },
  exact Œª x y, ‚ü®min x y, by simp [le_refl], by simp [le_refl]‚ü©,
end

lemma tendsto_nhds_bot_iff_real {Œ± : Type*} {m : Œ± ‚Üí ereal} {f : filter Œ±} :
  tendsto m f (ùìù ‚ä•) ‚Üî ‚àÄ x : ‚Ñù, ‚àÄ·∂† a in f, m a < x :=
by simp only [nhds_bot', mem_Iio, tendsto_infi, tendsto_principal]


/-! ### Continuity of addition -/

lemma continuous_at_add_coe_coe (a b :‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (a, b) :=
by simp only [continuous_at, nhds_coe_coe, ‚Üê coe_add, tendsto_map'_iff, (‚àò),
    tendsto_coe, tendsto_add]

lemma continuous_at_add_top_coe (a : ‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (‚ä§, a) :=
begin
  simp only [continuous_at, tendsto_nhds_top_iff_real, top_add, nhds_prod_eq],
  assume r,
  rw eventually_prod_iff,
  refine ‚ü®Œª z, ((r - (a - 1): ‚Ñù) : ereal) < z, Ioi_mem_nhds (coe_lt_top _),
          Œª z, ((a - 1 : ‚Ñù) : ereal) < z, Ioi_mem_nhds (by simp [zero_lt_one]),
          Œª x hx y hy, _‚ü©,
  dsimp,
  convert add_lt_add hx hy,
  simp,
end

lemma continuous_at_add_coe_top (a : ‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (a, ‚ä§) :=
begin
  change continuous_at ((Œª (p : ereal √ó ereal), p.2 + p.1) ‚àò prod.swap) (a, ‚ä§),
  apply continuous_at.comp _ continuous_swap.continuous_at,
  simp_rw add_comm,
  exact continuous_at_add_top_coe a
end

lemma continuous_at_add_top_top :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (‚ä§, ‚ä§) :=
begin
  simp only [continuous_at, tendsto_nhds_top_iff_real, top_add, nhds_prod_eq],
  assume r,
  rw eventually_prod_iff,
  refine ‚ü®Œª z, (r : ereal) < z, Ioi_mem_nhds (coe_lt_top _),
          Œª z, ((0 : ‚Ñù) : ereal) < z, Ioi_mem_nhds (by simp [zero_lt_one]),
          Œª x hx y hy, _‚ü©,
  dsimp,
  convert add_lt_add hx hy,
  simp,
end

lemma continuous_at_add_bot_coe (a : ‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (‚ä•, a) :=
begin
  simp only [continuous_at, tendsto_nhds_bot_iff_real, nhds_prod_eq, bot_add_coe],
  assume r,
  rw eventually_prod_iff,
  refine ‚ü®Œª z, z < ((r - (a + 1): ‚Ñù) : ereal), Iio_mem_nhds (bot_lt_coe _),
          Œª z, z < ((a + 1 : ‚Ñù) : ereal), Iio_mem_nhds (by simp [-coe_add, zero_lt_one]),
          Œª x hx y hy, _‚ü©,
  dsimp,
  convert add_lt_add hx hy,
  dsimp,
  ring,
end

lemma continuous_at_add_coe_bot (a : ‚Ñù) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (a, ‚ä•) :=
begin
  change continuous_at ((Œª (p : ereal √ó ereal), p.2 + p.1) ‚àò prod.swap) (a, ‚ä•),
  apply continuous_at.comp _ continuous_swap.continuous_at,
  simp_rw add_comm,
  exact continuous_at_add_bot_coe a
end

lemma continuous_at_add_bot_bot :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) (‚ä•, ‚ä•) :=
begin
  simp only [continuous_at, tendsto_nhds_bot_iff_real, nhds_prod_eq, bot_add_bot],
  assume r,
  rw eventually_prod_iff,
  refine ‚ü®Œª z, z < r, Iio_mem_nhds (bot_lt_coe _),
          Œª z, z < 0, Iio_mem_nhds (bot_lt_coe _),
          Œª x hx y hy, _‚ü©,
  dsimp,
  convert add_lt_add hx hy,
  simp
end

/-- The addition on `ereal` is continuous except where it doesn't make sense (i.e., at `(‚ä•, ‚ä§)`
and at `(‚ä§, ‚ä•)`). -/
lemma continuous_at_add {p : ereal √ó ereal} (h : p.1 ‚â† ‚ä§ ‚à® p.2 ‚â† ‚ä•) (h' : p.1 ‚â† ‚ä• ‚à® p.2 ‚â† ‚ä§) :
  continuous_at (Œª (p : ereal √ó ereal), p.1 + p.2) p :=
begin
  rcases p with ‚ü®x, y‚ü©,
  induction x using ereal.rec; induction y using ereal.rec,
  { exact continuous_at_add_bot_bot },
  { exact continuous_at_add_bot_coe _ },
  { simpa using h' },
  { exact continuous_at_add_coe_bot _ },
  { exact continuous_at_add_coe_coe _ _ },
  { exact continuous_at_add_coe_top _ },
  { simpa using h },
  { exact continuous_at_add_top_coe _ },
  { exact continuous_at_add_top_top },
end

/-! ### Negation-/

/-- Negation on `ereal` as a homeomorphism -/
def neg_homeo : ereal ‚âÉ‚Çú ereal :=
neg_order_iso.to_homeomorph

lemma continuous_neg : continuous (Œª (x : ereal), -x) :=
neg_homeo.continuous

end ereal
