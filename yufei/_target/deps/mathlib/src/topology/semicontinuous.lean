/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import algebra.indicator_function
import topology.algebra.group
import topology.continuous_on
import topology.instances.ennreal

/-!
# Semicontinuous maps

A function `f` from a topological space `Œ±` to an ordered space `Œ≤` is lower semicontinuous at a
point `x` if, for any `y < f x`, for any `x'` close enough to `x`, one has `f x' > y`. In other
words, `f` can jump up, but it can not jump down.

Upper semicontinuous functions are defined similarly.

This file introduces these notions, and a basic API around them mimicking the API for continuous
functions.

## Main definitions and results

We introduce 4 definitions related to lower semicontinuity:
* `lower_semicontinuous_within_at f s x`
* `lower_semicontinuous_at f x`
* `lower_semicontinuous_on f s`
* `lower_semicontinuous f`

We build a basic API using dot notation around these notions, and we prove that
* constant functions are lower semicontinuous;
* `indicator s (Œª _, y)` is lower semicontinuous when `s` is open and `0 ‚â§ y`, or when `s` is closed
  and `y ‚â§ 0`;
* continuous functions are lower semicontinuous;
* composition with a continuous monotone functions maps lower semicontinuous functions to lower
  semicontinuous functions. If the function is anti-monotone, it instead maps lower semicontinuous
  functions to upper semicontinuous functions;
* a sum of two (or finitely many) lower semicontinuous functions is lower semicontinuous;
* a supremum of a family of lower semicontinuous functions is lower semicontinuous;
* An infinite sum of `‚Ñù‚â•0‚àû`-valued lower semicontinuous functions is lower semicontinuous.

Similar results are stated and proved for upper semicontinuity.

We also prove that a function is continuous if and only if it is both lower and upper
semicontinuous.

## Implementation details

All the nontrivial results for upper semicontinuous functions are deduced from the corresponding
ones for lower semicontinuous functions using `order_dual`.

-/

open_locale topological_space big_operators ennreal
open set

variables {Œ± : Type*} [topological_space Œ±] {Œ≤ : Type*} [preorder Œ≤]
{f g : Œ± ‚Üí Œ≤} {x : Œ±} {s t : set Œ±} {y z : Œ≤}

/-! ### Main definitions -/

/-- A real function `f` is lower semicontinuous at `x` within a set `s` if, for any `Œµ > 0`, for all
`x'` close enough to `x` in  `s`, then `f x'` is at least `f x - Œµ`. We formulate this in a general
preordered space, using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def lower_semicontinuous_within_at (f : Œ± ‚Üí Œ≤) (s : set Œ±) (x : Œ±) :=
‚àÄ y < f x, ‚àÄ·∂† x' in ùìù[s] x, y < f x'

/-- A real function `f` is lower semicontinuous on a set `s` if, for any `Œµ > 0`, for any `x ‚àà s`,
for all `x'` close enough to `x` in `s`, then `f x'` is at least `f x - Œµ`. We formulate this in
a general preordered space, using an arbitrary `y < f x` instead of `f x - Œµ`.-/
def lower_semicontinuous_on (f : Œ± ‚Üí Œ≤) (s : set Œ±) :=
‚àÄ x ‚àà s, lower_semicontinuous_within_at f s x

/-- A real function `f` is lower semicontinuous at `x` if, for any `Œµ > 0`, for all `x'` close
enough to `x`, then `f x'` is at least `f x - Œµ`. We formulate this in a general preordered space,
using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def lower_semicontinuous_at (f : Œ± ‚Üí Œ≤) (x : Œ±) :=
‚àÄ y < f x, ‚àÄ·∂† x' in ùìù x, y < f x'

/-- A real function `f` is lower semicontinuous if, for any `Œµ > 0`, for any `x`, for all `x'` close
enough to `x`, then `f x'` is at least `f x - Œµ`. We formulate this in a general preordered space,
using an arbitrary `y < f x` instead of `f x - Œµ`. -/
def lower_semicontinuous (f : Œ± ‚Üí Œ≤) :=
‚àÄ x, lower_semicontinuous_at f x

/-- A real function `f` is upper semicontinuous at `x` within a set `s` if, for any `Œµ > 0`, for all
`x'` close enough to `x` in  `s`, then `f x'` is at most `f x + Œµ`. We formulate this in a general
preordered space, using an arbitrary `y > f x` instead of `f x + Œµ`. -/
def upper_semicontinuous_within_at (f : Œ± ‚Üí Œ≤) (s : set Œ±) (x : Œ±) :=
‚àÄ y, f x < y ‚Üí ‚àÄ·∂† x' in ùìù[s] x, f x' < y

/-- A real function `f` is upper semicontinuous on a set `s` if, for any `Œµ > 0`, for any `x ‚àà s`,
for all `x'` close enough to `x` in `s`, then `f x'` is at most `f x + Œµ`. We formulate this in a
general preordered space, using an arbitrary `y > f x` instead of `f x + Œµ`.-/
def upper_semicontinuous_on (f : Œ± ‚Üí Œ≤) (s : set Œ±) :=
‚àÄ x ‚àà s, upper_semicontinuous_within_at f s x

/-- A real function `f` is upper semicontinuous at `x` if, for any `Œµ > 0`, for all `x'` close
enough to `x`, then `f x'` is at most `f x + Œµ`. We formulate this in a general preordered space,
using an arbitrary `y > f x` instead of `f x + Œµ`. -/
def upper_semicontinuous_at (f : Œ± ‚Üí Œ≤) (x : Œ±) :=
‚àÄ y, f x < y ‚Üí ‚àÄ·∂† x' in ùìù x, f x' < y

/-- A real function `f` is upper semicontinuous if, for any `Œµ > 0`, for any `x`, for all `x'`
close enough to `x`, then `f x'` is at most `f x + Œµ`. We formulate this in a general preordered
space, using an arbitrary `y > f x` instead of `f x + Œµ`.-/
def upper_semicontinuous (f : Œ± ‚Üí Œ≤) :=
‚àÄ x, upper_semicontinuous_at f x

/-!
### Lower semicontinuous functions
-/

/-! #### Basic dot notation interface for lower semicontinuity -/

lemma lower_semicontinuous_within_at.mono (h : lower_semicontinuous_within_at f s x)
  (hst : t ‚äÜ s) : lower_semicontinuous_within_at f t x :=
Œª y hy, filter.eventually.filter_mono (nhds_within_mono _ hst) (h y hy)

lemma lower_semicontinuous_within_at_univ_iff :
  lower_semicontinuous_within_at f univ x ‚Üî lower_semicontinuous_at f x :=
by simp [lower_semicontinuous_within_at, lower_semicontinuous_at, nhds_within_univ]

lemma lower_semicontinuous_at.lower_semicontinuous_within_at
  (s : set Œ±) (h : lower_semicontinuous_at f x) : lower_semicontinuous_within_at f s x :=
Œª y hy, filter.eventually.filter_mono nhds_within_le_nhds (h y hy)

lemma lower_semicontinuous_on.lower_semicontinuous_within_at
  (h : lower_semicontinuous_on f s) (hx : x ‚àà s) :
  lower_semicontinuous_within_at f s x :=
h x hx

lemma lower_semicontinuous_on.mono (h : lower_semicontinuous_on f s) (hst : t ‚äÜ s) :
  lower_semicontinuous_on f t :=
Œª x hx, (h x (hst hx)).mono hst

lemma lower_semicontinuous_on_univ_iff :
  lower_semicontinuous_on f univ ‚Üî lower_semicontinuous f :=
by simp [lower_semicontinuous_on, lower_semicontinuous, lower_semicontinuous_within_at_univ_iff]

lemma lower_semicontinuous.lower_semicontinuous_at
  (h : lower_semicontinuous f) (x : Œ±) : lower_semicontinuous_at f x :=
h x

lemma lower_semicontinuous.lower_semicontinuous_within_at
  (h : lower_semicontinuous f) (s : set Œ±) (x : Œ±) : lower_semicontinuous_within_at f s x :=
(h x).lower_semicontinuous_within_at s

lemma lower_semicontinuous.lower_semicontinuous_on
  (h : lower_semicontinuous f) (s : set Œ±) : lower_semicontinuous_on f s :=
Œª x hx, h.lower_semicontinuous_within_at s x

/-! #### Constants -/

lemma lower_semicontinuous_within_at_const :
  lower_semicontinuous_within_at (Œª x, z) s x :=
Œª y hy, filter.eventually_of_forall (Œª x, hy)

lemma lower_semicontinuous_at_const :
  lower_semicontinuous_at (Œª x, z) x :=
Œª y hy, filter.eventually_of_forall (Œª x, hy)

lemma lower_semicontinuous_on_const :
  lower_semicontinuous_on (Œª x, z) s :=
Œª x hx, lower_semicontinuous_within_at_const

lemma lower_semicontinuous_const :
  lower_semicontinuous (Œª (x : Œ±), z) :=
Œª x, lower_semicontinuous_at_const

/-! #### Indicators -/

section
variables [has_zero Œ≤]

lemma is_open.lower_semicontinuous_indicator (hs : is_open s) (hy : 0 ‚â§ y) :
  lower_semicontinuous (indicator s (Œª x, y)) :=
begin
  assume x z hz,
  by_cases h : x ‚àà s; simp [h] at hz,
  { filter_upwards [hs.mem_nhds h],
    simp [hz] { contextual := tt} },
  { apply filter.eventually_of_forall (Œª x', _),
    by_cases h' : x' ‚àà s;
    simp [h', hz.trans_le hy, hz] }
end

lemma is_open.lower_semicontinuous_on_indicator (hs : is_open s) (hy : 0 ‚â§ y) :
  lower_semicontinuous_on (indicator s (Œª x, y)) t :=
(hs.lower_semicontinuous_indicator hy).lower_semicontinuous_on t

lemma is_open.lower_semicontinuous_at_indicator (hs : is_open s) (hy : 0 ‚â§ y) :
  lower_semicontinuous_at (indicator s (Œª x, y)) x :=
(hs.lower_semicontinuous_indicator hy).lower_semicontinuous_at x

lemma is_open.lower_semicontinuous_within_at_indicator (hs : is_open s) (hy : 0 ‚â§ y) :
  lower_semicontinuous_within_at (indicator s (Œª x, y)) t x :=
(hs.lower_semicontinuous_indicator hy).lower_semicontinuous_within_at t x

lemma is_closed.lower_semicontinuous_indicator (hs : is_closed s) (hy : y ‚â§ 0) :
  lower_semicontinuous (indicator s (Œª x, y)) :=
begin
  assume x z hz,
  by_cases h : x ‚àà s; simp [h] at hz,
  { apply filter.eventually_of_forall (Œª x', _),
    by_cases h' : x' ‚àà s;
    simp [h', hz, hz.trans_le hy], },
  { filter_upwards [hs.is_open_compl.mem_nhds h],
    simp [hz] { contextual := tt } }
end

lemma is_closed.lower_semicontinuous_on_indicator (hs : is_closed s) (hy : y ‚â§ 0) :
  lower_semicontinuous_on (indicator s (Œª x, y)) t :=
(hs.lower_semicontinuous_indicator hy).lower_semicontinuous_on t

lemma is_closed.lower_semicontinuous_at_indicator (hs : is_closed s) (hy : y ‚â§ 0) :
  lower_semicontinuous_at (indicator s (Œª x, y)) x :=
(hs.lower_semicontinuous_indicator hy).lower_semicontinuous_at x

lemma is_closed.lower_semicontinuous_within_at_indicator (hs : is_closed s) (hy : y ‚â§ 0) :
  lower_semicontinuous_within_at (indicator s (Œª x, y)) t x :=
(hs.lower_semicontinuous_indicator hy).lower_semicontinuous_within_at t x

end

/-! #### Relationship with continuity -/

theorem lower_semicontinuous_iff_is_open :
  lower_semicontinuous f ‚Üî ‚àÄ y, is_open (f ‚Åª¬π' (Ioi y)) :=
‚ü®Œª H y, is_open_iff_mem_nhds.2 (Œª x hx, H x y hx), Œª H x y y_lt, is_open.mem_nhds (H y) y_lt‚ü©

lemma lower_semicontinuous.is_open_preimage (hf : lower_semicontinuous f) (y : Œ≤) :
  is_open (f ‚Åª¬π' (Ioi y)) :=
lower_semicontinuous_iff_is_open.1 hf y

section
variables {Œ≥ : Type*} [linear_order Œ≥] [topological_space Œ≥] [order_topology Œ≥]

lemma continuous_within_at.lower_semicontinuous_within_at {f : Œ± ‚Üí Œ≥}
  (h : continuous_within_at f s x) : lower_semicontinuous_within_at f s x :=
Œª y hy, h (Ioi_mem_nhds hy)

lemma continuous_at.lower_semicontinuous_at {f : Œ± ‚Üí Œ≥}
  (h : continuous_at f x) : lower_semicontinuous_at f x :=
Œª y hy, h (Ioi_mem_nhds hy)

lemma continuous_on.lower_semicontinuous_on {f : Œ± ‚Üí Œ≥}
  (h : continuous_on f s) : lower_semicontinuous_on f s :=
Œª x hx, (h x hx).lower_semicontinuous_within_at

lemma continuous.lower_semicontinuous {f : Œ± ‚Üí Œ≥}
  (h : continuous f) : lower_semicontinuous f :=
Œª x, h.continuous_at.lower_semicontinuous_at

end

/-! ### Composition -/

section
variables {Œ≥ : Type*} [linear_order Œ≥] [topological_space Œ≥] [order_topology Œ≥]
variables {Œ¥ : Type*} [linear_order Œ¥] [topological_space Œ¥] [order_topology Œ¥]

lemma continuous_at.comp_lower_semicontinuous_within_at
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : lower_semicontinuous_within_at f s x)
  (gmon : monotone g) : lower_semicontinuous_within_at (g ‚àò f) s x :=
begin
  assume y hy,
  by_cases h : ‚àÉ l, l < f x,
  { obtain ‚ü®z, zlt, hz‚ü© : ‚àÉ z < f x, Ioc z (f x) ‚äÜ g ‚Åª¬π' (Ioi y) :=
      exists_Ioc_subset_of_mem_nhds (hg (Ioi_mem_nhds hy)) h,
    filter_upwards [hf z zlt] with a ha,
    calc y < g (min (f x) (f a)) : hz (by simp [zlt, ha, le_refl])
    ... ‚â§ g (f a) : gmon (min_le_right _ _) },
  { simp only [not_exists, not_lt] at h,
    exact filter.eventually_of_forall (Œª a, hy.trans_le (gmon (h (f a)))) }
end

lemma continuous_at.comp_lower_semicontinuous_at
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : lower_semicontinuous_at f x)
  (gmon : monotone g) : lower_semicontinuous_at (g ‚àò f) x :=
begin
  simp only [‚Üê lower_semicontinuous_within_at_univ_iff] at hf ‚ä¢,
  exact hg.comp_lower_semicontinuous_within_at hf gmon
end

lemma continuous.comp_lower_semicontinuous_on
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : lower_semicontinuous_on f s)
  (gmon : monotone g) : lower_semicontinuous_on (g ‚àò f) s :=
Œª x hx, (hg.continuous_at).comp_lower_semicontinuous_within_at (hf x hx) gmon

lemma continuous.comp_lower_semicontinuous
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : lower_semicontinuous f)
  (gmon : monotone g) : lower_semicontinuous (g ‚àò f) :=
Œª x, (hg.continuous_at).comp_lower_semicontinuous_at (hf x) gmon

lemma continuous_at.comp_lower_semicontinuous_within_at_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : lower_semicontinuous_within_at f s x)
  (gmon : antitone g) : upper_semicontinuous_within_at (g ‚àò f) s x :=
@continuous_at.comp_lower_semicontinuous_within_at Œ± _ x s Œ≥ _ _ _ (order_dual Œ¥) _ _ _
  g f hg hf gmon

lemma continuous_at.comp_lower_semicontinuous_at_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : lower_semicontinuous_at f x)
  (gmon : antitone g) : upper_semicontinuous_at (g ‚àò f) x :=
@continuous_at.comp_lower_semicontinuous_at Œ± _ x Œ≥ _ _ _ (order_dual Œ¥) _ _ _ g f hg hf gmon

lemma continuous.comp_lower_semicontinuous_on_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : lower_semicontinuous_on f s)
  (gmon : antitone g) : upper_semicontinuous_on (g ‚àò f) s :=
Œª x hx, (hg.continuous_at).comp_lower_semicontinuous_within_at_antitone (hf x hx) gmon

lemma continuous.comp_lower_semicontinuous_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : lower_semicontinuous f)
  (gmon : antitone g) : upper_semicontinuous (g ‚àò f) :=
Œª x, (hg.continuous_at).comp_lower_semicontinuous_at_antitone (hf x) gmon

end

/-! #### Addition -/

section
variables {Œπ : Type*} {Œ≥ : Type*} [linear_ordered_add_comm_monoid Œ≥]
[topological_space Œ≥] [order_topology Œ≥]

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma lower_semicontinuous_within_at.add' {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous_within_at f s x) (hg : lower_semicontinuous_within_at g s x)
  (hcont : continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  lower_semicontinuous_within_at (Œª z, f z + g z) s x :=
begin
  assume y hy,
  obtain ‚ü®u, v, u_open, xu, v_open, xv, h‚ü© : ‚àÉ (u v : set Œ≥), is_open u ‚àß f x ‚àà u ‚àß is_open v ‚àß
    g x ‚àà v ‚àß u √óÀ¢ v ‚äÜ {p : Œ≥ √ó Œ≥ | y < p.fst + p.snd} :=
  mem_nhds_prod_iff'.1 (hcont (is_open_Ioi.mem_nhds hy)),
  by_cases hx‚ÇÅ : ‚àÉ l, l < f x,
  { obtain ‚ü®z‚ÇÅ, z‚ÇÅlt, h‚ÇÅ‚ü© : ‚àÉ z‚ÇÅ < f x, Ioc z‚ÇÅ (f x) ‚äÜ u :=
      exists_Ioc_subset_of_mem_nhds (u_open.mem_nhds xu) hx‚ÇÅ,
    by_cases hx‚ÇÇ : ‚àÉ l, l < g x,
    { obtain ‚ü®z‚ÇÇ, z‚ÇÇlt, h‚ÇÇ‚ü© : ‚àÉ z‚ÇÇ < g x, Ioc z‚ÇÇ (g x) ‚äÜ v :=
        exists_Ioc_subset_of_mem_nhds (v_open.mem_nhds xv) hx‚ÇÇ,
      filter_upwards [hf z‚ÇÅ z‚ÇÅlt, hg z‚ÇÇ z‚ÇÇlt] with z h‚ÇÅz h‚ÇÇz,
      have A1 : min (f z) (f x) ‚àà u,
      { by_cases H : f z ‚â§ f x,
        { simp [H], exact h‚ÇÅ ‚ü®h‚ÇÅz, H‚ü© },
        { simp [le_of_not_le H], exact h‚ÇÅ ‚ü®z‚ÇÅlt, le_rfl‚ü©, } },
      have A2 : min (g z) (g x) ‚àà v,
      { by_cases H : g z ‚â§ g x,
        { simp [H], exact h‚ÇÇ ‚ü®h‚ÇÇz, H‚ü© },
        { simp [le_of_not_le H], exact h‚ÇÇ ‚ü®z‚ÇÇlt, le_rfl‚ü©, } },
      have : (min (f z) (f x), min (g z) (g x)) ‚àà u √óÀ¢ v := ‚ü®A1, A2‚ü©,
      calc y < min (f z) (f x) + min (g z) (g x) : h this
      ... ‚â§ f z + g z : add_le_add (min_le_left _ _) (min_le_left _ _) },
    { simp only [not_exists, not_lt] at hx‚ÇÇ,
      filter_upwards [hf z‚ÇÅ z‚ÇÅlt] with z h‚ÇÅz,
      have A1 : min (f z) (f x) ‚àà u,
      { by_cases H : f z ‚â§ f x,
        { simp [H], exact h‚ÇÅ ‚ü®h‚ÇÅz, H‚ü© },
        { simp [le_of_not_le H], exact h‚ÇÅ ‚ü®z‚ÇÅlt, le_rfl‚ü©, } },
      have : (min (f z) (f x), g x) ‚àà u √óÀ¢ v := ‚ü®A1, xv‚ü©,
      calc y < min (f z) (f x) + g x : h this
      ... ‚â§ f z + g z : add_le_add (min_le_left _ _) (hx‚ÇÇ (g z)) } },
  { simp only [not_exists, not_lt] at hx‚ÇÅ,
    by_cases hx‚ÇÇ : ‚àÉ l, l < g x,
    { obtain ‚ü®z‚ÇÇ, z‚ÇÇlt, h‚ÇÇ‚ü© : ‚àÉ z‚ÇÇ < g x, Ioc z‚ÇÇ (g x) ‚äÜ v :=
        exists_Ioc_subset_of_mem_nhds (v_open.mem_nhds xv) hx‚ÇÇ,
      filter_upwards [hg z‚ÇÇ z‚ÇÇlt] with z h‚ÇÇz,
      have A2 : min (g z) (g x) ‚àà v,
      { by_cases H : g z ‚â§ g x,
        { simp [H], exact h‚ÇÇ ‚ü®h‚ÇÇz, H‚ü© },
        { simp [le_of_not_le H], exact h‚ÇÇ ‚ü®z‚ÇÇlt, le_rfl‚ü©, } },
      have : (f x, min (g z) (g x)) ‚àà u √óÀ¢ v := ‚ü®xu, A2‚ü©,
      calc y < f x + min (g z) (g x) : h this
      ... ‚â§ f z + g z : add_le_add (hx‚ÇÅ (f z)) (min_le_left _ _) },
    { simp only [not_exists, not_lt] at hx‚ÇÅ hx‚ÇÇ,
      apply filter.eventually_of_forall,
      assume z,
      have : (f x, g x) ‚àà u √óÀ¢ v := ‚ü®xu, xv‚ü©,
      calc y < f x + g x : h this
      ... ‚â§ f z + g z : add_le_add (hx‚ÇÅ (f z)) (hx‚ÇÇ (g z)) } },
end

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma lower_semicontinuous_at.add' {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous_at f x) (hg : lower_semicontinuous_at g x)
  (hcont : continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  lower_semicontinuous_at (Œª z, f z + g z) x :=
by { simp_rw [‚Üê lower_semicontinuous_within_at_univ_iff] at *, exact hf.add' hg hcont }

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma lower_semicontinuous_on.add' {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous_on f s) (hg : lower_semicontinuous_on g s)
  (hcont : ‚àÄ x ‚àà s, continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  lower_semicontinuous_on (Œª z, f z + g z) s :=
Œª x hx, (hf x hx).add' (hg x hx) (hcont x hx)

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma lower_semicontinuous.add' {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous f) (hg : lower_semicontinuous g)
  (hcont : ‚àÄ x, continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  lower_semicontinuous (Œª z, f z + g z) :=
Œª x, (hf x).add' (hg x) (hcont x)

variable [has_continuous_add Œ≥]

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma lower_semicontinuous_within_at.add {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous_within_at f s x) (hg : lower_semicontinuous_within_at g s x) :
  lower_semicontinuous_within_at (Œª z, f z + g z) s x :=
hf.add' hg continuous_add.continuous_at

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma lower_semicontinuous_at.add {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous_at f x) (hg : lower_semicontinuous_at g x) :
  lower_semicontinuous_at (Œª z, f z + g z) x :=
hf.add' hg continuous_add.continuous_at

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma lower_semicontinuous_on.add {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous_on f s) (hg : lower_semicontinuous_on g s) :
  lower_semicontinuous_on (Œª z, f z + g z) s :=
hf.add' hg (Œª x hx, continuous_add.continuous_at)

/-- The sum of two lower semicontinuous functions is lower semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma lower_semicontinuous.add {f g : Œ± ‚Üí Œ≥}
  (hf : lower_semicontinuous f) (hg : lower_semicontinuous g) :
  lower_semicontinuous (Œª z, f z + g z) :=
hf.add' hg (Œª x, continuous_add.continuous_at)

lemma lower_semicontinuous_within_at_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, lower_semicontinuous_within_at (f i) s x) :
  lower_semicontinuous_within_at (Œª z, (‚àë i in a, f i z)) s x :=
begin
  classical,
  induction a using finset.induction_on with i a ia IH generalizing ha,
  { exact lower_semicontinuous_within_at_const },
  { simp only [ia, finset.sum_insert, not_false_iff],
    exact lower_semicontinuous_within_at.add (ha _ (finset.mem_insert_self i a))
      (IH (Œª j ja, ha j (finset.mem_insert_of_mem ja))) }
end

lemma lower_semicontinuous_at_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, lower_semicontinuous_at (f i) x) :
  lower_semicontinuous_at (Œª z, (‚àë i in a, f i z)) x :=
begin
  simp_rw [‚Üê lower_semicontinuous_within_at_univ_iff] at *,
  exact lower_semicontinuous_within_at_sum ha
end

lemma lower_semicontinuous_on_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, lower_semicontinuous_on (f i) s) :
  lower_semicontinuous_on (Œª z, (‚àë i in a, f i z)) s :=
Œª x hx, lower_semicontinuous_within_at_sum (Œª i hi, ha i hi x hx)

lemma lower_semicontinuous_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, lower_semicontinuous (f i)) :
  lower_semicontinuous (Œª z, (‚àë i in a, f i z)) :=
Œª x, lower_semicontinuous_at_sum (Œª i hi, ha i hi x)

end

/-! #### Supremum -/

section
variables {Œπ : Sort*} {Œ¥ : Type*} [complete_linear_order Œ¥]

lemma lower_semicontinuous_within_at_supr {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, lower_semicontinuous_within_at (f i) s x) :
  lower_semicontinuous_within_at (Œª x', ‚®Ü i, f i x') s x :=
begin
  assume y hy,
  rcases lt_supr_iff.1 hy with ‚ü®i, hi‚ü©,
  filter_upwards [h i y hi] with _ hx' using lt_supr_iff.2 ‚ü®i, hx'‚ü©,
end

lemma lower_semicontinuous_within_at_bsupr {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, lower_semicontinuous_within_at (f i hi) s x) :
  lower_semicontinuous_within_at (Œª x', ‚®Ü i hi, f i hi x') s x :=
lower_semicontinuous_within_at_supr $ Œª i, lower_semicontinuous_within_at_supr $ Œª hi, h i hi

lemma lower_semicontinuous_at_supr {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, lower_semicontinuous_at (f i) x) :
  lower_semicontinuous_at (Œª x', ‚®Ü i, f i x') x :=
begin
  simp_rw [‚Üê lower_semicontinuous_within_at_univ_iff] at *,
  exact lower_semicontinuous_within_at_supr h
end

lemma lower_semicontinuous_at_bsupr {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, lower_semicontinuous_at (f i hi) x) :
  lower_semicontinuous_at (Œª x', ‚®Ü i hi, f i hi x') x :=
lower_semicontinuous_at_supr $ Œª i, lower_semicontinuous_at_supr $ Œª hi, h i hi

lemma lower_semicontinuous_on_supr {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, lower_semicontinuous_on (f i) s) :
  lower_semicontinuous_on (Œª x', ‚®Ü i, f i x') s :=
Œª x hx, lower_semicontinuous_within_at_supr (Œª i, h i x hx)

lemma lower_semicontinuous_on_bsupr {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, lower_semicontinuous_on (f i hi) s) :
  lower_semicontinuous_on (Œª x', ‚®Ü i hi, f i hi x') s :=
lower_semicontinuous_on_supr $ Œª i, lower_semicontinuous_on_supr $ Œª hi, h i hi

lemma lower_semicontinuous_supr {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, lower_semicontinuous (f i)) :
  lower_semicontinuous (Œª x', ‚®Ü i, f i x') :=
Œª x, lower_semicontinuous_at_supr (Œª i, h i x)

lemma lower_semicontinuous_bsupr {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, lower_semicontinuous (f i hi)) :
  lower_semicontinuous (Œª x', ‚®Ü i hi, f i hi x') :=
lower_semicontinuous_supr $ Œª i, lower_semicontinuous_supr $ Œª hi, h i hi

end

/-! #### Infinite sums -/

section
variables {Œπ : Type*}

lemma lower_semicontinuous_within_at_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû}
  (h : ‚àÄ i, lower_semicontinuous_within_at (f i) s x) :
  lower_semicontinuous_within_at (Œª x', ‚àë' i, f i x') s x :=
begin
  simp_rw ennreal.tsum_eq_supr_sum,
  apply lower_semicontinuous_within_at_supr (Œª b, _),
  exact lower_semicontinuous_within_at_sum (Œª i hi, h i),
end

lemma lower_semicontinuous_at_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû}
  (h : ‚àÄ i, lower_semicontinuous_at (f i) x) :
  lower_semicontinuous_at (Œª x', ‚àë' i, f i x') x :=
begin
  simp_rw [‚Üê lower_semicontinuous_within_at_univ_iff] at *,
  exact lower_semicontinuous_within_at_tsum h
end

lemma lower_semicontinuous_on_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû}
  (h : ‚àÄ i, lower_semicontinuous_on (f i) s) :
  lower_semicontinuous_on (Œª x', ‚àë' i, f i x') s :=
Œª x hx, lower_semicontinuous_within_at_tsum (Œª i, h i x hx)

lemma lower_semicontinuous_tsum {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû}
  (h : ‚àÄ i, lower_semicontinuous (f i)) :
  lower_semicontinuous (Œª x', ‚àë' i, f i x') :=
Œª x, lower_semicontinuous_at_tsum (Œª i, h i x)

end

/-!
### Upper semicontinuous functions
-/

/-! #### Basic dot notation interface for upper semicontinuity -/

lemma upper_semicontinuous_within_at.mono (h : upper_semicontinuous_within_at f s x)
  (hst : t ‚äÜ s) : upper_semicontinuous_within_at f t x :=
Œª y hy, filter.eventually.filter_mono (nhds_within_mono _ hst) (h y hy)

lemma upper_semicontinuous_within_at_univ_iff :
  upper_semicontinuous_within_at f univ x ‚Üî upper_semicontinuous_at f x :=
by simp [upper_semicontinuous_within_at, upper_semicontinuous_at, nhds_within_univ]

lemma upper_semicontinuous_at.upper_semicontinuous_within_at
  (s : set Œ±) (h : upper_semicontinuous_at f x) : upper_semicontinuous_within_at f s x :=
Œª y hy, filter.eventually.filter_mono nhds_within_le_nhds (h y hy)

lemma upper_semicontinuous_on.upper_semicontinuous_within_at
  (h : upper_semicontinuous_on f s) (hx : x ‚àà s) :
  upper_semicontinuous_within_at f s x :=
h x hx

lemma upper_semicontinuous_on.mono (h : upper_semicontinuous_on f s) (hst : t ‚äÜ s) :
  upper_semicontinuous_on f t :=
Œª x hx, (h x (hst hx)).mono hst

lemma upper_semicontinuous_on_univ_iff :
  upper_semicontinuous_on f univ ‚Üî upper_semicontinuous f :=
by simp [upper_semicontinuous_on, upper_semicontinuous, upper_semicontinuous_within_at_univ_iff]

lemma upper_semicontinuous.upper_semicontinuous_at
  (h : upper_semicontinuous f) (x : Œ±) : upper_semicontinuous_at f x :=
h x

lemma upper_semicontinuous.upper_semicontinuous_within_at
  (h : upper_semicontinuous f) (s : set Œ±) (x : Œ±) : upper_semicontinuous_within_at f s x :=
(h x).upper_semicontinuous_within_at s

lemma upper_semicontinuous.upper_semicontinuous_on
  (h : upper_semicontinuous f) (s : set Œ±) : upper_semicontinuous_on f s :=
Œª x hx, h.upper_semicontinuous_within_at s x

/-! #### Constants -/

lemma upper_semicontinuous_within_at_const :
  upper_semicontinuous_within_at (Œª x, z) s x :=
Œª y hy, filter.eventually_of_forall (Œª x, hy)

lemma upper_semicontinuous_at_const :
  upper_semicontinuous_at (Œª x, z) x :=
Œª y hy, filter.eventually_of_forall (Œª x, hy)

lemma upper_semicontinuous_on_const :
  upper_semicontinuous_on (Œª x, z) s :=
Œª x hx, upper_semicontinuous_within_at_const

lemma upper_semicontinuous_const :
  upper_semicontinuous (Œª (x : Œ±), z) :=
Œª x, upper_semicontinuous_at_const


/-! #### Indicators -/

section
variables [has_zero Œ≤]

lemma is_open.upper_semicontinuous_indicator (hs : is_open s) (hy : y ‚â§ 0) :
  upper_semicontinuous (indicator s (Œª x, y)) :=
@is_open.lower_semicontinuous_indicator Œ± _ (order_dual Œ≤) _ s y _ hs hy

lemma is_open.upper_semicontinuous_on_indicator (hs : is_open s) (hy : y ‚â§ 0) :
  upper_semicontinuous_on (indicator s (Œª x, y)) t :=
(hs.upper_semicontinuous_indicator hy).upper_semicontinuous_on t

lemma is_open.upper_semicontinuous_at_indicator (hs : is_open s) (hy : y ‚â§ 0) :
  upper_semicontinuous_at (indicator s (Œª x, y)) x :=
(hs.upper_semicontinuous_indicator hy).upper_semicontinuous_at x

lemma is_open.upper_semicontinuous_within_at_indicator (hs : is_open s) (hy : y ‚â§ 0) :
  upper_semicontinuous_within_at (indicator s (Œª x, y)) t x :=
(hs.upper_semicontinuous_indicator hy).upper_semicontinuous_within_at t x

lemma is_closed.upper_semicontinuous_indicator (hs : is_closed s) (hy : 0 ‚â§ y) :
  upper_semicontinuous (indicator s (Œª x, y)) :=
@is_closed.lower_semicontinuous_indicator Œ± _ (order_dual Œ≤) _ s y _ hs hy

lemma is_closed.upper_semicontinuous_on_indicator (hs : is_closed s) (hy : 0 ‚â§ y) :
  upper_semicontinuous_on (indicator s (Œª x, y)) t :=
(hs.upper_semicontinuous_indicator hy).upper_semicontinuous_on t

lemma is_closed.upper_semicontinuous_at_indicator (hs : is_closed s) (hy : 0 ‚â§ y) :
  upper_semicontinuous_at (indicator s (Œª x, y)) x :=
(hs.upper_semicontinuous_indicator hy).upper_semicontinuous_at x

lemma is_closed.upper_semicontinuous_within_at_indicator (hs : is_closed s) (hy : 0 ‚â§ y) :
  upper_semicontinuous_within_at (indicator s (Œª x, y)) t x :=
(hs.upper_semicontinuous_indicator hy).upper_semicontinuous_within_at t x

end

/-! #### Relationship with continuity -/

theorem upper_semicontinuous_iff_is_open :
  upper_semicontinuous f ‚Üî ‚àÄ y, is_open (f ‚Åª¬π' (Iio y)) :=
‚ü®Œª H y, is_open_iff_mem_nhds.2 (Œª x hx, H x y hx), Œª H x y y_lt, is_open.mem_nhds (H y) y_lt‚ü©

lemma upper_semicontinuous.is_open_preimage (hf : upper_semicontinuous f) (y : Œ≤) :
  is_open (f ‚Åª¬π' (Iio y)) :=
upper_semicontinuous_iff_is_open.1 hf y

section
variables {Œ≥ : Type*} [linear_order Œ≥] [topological_space Œ≥] [order_topology Œ≥]

lemma continuous_within_at.upper_semicontinuous_within_at {f : Œ± ‚Üí Œ≥}
  (h : continuous_within_at f s x) : upper_semicontinuous_within_at f s x :=
Œª y hy, h (Iio_mem_nhds hy)

lemma continuous_at.upper_semicontinuous_at {f : Œ± ‚Üí Œ≥}
  (h : continuous_at f x) : upper_semicontinuous_at f x :=
Œª y hy, h (Iio_mem_nhds hy)

lemma continuous_on.upper_semicontinuous_on {f : Œ± ‚Üí Œ≥}
  (h : continuous_on f s) : upper_semicontinuous_on f s :=
Œª x hx, (h x hx).upper_semicontinuous_within_at

lemma continuous.upper_semicontinuous {f : Œ± ‚Üí Œ≥}
  (h : continuous f) : upper_semicontinuous f :=
Œª x, h.continuous_at.upper_semicontinuous_at

end

/-! ### Composition -/

section
variables {Œ≥ : Type*} [linear_order Œ≥] [topological_space Œ≥] [order_topology Œ≥]
variables {Œ¥ : Type*} [linear_order Œ¥] [topological_space Œ¥] [order_topology Œ¥]

lemma continuous_at.comp_upper_semicontinuous_within_at
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : upper_semicontinuous_within_at f s x)
  (gmon : monotone g) : upper_semicontinuous_within_at (g ‚àò f) s x :=
@continuous_at.comp_lower_semicontinuous_within_at Œ± _ x s (order_dual Œ≥) _ _ _
  (order_dual Œ¥) _ _ _ g f hg hf (Œª x y hxy, gmon hxy)

lemma continuous_at.comp_upper_semicontinuous_at
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : upper_semicontinuous_at f x)
  (gmon : monotone g) : upper_semicontinuous_at (g ‚àò f) x :=
@continuous_at.comp_lower_semicontinuous_at Œ± _ x (order_dual Œ≥) _ _ _
  (order_dual Œ¥) _ _ _ g f hg hf (Œª x y hxy, gmon hxy)

lemma continuous.comp_upper_semicontinuous_on
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : upper_semicontinuous_on f s)
  (gmon : monotone g) : upper_semicontinuous_on (g ‚àò f) s :=
Œª x hx, (hg.continuous_at).comp_upper_semicontinuous_within_at (hf x hx) gmon

lemma continuous.comp_upper_semicontinuous
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : upper_semicontinuous f)
  (gmon : monotone g) : upper_semicontinuous (g ‚àò f) :=
Œª x, (hg.continuous_at).comp_upper_semicontinuous_at (hf x) gmon

lemma continuous_at.comp_upper_semicontinuous_within_at_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : upper_semicontinuous_within_at f s x)
  (gmon : antitone g) : lower_semicontinuous_within_at (g ‚àò f) s x :=
@continuous_at.comp_upper_semicontinuous_within_at Œ± _ x s Œ≥ _ _ _ (order_dual Œ¥) _ _ _
  g f hg hf gmon

lemma continuous_at.comp_upper_semicontinuous_at_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous_at g (f x)) (hf : upper_semicontinuous_at f x)
  (gmon : antitone g) : lower_semicontinuous_at (g ‚àò f) x :=
@continuous_at.comp_upper_semicontinuous_at Œ± _ x Œ≥ _ _ _ (order_dual Œ¥) _ _ _ g f hg hf gmon

lemma continuous.comp_upper_semicontinuous_on_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : upper_semicontinuous_on f s)
  (gmon : antitone g) : lower_semicontinuous_on (g ‚àò f) s :=
Œª x hx, (hg.continuous_at).comp_upper_semicontinuous_within_at_antitone (hf x hx) gmon

lemma continuous.comp_upper_semicontinuous_antitone
  {g : Œ≥ ‚Üí Œ¥} {f : Œ± ‚Üí Œ≥} (hg : continuous g) (hf : upper_semicontinuous f)
  (gmon : antitone g) : lower_semicontinuous (g ‚àò f) :=
Œª x, (hg.continuous_at).comp_upper_semicontinuous_at_antitone (hf x) gmon

end

/-! #### Addition -/

section
variables {Œπ : Type*} {Œ≥ : Type*} [linear_ordered_add_comm_monoid Œ≥]
[topological_space Œ≥] [order_topology Œ≥]

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma upper_semicontinuous_within_at.add' {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous_within_at f s x) (hg : upper_semicontinuous_within_at g s x)
  (hcont : continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  upper_semicontinuous_within_at (Œª z, f z + g z) s x :=
@lower_semicontinuous_within_at.add' Œ± _ x s (order_dual Œ≥) _ _ _ _ _ hf hg hcont

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma upper_semicontinuous_at.add' {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous_at f x) (hg : upper_semicontinuous_at g x)
  (hcont : continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  upper_semicontinuous_at (Œª z, f z + g z) x :=
by { simp_rw [‚Üê upper_semicontinuous_within_at_univ_iff] at *, exact hf.add' hg hcont }

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma upper_semicontinuous_on.add' {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous_on f s) (hg : upper_semicontinuous_on g s)
  (hcont : ‚àÄ x ‚àà s, continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  upper_semicontinuous_on (Œª z, f z + g z) s :=
Œª x hx, (hf x hx).add' (hg x hx) (hcont x hx)

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with an
explicit continuity assumption on addition, for application to `ereal`. The unprimed version of
the lemma uses `[has_continuous_add]`. -/
lemma upper_semicontinuous.add' {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous f) (hg : upper_semicontinuous g)
  (hcont : ‚àÄ x, continuous_at (Œª (p : Œ≥ √ó Œ≥), p.1 + p.2) (f x, g x)) :
  upper_semicontinuous (Œª z, f z + g z) :=
Œª x, (hf x).add' (hg x) (hcont x)

variable [has_continuous_add Œ≥]

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma upper_semicontinuous_within_at.add {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous_within_at f s x) (hg : upper_semicontinuous_within_at g s x) :
  upper_semicontinuous_within_at (Œª z, f z + g z) s x :=
hf.add' hg continuous_add.continuous_at

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma upper_semicontinuous_at.add {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous_at f x) (hg : upper_semicontinuous_at g x) :
  upper_semicontinuous_at (Œª z, f z + g z) x :=
hf.add' hg continuous_add.continuous_at

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma upper_semicontinuous_on.add {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous_on f s) (hg : upper_semicontinuous_on g s) :
  upper_semicontinuous_on (Œª z, f z + g z) s :=
hf.add' hg (Œª x hx, continuous_add.continuous_at)

/-- The sum of two upper semicontinuous functions is upper semicontinuous. Formulated with
`[has_continuous_add]`. The primed version of the lemma uses an explicit continuity assumption on
addition, for application to `ereal`. -/
lemma upper_semicontinuous.add {f g : Œ± ‚Üí Œ≥}
  (hf : upper_semicontinuous f) (hg : upper_semicontinuous g) :
  upper_semicontinuous (Œª z, f z + g z) :=
hf.add' hg (Œª x, continuous_add.continuous_at)

lemma upper_semicontinuous_within_at_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, upper_semicontinuous_within_at (f i) s x) :
  upper_semicontinuous_within_at (Œª z, (‚àë i in a, f i z)) s x :=
@lower_semicontinuous_within_at_sum Œ± _ x s Œπ (order_dual Œ≥) _ _ _ _ f a ha

lemma upper_semicontinuous_at_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, upper_semicontinuous_at (f i) x) :
  upper_semicontinuous_at (Œª z, (‚àë i in a, f i z)) x :=
begin
  simp_rw [‚Üê upper_semicontinuous_within_at_univ_iff] at *,
  exact upper_semicontinuous_within_at_sum ha
end

lemma upper_semicontinuous_on_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, upper_semicontinuous_on (f i) s) :
  upper_semicontinuous_on (Œª z, (‚àë i in a, f i z)) s :=
Œª x hx, upper_semicontinuous_within_at_sum (Œª i hi, ha i hi x hx)

lemma upper_semicontinuous_sum {f : Œπ ‚Üí Œ± ‚Üí Œ≥} {a : finset Œπ}
  (ha : ‚àÄ i ‚àà a, upper_semicontinuous (f i)) :
  upper_semicontinuous (Œª z, (‚àë i in a, f i z)) :=
Œª x, upper_semicontinuous_at_sum (Œª i hi, ha i hi x)

end

/-! #### Infimum -/

section
variables {Œπ : Sort*} {Œ¥ : Type*} [complete_linear_order Œ¥]

lemma upper_semicontinuous_within_at_infi {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, upper_semicontinuous_within_at (f i) s x) :
  upper_semicontinuous_within_at (Œª x', ‚®Ö i, f i x') s x :=
@lower_semicontinuous_within_at_supr Œ± _ x s Œπ (order_dual Œ¥) _ f h

lemma upper_semicontinuous_within_at_binfi {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, upper_semicontinuous_within_at (f i hi) s x) :
  upper_semicontinuous_within_at (Œª x', ‚®Ö i hi, f i hi x') s x :=
upper_semicontinuous_within_at_infi $ Œª i, upper_semicontinuous_within_at_infi $ Œª hi, h i hi

lemma upper_semicontinuous_at_infi {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, upper_semicontinuous_at (f i) x) :
  upper_semicontinuous_at (Œª x', ‚®Ö i, f i x') x :=
@lower_semicontinuous_at_supr Œ± _ x Œπ (order_dual Œ¥) _ f h

lemma upper_semicontinuous_at_binfi {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, upper_semicontinuous_at (f i hi) x) :
  upper_semicontinuous_at (Œª x', ‚®Ö i hi, f i hi x') x :=
upper_semicontinuous_at_infi $ Œª i, upper_semicontinuous_at_infi $ Œª hi, h i hi

lemma upper_semicontinuous_on_infi {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, upper_semicontinuous_on (f i) s) :
  upper_semicontinuous_on (Œª x', ‚®Ö i, f i x') s :=
Œª x hx, upper_semicontinuous_within_at_infi (Œª i, h i x hx)

lemma upper_semicontinuous_on_binfi {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, upper_semicontinuous_on (f i hi) s) :
  upper_semicontinuous_on (Œª x', ‚®Ö i hi, f i hi x') s :=
upper_semicontinuous_on_infi $ Œª i, upper_semicontinuous_on_infi $ Œª hi, h i hi

lemma upper_semicontinuous_infi {f : Œπ ‚Üí Œ± ‚Üí Œ¥}
  (h : ‚àÄ i, upper_semicontinuous (f i)) :
  upper_semicontinuous (Œª x', ‚®Ö i, f i x') :=
Œª x, upper_semicontinuous_at_infi (Œª i, h i x)

lemma upper_semicontinuous_binfi {p : Œπ ‚Üí Prop} {f : Œ† i (h : p i), Œ± ‚Üí Œ¥}
  (h : ‚àÄ i hi, upper_semicontinuous (f i hi)) :
  upper_semicontinuous (Œª x', ‚®Ö i hi, f i hi x') :=
upper_semicontinuous_infi $ Œª i, upper_semicontinuous_infi $ Œª hi, h i hi

end

section
variables {Œ≥ : Type*} [linear_order Œ≥] [topological_space Œ≥] [order_topology Œ≥]

lemma continuous_within_at_iff_lower_upper_semicontinuous_within_at {f : Œ± ‚Üí Œ≥} :
  continuous_within_at f s x ‚Üî
    lower_semicontinuous_within_at f s x ‚àß upper_semicontinuous_within_at f s x:=
begin
  refine ‚ü®Œª h, ‚ü®h.lower_semicontinuous_within_at, h.upper_semicontinuous_within_at‚ü©, _‚ü©,
  rintros ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  assume v hv,
  simp only [filter.mem_map],
  by_cases Hl : ‚àÉ l, l < f x,
  { rcases exists_Ioc_subset_of_mem_nhds hv Hl with ‚ü®l, lfx, hl‚ü©,
    by_cases Hu : ‚àÉ u, f x < u,
    { rcases exists_Ico_subset_of_mem_nhds hv Hu with ‚ü®u, fxu, hu‚ü©,
      filter_upwards [h‚ÇÅ l lfx, h‚ÇÇ u fxu] with a lfa fau,
      cases le_or_gt (f a) (f x) with h h,
      { exact hl ‚ü®lfa, h‚ü© },
      { exact hu ‚ü®le_of_lt h, fau‚ü© } },
    { simp only [not_exists, not_lt] at Hu,
      filter_upwards [h‚ÇÅ l lfx] with a lfa using hl ‚ü®lfa, Hu (f a)‚ü©, }, },
  { simp only [not_exists, not_lt] at Hl,
    by_cases Hu : ‚àÉ u, f x < u,
    { rcases exists_Ico_subset_of_mem_nhds hv Hu with ‚ü®u, fxu, hu‚ü©,
      filter_upwards [h‚ÇÇ u fxu] with a lfa,
      apply hu,
      exact ‚ü®Hl (f a), lfa‚ü© },
    { simp only [not_exists, not_lt] at Hu,
      apply filter.eventually_of_forall,
      assume a,
      have : f a = f x := le_antisymm (Hu _) (Hl _),
      rw this,
      exact mem_of_mem_nhds hv } }
end

lemma continuous_at_iff_lower_upper_semicontinuous_at {f : Œ± ‚Üí Œ≥} :
  continuous_at f x ‚Üî (lower_semicontinuous_at f x ‚àß upper_semicontinuous_at f x) :=
by simp_rw [‚Üê continuous_within_at_univ, ‚Üê lower_semicontinuous_within_at_univ_iff,
  ‚Üê upper_semicontinuous_within_at_univ_iff,
  continuous_within_at_iff_lower_upper_semicontinuous_within_at]

lemma continuous_on_iff_lower_upper_semicontinuous_on {f : Œ± ‚Üí Œ≥} :
  continuous_on f s ‚Üî (lower_semicontinuous_on f s ‚àß upper_semicontinuous_on f s) :=
begin
  simp only [continuous_on, continuous_within_at_iff_lower_upper_semicontinuous_within_at],
  exact ‚ü®Œª H, ‚ü®Œª x hx, (H x hx).1, Œª x hx, (H x hx).2‚ü©, Œª H x hx, ‚ü®H.1 x hx, H.2 x hx‚ü©‚ü©
end

lemma continuous_iff_lower_upper_semicontinuous {f : Œ± ‚Üí Œ≥} :
  continuous f ‚Üî (lower_semicontinuous f ‚àß upper_semicontinuous f) :=
by simp_rw [continuous_iff_continuous_on_univ, continuous_on_iff_lower_upper_semicontinuous_on,
    lower_semicontinuous_on_univ_iff, upper_semicontinuous_on_univ_iff]

end
