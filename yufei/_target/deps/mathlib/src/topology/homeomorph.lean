/-
Copyright (c) 2019 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Patrick Massot, S√©bastien Gou√´zel, Zhouhang Zhou, Reid Barton
-/
import topology.dense_embedding
import data.equiv.fin

/-!
# Homeomorphisms

This file defines homeomorphisms between two topological spaces. They are bijections with both
directions continuous. We denote homeomorphisms with the notation `‚âÉ‚Çú`.

# Main definitions

* `homeomorph Œ± Œ≤`: The type of homeomorphisms from `Œ±` to `Œ≤`.
  This type can be denoted using the following notation: `Œ± ‚âÉ‚Çú Œ≤`.

# Main results

* Pretty much every topological property is preserved under homeomorphisms.
* `homeomorph.homeomorph_of_continuous_open`: A continuous bijection that is
  an open map is a homeomorphism.

-/

open set filter
open_locale topological_space

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œ¥ : Type*}

/-- Homeomorphism between `Œ±` and `Œ≤`, also called topological isomorphism -/
@[nolint has_inhabited_instance] -- not all spaces are homeomorphic to each other
structure homeomorph (Œ± : Type*) (Œ≤ : Type*) [topological_space Œ±] [topological_space Œ≤]
  extends Œ± ‚âÉ Œ≤ :=
(continuous_to_fun  : continuous to_fun . tactic.interactive.continuity')
(continuous_inv_fun : continuous inv_fun . tactic.interactive.continuity')

infix ` ‚âÉ‚Çú `:25 := homeomorph

namespace homeomorph
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥] [topological_space Œ¥]

instance : has_coe_to_fun (Œ± ‚âÉ‚Çú Œ≤) (Œª _, Œ± ‚Üí Œ≤) := ‚ü®Œªe, e.to_equiv‚ü©

@[simp] lemma homeomorph_mk_coe (a : equiv Œ± Œ≤) (b c) :
  ((homeomorph.mk a b c) : Œ± ‚Üí Œ≤) = a :=
rfl

@[simp] lemma coe_to_equiv (h : Œ± ‚âÉ‚Çú Œ≤) : ‚áëh.to_equiv = h := rfl

/-- Inverse of a homeomorphism. -/
protected def symm (h : Œ± ‚âÉ‚Çú Œ≤) : Œ≤ ‚âÉ‚Çú Œ± :=
{ continuous_to_fun  := h.continuous_inv_fun,
  continuous_inv_fun := h.continuous_to_fun,
  to_equiv := h.to_equiv.symm }

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
  because it is a composition of multiple projections. -/
def simps.apply (h : Œ± ‚âÉ‚Çú Œ≤) : Œ± ‚Üí Œ≤ := h
/-- See Note [custom simps projection] -/
def simps.symm_apply (h : Œ± ‚âÉ‚Çú Œ≤) : Œ≤ ‚Üí Œ± := h.symm

initialize_simps_projections homeomorph
  (to_equiv_to_fun ‚Üí apply, to_equiv_inv_fun ‚Üí symm_apply, -to_equiv)

lemma to_equiv_injective : function.injective (to_equiv : Œ± ‚âÉ‚Çú Œ≤ ‚Üí Œ± ‚âÉ Œ≤)
| ‚ü®e, h‚ÇÅ, h‚ÇÇ‚ü© ‚ü®e', h‚ÇÅ', h‚ÇÇ'‚ü© rfl := rfl

@[ext] lemma ext {h h' : Œ± ‚âÉ‚Çú Œ≤} (H : ‚àÄ x, h x = h' x) : h = h' :=
to_equiv_injective $ equiv.ext H

/-- Identity map as a homeomorphism. -/
@[simps apply {fully_applied := ff}]
protected def refl (Œ± : Type*) [topological_space Œ±] : Œ± ‚âÉ‚Çú Œ± :=
{ continuous_to_fun := continuous_id,
  continuous_inv_fun := continuous_id,
  to_equiv := equiv.refl Œ± }

/-- Composition of two homeomorphisms. -/
protected def trans (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≤ ‚âÉ‚Çú Œ≥) : Œ± ‚âÉ‚Çú Œ≥ :=
{ continuous_to_fun  := h‚ÇÇ.continuous_to_fun.comp h‚ÇÅ.continuous_to_fun,
  continuous_inv_fun := h‚ÇÅ.continuous_inv_fun.comp h‚ÇÇ.continuous_inv_fun,
  to_equiv := equiv.trans h‚ÇÅ.to_equiv h‚ÇÇ.to_equiv }

@[simp] lemma trans_apply (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≤ ‚âÉ‚Çú Œ≥) (a : Œ±) : h‚ÇÅ.trans h‚ÇÇ a = h‚ÇÇ (h‚ÇÅ a) := rfl

@[simp] lemma homeomorph_mk_coe_symm (a : equiv Œ± Œ≤) (b c) :
  ((homeomorph.mk a b c).symm : Œ≤ ‚Üí Œ±) = a.symm :=
rfl

@[simp] lemma refl_symm : (homeomorph.refl Œ±).symm = homeomorph.refl Œ± := rfl

@[continuity]
protected lemma continuous (h : Œ± ‚âÉ‚Çú Œ≤) : continuous h := h.continuous_to_fun

@[continuity] -- otherwise `by continuity` can't prove continuity of `h.to_equiv.symm`
protected lemma continuous_symm (h : Œ± ‚âÉ‚Çú Œ≤) : continuous (h.symm) := h.continuous_inv_fun

@[simp] lemma apply_symm_apply (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ≤) : h (h.symm x) = x :=
h.to_equiv.apply_symm_apply x

@[simp] lemma symm_apply_apply (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : h.symm (h x) = x :=
h.to_equiv.symm_apply_apply x

protected lemma bijective (h : Œ± ‚âÉ‚Çú Œ≤) : function.bijective h := h.to_equiv.bijective
protected lemma injective (h : Œ± ‚âÉ‚Çú Œ≤) : function.injective h := h.to_equiv.injective
protected lemma surjective (h : Œ± ‚âÉ‚Çú Œ≤) : function.surjective h := h.to_equiv.surjective

/-- Change the homeomorphism `f` to make the inverse function definitionally equal to `g`. -/
def change_inv (f : Œ± ‚âÉ‚Çú Œ≤) (g : Œ≤ ‚Üí Œ±) (hg : function.right_inverse g f) : Œ± ‚âÉ‚Çú Œ≤ :=
have g = f.symm, from funext (Œª x, calc g x = f.symm (f (g x)) : (f.left_inv (g x)).symm
                                        ... = f.symm x : by rw hg x),
{ to_fun := f,
  inv_fun := g,
  left_inv := by convert f.left_inv,
  right_inv := by convert f.right_inv,
  continuous_to_fun := f.continuous,
  continuous_inv_fun := by convert f.symm.continuous }

@[simp] lemma symm_comp_self (h : Œ± ‚âÉ‚Çú Œ≤) : ‚áëh.symm ‚àò ‚áëh = id :=
funext h.symm_apply_apply

@[simp] lemma self_comp_symm (h : Œ± ‚âÉ‚Çú Œ≤) : ‚áëh ‚àò ‚áëh.symm = id :=
funext h.apply_symm_apply

@[simp] lemma range_coe (h : Œ± ‚âÉ‚Çú Œ≤) : range h = univ :=
h.surjective.range_eq

lemma image_symm (h : Œ± ‚âÉ‚Çú Œ≤) : image h.symm = preimage h :=
funext h.symm.to_equiv.image_eq_preimage

lemma preimage_symm (h : Œ± ‚âÉ‚Çú Œ≤) : preimage h.symm = image h :=
(funext h.to_equiv.image_eq_preimage).symm

@[simp] lemma image_preimage (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ≤) : h '' (h ‚Åª¬π' s) = s :=
h.to_equiv.image_preimage s

@[simp] lemma preimage_image (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ±) : h ‚Åª¬π' (h '' s) = s :=
h.to_equiv.preimage_image s

protected lemma inducing (h : Œ± ‚âÉ‚Çú Œ≤) : inducing h :=
inducing_of_inducing_compose h.continuous h.symm.continuous $
  by simp only [symm_comp_self, inducing_id]

lemma induced_eq (h : Œ± ‚âÉ‚Çú Œ≤) : topological_space.induced h ‚Äπ_‚Ä∫ = ‚Äπ_‚Ä∫ := h.inducing.1.symm

protected lemma quotient_map (h : Œ± ‚âÉ‚Çú Œ≤) : quotient_map h :=
quotient_map.of_quotient_map_compose h.symm.continuous h.continuous $
  by simp only [self_comp_symm, quotient_map.id]

lemma coinduced_eq (h : Œ± ‚âÉ‚Çú Œ≤) : topological_space.coinduced h ‚Äπ_‚Ä∫ = ‚Äπ_‚Ä∫ :=
h.quotient_map.2.symm

protected lemma embedding (h : Œ± ‚âÉ‚Çú Œ≤) : embedding h :=
‚ü®h.inducing, h.injective‚ü©

/-- Homeomorphism given an embedding. -/
noncomputable def of_embedding (f : Œ± ‚Üí Œ≤) (hf : embedding f) : Œ± ‚âÉ‚Çú (set.range f) :=
{ continuous_to_fun := continuous_subtype_mk _ hf.continuous,
  continuous_inv_fun := by simp [hf.continuous_iff, continuous_subtype_coe],
  .. equiv.of_injective f hf.inj }

protected lemma second_countable_topology [topological_space.second_countable_topology Œ≤]
  (h : Œ± ‚âÉ‚Çú Œ≤) :
  topological_space.second_countable_topology Œ± :=
h.inducing.second_countable_topology

lemma compact_image {s : set Œ±} (h : Œ± ‚âÉ‚Çú Œ≤) : is_compact (h '' s) ‚Üî is_compact s :=
h.embedding.is_compact_iff_is_compact_image.symm

lemma compact_preimage {s : set Œ≤} (h : Œ± ‚âÉ‚Çú Œ≤) : is_compact (h ‚Åª¬π' s) ‚Üî is_compact s :=
by rw ‚Üê image_symm; exact h.symm.compact_image

protected lemma compact_space [compact_space Œ±] (h : Œ± ‚âÉ‚Çú Œ≤) : compact_space Œ≤ :=
{ compact_univ := by { rw [‚Üê image_univ_of_surjective h.surjective, h.compact_image],
    apply compact_space.compact_univ } }

protected lemma t2_space [t2_space Œ±] (h : Œ± ‚âÉ‚Çú Œ≤) : t2_space Œ≤ :=
{ t2 :=
  begin
    intros x y hxy,
    obtain ‚ü®u, v, hu, hv, hxu, hyv, huv‚ü© := t2_separation (h.symm.injective.ne hxy),
    refine ‚ü®h.symm ‚Åª¬π' u, h.symm ‚Åª¬π' v,
      h.symm.continuous.is_open_preimage _ hu,
      h.symm.continuous.is_open_preimage _ hv,
      hxu, hyv, _‚ü©,
    rw [‚Üê preimage_inter, huv, preimage_empty],
  end }

protected lemma dense_embedding (h : Œ± ‚âÉ‚Çú Œ≤) : dense_embedding h :=
{ dense   := h.surjective.dense_range,
  .. h.embedding }

@[simp] lemma is_open_preimage (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ≤} : is_open (h ‚Åª¬π' s) ‚Üî is_open s :=
h.quotient_map.is_open_preimage

@[simp] lemma is_open_image (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ±} : is_open (h '' s) ‚Üî is_open s :=
by rw [‚Üê preimage_symm, is_open_preimage]

protected lemma is_open_map (h : Œ± ‚âÉ‚Çú Œ≤) : is_open_map h := Œª s, h.is_open_image.2

@[simp] lemma is_closed_preimage (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ≤} : is_closed (h ‚Åª¬π' s) ‚Üî is_closed s :=
by simp only [‚Üê is_open_compl_iff, ‚Üê preimage_compl, is_open_preimage]

@[simp] lemma is_closed_image (h : Œ± ‚âÉ‚Çú Œ≤) {s : set Œ±} : is_closed (h '' s) ‚Üî is_closed s :=
by rw [‚Üê preimage_symm, is_closed_preimage]

protected lemma is_closed_map (h : Œ± ‚âÉ‚Çú Œ≤) : is_closed_map h := Œª s, h.is_closed_image.2

protected lemma open_embedding (h : Œ± ‚âÉ‚Çú Œ≤) : open_embedding h :=
open_embedding_of_embedding_open h.embedding h.is_open_map

protected lemma closed_embedding (h : Œ± ‚âÉ‚Çú Œ≤) : closed_embedding h :=
closed_embedding_of_embedding_closed h.embedding h.is_closed_map

lemma preimage_closure (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ≤) : h ‚Åª¬π' (closure s) = closure (h ‚Åª¬π' s) :=
h.is_open_map.preimage_closure_eq_closure_preimage h.continuous _

lemma image_closure (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ±) : h '' (closure s) = closure (h '' s) :=
by rw [‚Üê preimage_symm, preimage_closure]

lemma preimage_interior (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ≤) : h‚Åª¬π' (interior s) = interior (h ‚Åª¬π' s) :=
h.is_open_map.preimage_interior_eq_interior_preimage h.continuous _

lemma image_interior (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ±) : h '' (interior s) = interior (h '' s) :=
by rw [‚Üê preimage_symm, preimage_interior]

lemma preimage_frontier (h : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ≤) : h ‚Åª¬π' (frontier s) = frontier (h ‚Åª¬π' s) :=
h.is_open_map.preimage_frontier_eq_frontier_preimage h.continuous _

@[simp] lemma map_nhds_eq (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : map h (ùìù x) = ùìù (h x) :=
h.embedding.map_nhds_of_mem _ (by simp)

lemma symm_map_nhds_eq (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : map h.symm (ùìù (h x)) = ùìù x :=
by rw [h.symm.map_nhds_eq, h.symm_apply_apply]

lemma nhds_eq_comap (h : Œ± ‚âÉ‚Çú Œ≤) (x : Œ±) : ùìù x = comap h (ùìù (h x)) :=
h.embedding.to_inducing.nhds_eq_comap x

@[simp] lemma comap_nhds_eq (h : Œ± ‚âÉ‚Çú Œ≤) (y : Œ≤) : comap h (ùìù y) = ùìù (h.symm y) :=
by rw [h.nhds_eq_comap, h.apply_symm_apply]

/-- If an bijective map `e : Œ± ‚âÉ Œ≤` is continuous and open, then it is a homeomorphism. -/
def homeomorph_of_continuous_open (e : Œ± ‚âÉ Œ≤) (h‚ÇÅ : continuous e) (h‚ÇÇ : is_open_map e) :
  Œ± ‚âÉ‚Çú Œ≤ :=
{ continuous_to_fun := h‚ÇÅ,
  continuous_inv_fun := begin
    rw continuous_def,
    intros s hs,
    convert ‚Üê h‚ÇÇ s hs using 1,
    apply e.image_eq_preimage
  end,
  to_equiv := e }

@[simp] lemma comp_continuous_on_iff (h : Œ± ‚âÉ‚Çú Œ≤) (f : Œ≥ ‚Üí Œ±) (s : set Œ≥) :
  continuous_on (h ‚àò f) s ‚Üî continuous_on f s :=
h.inducing.continuous_on_iff.symm

@[simp] lemma comp_continuous_iff (h : Œ± ‚âÉ‚Çú Œ≤) {f : Œ≥ ‚Üí Œ±} :
  continuous (h ‚àò f) ‚Üî continuous f :=
h.inducing.continuous_iff.symm

@[simp] lemma comp_continuous_iff' (h : Œ± ‚âÉ‚Çú Œ≤) {f : Œ≤ ‚Üí Œ≥} :
  continuous (f ‚àò h) ‚Üî continuous f :=
h.quotient_map.continuous_iff.symm

lemma comp_continuous_at_iff (h : Œ± ‚âÉ‚Çú Œ≤) (f : Œ≥ ‚Üí Œ±) (x : Œ≥) :
  continuous_at (h ‚àò f) x ‚Üî continuous_at f x :=
h.inducing.continuous_at_iff.symm

lemma comp_continuous_at_iff' (h : Œ± ‚âÉ‚Çú Œ≤) (f : Œ≤ ‚Üí Œ≥) (x : Œ±) :
  continuous_at (f ‚àò h) x ‚Üî continuous_at f (h x) :=
h.inducing.continuous_at_iff' (by simp)

lemma comp_continuous_within_at_iff (h : Œ± ‚âÉ‚Çú Œ≤) (f : Œ≥ ‚Üí Œ±) (s : set Œ≥) (x : Œ≥) :
  continuous_within_at f s x ‚Üî continuous_within_at (h ‚àò f) s x :=
h.inducing.continuous_within_at_iff

@[simp] lemma comp_is_open_map_iff (h : Œ± ‚âÉ‚Çú Œ≤) {f : Œ≥ ‚Üí Œ±} :
  is_open_map (h ‚àò f) ‚Üî is_open_map f :=
begin
  refine ‚ü®_, Œª hf, h.is_open_map.comp hf‚ü©,
  intros hf,
  rw [‚Üê function.comp.left_id f, ‚Üê h.symm_comp_self, function.comp.assoc],
  exact h.symm.is_open_map.comp hf,
end

@[simp] lemma comp_is_open_map_iff' (h : Œ± ‚âÉ‚Çú Œ≤) {f : Œ≤ ‚Üí Œ≥} :
  is_open_map (f ‚àò h) ‚Üî is_open_map f :=
begin
  refine ‚ü®_, Œª hf, hf.comp h.is_open_map‚ü©,
  intros hf,
  rw [‚Üê function.comp.right_id f, ‚Üê h.self_comp_symm, ‚Üê function.comp.assoc],
  exact hf.comp h.symm.is_open_map,
end

/-- If two sets are equal, then they are homeomorphic. -/
def set_congr {s t : set Œ±} (h : s = t) : s ‚âÉ‚Çú t :=
{ continuous_to_fun := continuous_subtype_mk _ continuous_subtype_val,
  continuous_inv_fun := continuous_subtype_mk _ continuous_subtype_val,
  to_equiv := equiv.set_congr h }

/-- Sum of two homeomorphisms. -/
def sum_congr (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≥ ‚âÉ‚Çú Œ¥) : Œ± ‚äï Œ≥ ‚âÉ‚Çú Œ≤ ‚äï Œ¥ :=
{ continuous_to_fun  :=
  begin
    convert continuous_sum_rec (continuous_inl.comp h‚ÇÅ.continuous)
      (continuous_inr.comp h‚ÇÇ.continuous),
    ext x, cases x; refl,
  end,
  continuous_inv_fun :=
  begin
    convert continuous_sum_rec (continuous_inl.comp h‚ÇÅ.symm.continuous)
      (continuous_inr.comp h‚ÇÇ.symm.continuous),
    ext x, cases x; refl
  end,
  to_equiv := h‚ÇÅ.to_equiv.sum_congr h‚ÇÇ.to_equiv }

/-- Product of two homeomorphisms. -/
def prod_congr (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≥ ‚âÉ‚Çú Œ¥) : Œ± √ó Œ≥ ‚âÉ‚Çú Œ≤ √ó Œ¥ :=
{ continuous_to_fun  := (h‚ÇÅ.continuous.comp continuous_fst).prod_mk
    (h‚ÇÇ.continuous.comp continuous_snd),
  continuous_inv_fun := (h‚ÇÅ.symm.continuous.comp continuous_fst).prod_mk
    (h‚ÇÇ.symm.continuous.comp continuous_snd),
  to_equiv := h‚ÇÅ.to_equiv.prod_congr h‚ÇÇ.to_equiv }

@[simp] lemma prod_congr_symm (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≥ ‚âÉ‚Çú Œ¥) :
  (h‚ÇÅ.prod_congr h‚ÇÇ).symm = h‚ÇÅ.symm.prod_congr h‚ÇÇ.symm := rfl

@[simp] lemma coe_prod_congr (h‚ÇÅ : Œ± ‚âÉ‚Çú Œ≤) (h‚ÇÇ : Œ≥ ‚âÉ‚Çú Œ¥) :
  ‚áë(h‚ÇÅ.prod_congr h‚ÇÇ) = prod.map h‚ÇÅ h‚ÇÇ := rfl

section
variables (Œ± Œ≤ Œ≥)

/-- `Œ± √ó Œ≤` is homeomorphic to `Œ≤ √ó Œ±`. -/
def prod_comm : Œ± √ó Œ≤ ‚âÉ‚Çú Œ≤ √ó Œ± :=
{ continuous_to_fun  := continuous_snd.prod_mk continuous_fst,
  continuous_inv_fun := continuous_snd.prod_mk continuous_fst,
  to_equiv := equiv.prod_comm Œ± Œ≤ }

@[simp] lemma prod_comm_symm : (prod_comm Œ± Œ≤).symm = prod_comm Œ≤ Œ± := rfl
@[simp] lemma coe_prod_comm : ‚áë(prod_comm Œ± Œ≤) = prod.swap := rfl

/-- `(Œ± √ó Œ≤) √ó Œ≥` is homeomorphic to `Œ± √ó (Œ≤ √ó Œ≥)`. -/
def prod_assoc : (Œ± √ó Œ≤) √ó Œ≥ ‚âÉ‚Çú Œ± √ó (Œ≤ √ó Œ≥) :=
{ continuous_to_fun  := (continuous_fst.comp continuous_fst).prod_mk
    ((continuous_snd.comp continuous_fst).prod_mk continuous_snd),
  continuous_inv_fun := (continuous_fst.prod_mk (continuous_fst.comp continuous_snd)).prod_mk
    (continuous_snd.comp continuous_snd),
  to_equiv := equiv.prod_assoc Œ± Œ≤ Œ≥ }

/-- `Œ± √ó {*}` is homeomorphic to `Œ±`. -/
@[simps apply {fully_applied := ff}]
def prod_punit : Œ± √ó punit ‚âÉ‚Çú Œ± :=
{ to_equiv := equiv.prod_punit Œ±,
  continuous_to_fun := continuous_fst,
  continuous_inv_fun := continuous_id.prod_mk continuous_const }

/-- `{*} √ó Œ±` is homeomorphic to `Œ±`. -/
def punit_prod : punit √ó Œ± ‚âÉ‚Çú Œ± :=
(prod_comm _ _).trans (prod_punit _)

@[simp] lemma coe_punit_prod : ‚áë(punit_prod Œ±) = prod.snd := rfl

end

/-- `ulift Œ±` is homeomorphic to `Œ±`. -/
def {u v} ulift {Œ± : Type u} [topological_space Œ±] : ulift.{v u} Œ± ‚âÉ‚Çú Œ± :=
{ continuous_to_fun := continuous_ulift_down,
  continuous_inv_fun := continuous_ulift_up,
  to_equiv := equiv.ulift }

section distrib

/-- `(Œ± ‚äï Œ≤) √ó Œ≥` is homeomorphic to `Œ± √ó Œ≥ ‚äï Œ≤ √ó Œ≥`. -/
def sum_prod_distrib : (Œ± ‚äï Œ≤) √ó Œ≥ ‚âÉ‚Çú Œ± √ó Œ≥ ‚äï Œ≤ √ó Œ≥ :=
begin
  refine (homeomorph.homeomorph_of_continuous_open (equiv.sum_prod_distrib Œ± Œ≤ Œ≥).symm _ _).symm,
  { convert continuous_sum_rec
      ((continuous_inl.comp continuous_fst).prod_mk continuous_snd)
      ((continuous_inr.comp continuous_fst).prod_mk continuous_snd),
    ext1 x, cases x; refl, },
  { exact (is_open_map_sum
    (open_embedding_inl.prod open_embedding_id).is_open_map
    (open_embedding_inr.prod open_embedding_id).is_open_map) }
end

/-- `Œ± √ó (Œ≤ ‚äï Œ≥)` is homeomorphic to `Œ± √ó Œ≤ ‚äï Œ± √ó Œ≥`. -/
def prod_sum_distrib : Œ± √ó (Œ≤ ‚äï Œ≥) ‚âÉ‚Çú Œ± √ó Œ≤ ‚äï Œ± √ó Œ≥ :=
(prod_comm _ _).trans $
sum_prod_distrib.trans $
sum_congr (prod_comm _ _) (prod_comm _ _)

variables {Œπ : Type*} {œÉ : Œπ ‚Üí Type*} [Œ† i, topological_space (œÉ i)]

/-- `(Œ£ i, œÉ i) √ó Œ≤` is homeomorphic to `Œ£ i, (œÉ i √ó Œ≤)`. -/
def sigma_prod_distrib : ((Œ£ i, œÉ i) √ó Œ≤) ‚âÉ‚Çú (Œ£ i, (œÉ i √ó Œ≤)) :=
homeomorph.symm $
homeomorph_of_continuous_open (equiv.sigma_prod_distrib œÉ Œ≤).symm
  (continuous_sigma $ Œª i,
    (continuous_sigma_mk.comp continuous_fst).prod_mk continuous_snd)
  (is_open_map_sigma $ Œª i,
    (open_embedding_sigma_mk.prod open_embedding_id).is_open_map)

end distrib

/-- If `Œπ` has a unique element, then `Œπ ‚Üí Œ±` is homeomorphic to `Œ±`. -/
@[simps { fully_applied := ff }]
def fun_unique (Œπ Œ± : Type*) [unique Œπ] [topological_space Œ±] : (Œπ ‚Üí Œ±) ‚âÉ‚Çú Œ± :=
{ to_equiv := equiv.fun_unique Œπ Œ±,
  continuous_to_fun := continuous_apply _,
  continuous_inv_fun := continuous_pi (Œª _, continuous_id) }

/-- Homeomorphism between dependent functions `Œ† i : fin 2, Œ± i` and `Œ± 0 √ó Œ± 1`. -/
@[simps { fully_applied := ff }]
def {u} pi_fin_two (Œ± : fin 2 ‚Üí Type u) [Œ† i, topological_space (Œ± i)] : (Œ† i, Œ± i) ‚âÉ‚Çú Œ± 0 √ó Œ± 1 :=
{ to_equiv := pi_fin_two_equiv Œ±,
  continuous_to_fun := (continuous_apply 0).prod_mk (continuous_apply 1),
  continuous_inv_fun := continuous_pi $ fin.forall_fin_two.2 ‚ü®continuous_fst, continuous_snd‚ü© }

/-- Homeomorphism between `Œ±¬≤ = fin 2 ‚Üí Œ±` and `Œ± √ó Œ±`. -/
@[simps { fully_applied := ff }] def fin_two_arrow : (fin 2 ‚Üí Œ±) ‚âÉ‚Çú Œ± √ó Œ± :=
{ to_equiv := fin_two_arrow_equiv Œ±, ..  pi_fin_two (Œª _, Œ±) }

/--
A subset of a topological space is homeomorphic to its image under a homeomorphism.
-/
def image (e : Œ± ‚âÉ‚Çú Œ≤) (s : set Œ±) : s ‚âÉ‚Çú e '' s :=
{ continuous_to_fun := by continuity!,
  continuous_inv_fun := by continuity!,
  ..e.to_equiv.image s, }

end homeomorph

namespace continuous
variables [topological_space Œ±] [topological_space Œ≤]

lemma continuous_symm_of_equiv_compact_to_t2 [compact_space Œ±] [t2_space Œ≤]
  {f : Œ± ‚âÉ Œ≤} (hf : continuous f) : continuous f.symm :=
begin
  rw continuous_iff_is_closed,
  intros C hC,
  have hC' : is_closed (f '' C) := (hC.is_compact.image hf).is_closed,
  rwa equiv.image_eq_preimage at hC',
end

/-- Continuous equivalences from a compact space to a T2 space are homeomorphisms.

This is not true when T2 is weakened to T1
(see `continuous.homeo_of_equiv_compact_to_t2.t1_counterexample`). -/
@[simps]
def homeo_of_equiv_compact_to_t2 [compact_space Œ±] [t2_space Œ≤]
  {f : Œ± ‚âÉ Œ≤} (hf : continuous f) : Œ± ‚âÉ‚Çú Œ≤ :=
{ continuous_to_fun := hf,
  continuous_inv_fun := hf.continuous_symm_of_equiv_compact_to_t2,
  ..f }

end continuous
