/-
Copyright (c) 2018 Chris Hughes. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Chris Hughes, Abhimanyu Pallavi Sudhir, Jean Lo, Calle S√∂nne, Benjamin Davidson
-/
import analysis.special_functions.trigonometric.inverse
import analysis.special_functions.trigonometric.deriv

/-!
# derivatives of the inverse trigonometric functions

Derivatives of `arcsin` and `arccos`.
-/

noncomputable theory
open_locale classical topological_space filter
open set filter

open_locale real

namespace real

section arcsin

lemma deriv_arcsin_aux {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
  has_strict_deriv_at arcsin (1 / sqrt (1 - x ^ 2)) x ‚àß times_cont_diff_at ‚Ñù ‚ä§ arcsin x :=
begin
  cases h‚ÇÅ.lt_or_lt with h‚ÇÅ h‚ÇÅ,
  { have : 1 - x ^ 2 < 0, by nlinarith [h‚ÇÅ],
    rw [sqrt_eq_zero'.2 this.le, div_zero],
    have : arcsin =·∂†[ùìù x] Œª _, -(œÄ / 2) :=
      (gt_mem_nhds h‚ÇÅ).mono (Œª y hy, arcsin_of_le_neg_one hy.le),
    exact ‚ü®(has_strict_deriv_at_const _ _).congr_of_eventually_eq this.symm,
      times_cont_diff_at_const.congr_of_eventually_eq this‚ü© },
  cases h‚ÇÇ.lt_or_lt with h‚ÇÇ h‚ÇÇ,
  { have : 0 < sqrt (1 - x ^ 2) := sqrt_pos.2 (by nlinarith [h‚ÇÅ, h‚ÇÇ]),
    simp only [‚Üê cos_arcsin h‚ÇÅ.le h‚ÇÇ.le, one_div] at this ‚ä¢,
    exact ‚ü®sin_local_homeomorph.has_strict_deriv_at_symm ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© this.ne'
      (has_strict_deriv_at_sin _),
      sin_local_homeomorph.times_cont_diff_at_symm_deriv this.ne' ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
        (has_deriv_at_sin _) times_cont_diff_sin.times_cont_diff_at‚ü© },
  { have : 1 - x ^ 2 < 0, by nlinarith [h‚ÇÇ],
    rw [sqrt_eq_zero'.2 this.le, div_zero],
    have : arcsin =·∂†[ùìù x] Œª _, œÄ / 2 := (lt_mem_nhds h‚ÇÇ).mono (Œª y hy, arcsin_of_one_le hy.le),
    exact ‚ü®(has_strict_deriv_at_const _ _).congr_of_eventually_eq this.symm,
      times_cont_diff_at_const.congr_of_eventually_eq this‚ü© }
end

lemma has_strict_deriv_at_arcsin {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
  has_strict_deriv_at arcsin (1 / sqrt (1 - x ^ 2)) x :=
(deriv_arcsin_aux h‚ÇÅ h‚ÇÇ).1

lemma has_deriv_at_arcsin {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
  has_deriv_at arcsin (1 / sqrt (1 - x ^ 2)) x :=
(has_strict_deriv_at_arcsin h‚ÇÅ h‚ÇÇ).has_deriv_at

lemma times_cont_diff_at_arcsin {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) {n : with_top ‚Ñï} :
  times_cont_diff_at ‚Ñù n arcsin x :=
(deriv_arcsin_aux h‚ÇÅ h‚ÇÇ).2.of_le le_top

lemma has_deriv_within_at_arcsin_Ici {x : ‚Ñù} (h : x ‚â† -1) :
  has_deriv_within_at arcsin (1 / sqrt (1 - x ^ 2)) (Ici x) x :=
begin
  rcases em (x = 1) with (rfl|h'),
  { convert (has_deriv_within_at_const _ _ (œÄ / 2)).congr _ _;
      simp [arcsin_of_one_le] { contextual := tt } },
  { exact (has_deriv_at_arcsin h h').has_deriv_within_at }
end

lemma has_deriv_within_at_arcsin_Iic {x : ‚Ñù} (h : x ‚â† 1) :
  has_deriv_within_at arcsin (1 / sqrt (1 - x ^ 2)) (Iic x) x :=
begin
  rcases em (x = -1) with (rfl|h'),
  { convert (has_deriv_within_at_const _ _ (-(œÄ / 2))).congr _ _;
      simp [arcsin_of_le_neg_one] { contextual := tt } },
  { exact (has_deriv_at_arcsin h' h).has_deriv_within_at }
end

lemma differentiable_within_at_arcsin_Ici {x : ‚Ñù} :
  differentiable_within_at ‚Ñù arcsin (Ici x) x ‚Üî x ‚â† -1 :=
begin
  refine ‚ü®_, Œª h, (has_deriv_within_at_arcsin_Ici h).differentiable_within_at‚ü©,
  rintro h rfl,
  have : sin ‚àò arcsin =·∂†[ùìù[‚â•] (-1 : ‚Ñù)] id,
  { filter_upwards [Icc_mem_nhds_within_Ici ‚ü®le_rfl, neg_lt_self (@zero_lt_one ‚Ñù _ _)‚ü©]
      with x using sin_arcsin', },
  have := h.has_deriv_within_at.sin.congr_of_eventually_eq this.symm (by simp),
  simpa using (unique_diff_on_Ici _ _ left_mem_Ici).eq_deriv _ this (has_deriv_within_at_id _ _)
end

lemma differentiable_within_at_arcsin_Iic {x : ‚Ñù} :
  differentiable_within_at ‚Ñù arcsin (Iic x) x ‚Üî x ‚â† 1 :=
begin
  refine ‚ü®Œª h, _, Œª h, (has_deriv_within_at_arcsin_Iic h).differentiable_within_at‚ü©,
  rw [‚Üê neg_neg x, ‚Üê image_neg_Ici] at h,
  have := (h.comp (-x) differentiable_within_at_id.neg (maps_to_image _ _)).neg,
  simpa [(‚àò), differentiable_within_at_arcsin_Ici] using this
end

lemma differentiable_at_arcsin {x : ‚Ñù} :
  differentiable_at ‚Ñù arcsin x ‚Üî x ‚â† -1 ‚àß x ‚â† 1 :=
‚ü®Œª h, ‚ü®differentiable_within_at_arcsin_Ici.1 h.differentiable_within_at,
  differentiable_within_at_arcsin_Iic.1 h.differentiable_within_at‚ü©,
  Œª h, (has_deriv_at_arcsin h.1 h.2).differentiable_at‚ü©

@[simp] lemma deriv_arcsin : deriv arcsin = Œª x, 1 / sqrt (1 - x ^ 2) :=
begin
  funext x,
  by_cases h : x ‚â† -1 ‚àß x ‚â† 1,
  { exact (has_deriv_at_arcsin h.1 h.2).deriv },
  { rw [deriv_zero_of_not_differentiable_at (mt differentiable_at_arcsin.1 h)],
    simp only [not_and_distrib, ne.def, not_not] at h,
    rcases h with (rfl|rfl); simp }
end

lemma differentiable_on_arcsin : differentiable_on ‚Ñù arcsin {-1, 1}·∂ú :=
Œª x hx, (differentiable_at_arcsin.2
  ‚ü®Œª h, hx (or.inl h), Œª h, hx (or.inr h)‚ü©).differentiable_within_at

lemma times_cont_diff_on_arcsin {n : with_top ‚Ñï} :
  times_cont_diff_on ‚Ñù n arcsin {-1, 1}·∂ú :=
Œª x hx, (times_cont_diff_at_arcsin (mt or.inl hx) (mt or.inr hx)).times_cont_diff_within_at

lemma times_cont_diff_at_arcsin_iff {x : ‚Ñù} {n : with_top ‚Ñï} :
  times_cont_diff_at ‚Ñù n arcsin x ‚Üî n = 0 ‚à® (x ‚â† -1 ‚àß x ‚â† 1) :=
‚ü®Œª h, or_iff_not_imp_left.2 $ Œª hn, differentiable_at_arcsin.1 $ h.differentiable_at $
  with_top.one_le_iff_pos.2 (pos_iff_ne_zero.2 hn),
  Œª h, h.elim (Œª hn, hn.symm ‚ñ∏ (times_cont_diff_zero.2 continuous_arcsin).times_cont_diff_at) $
    Œª hx, times_cont_diff_at_arcsin hx.1 hx.2‚ü©

end arcsin

section arccos

lemma has_strict_deriv_at_arccos {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
  has_strict_deriv_at arccos (-(1 / sqrt (1 - x ^ 2))) x :=
(has_strict_deriv_at_arcsin h‚ÇÅ h‚ÇÇ).const_sub (œÄ / 2)

lemma has_deriv_at_arccos {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) :
  has_deriv_at arccos (-(1 / sqrt (1 - x ^ 2))) x :=
(has_deriv_at_arcsin h‚ÇÅ h‚ÇÇ).const_sub (œÄ / 2)

lemma times_cont_diff_at_arccos {x : ‚Ñù} (h‚ÇÅ : x ‚â† -1) (h‚ÇÇ : x ‚â† 1) {n : with_top ‚Ñï} :
  times_cont_diff_at ‚Ñù n arccos x :=
times_cont_diff_at_const.sub (times_cont_diff_at_arcsin h‚ÇÅ h‚ÇÇ)

lemma has_deriv_within_at_arccos_Ici {x : ‚Ñù} (h : x ‚â† -1) :
  has_deriv_within_at arccos (-(1 / sqrt (1 - x ^ 2))) (Ici x) x :=
(has_deriv_within_at_arcsin_Ici h).const_sub _

lemma has_deriv_within_at_arccos_Iic {x : ‚Ñù} (h : x ‚â† 1) :
  has_deriv_within_at arccos (-(1 / sqrt (1 - x ^ 2))) (Iic x) x :=
(has_deriv_within_at_arcsin_Iic h).const_sub _

lemma differentiable_within_at_arccos_Ici {x : ‚Ñù} :
  differentiable_within_at ‚Ñù arccos (Ici x) x ‚Üî x ‚â† -1 :=
(differentiable_within_at_const_sub_iff _).trans differentiable_within_at_arcsin_Ici

lemma differentiable_within_at_arccos_Iic {x : ‚Ñù} :
  differentiable_within_at ‚Ñù arccos (Iic x) x ‚Üî x ‚â† 1 :=
(differentiable_within_at_const_sub_iff _).trans differentiable_within_at_arcsin_Iic

lemma differentiable_at_arccos {x : ‚Ñù} :
  differentiable_at ‚Ñù arccos x ‚Üî x ‚â† -1 ‚àß x ‚â† 1 :=
(differentiable_at_const_sub_iff _).trans differentiable_at_arcsin

@[simp] lemma deriv_arccos : deriv arccos = Œª x, -(1 / sqrt (1 - x ^ 2)) :=
funext $ Œª x, (deriv_const_sub _).trans $ by simp only [deriv_arcsin]

lemma differentiable_on_arccos : differentiable_on ‚Ñù arccos {-1, 1}·∂ú :=
differentiable_on_arcsin.const_sub _

lemma times_cont_diff_on_arccos {n : with_top ‚Ñï} :
  times_cont_diff_on ‚Ñù n arccos {-1, 1}·∂ú :=
times_cont_diff_on_const.sub times_cont_diff_on_arcsin

lemma times_cont_diff_at_arccos_iff {x : ‚Ñù} {n : with_top ‚Ñï} :
  times_cont_diff_at ‚Ñù n arccos x ‚Üî n = 0 ‚à® (x ‚â† -1 ‚àß x ‚â† 1) :=
by refine iff.trans ‚ü®Œª h, _, Œª h, _‚ü© times_cont_diff_at_arcsin_iff;
  simpa [arccos] using (@times_cont_diff_at_const _ _ _ _ _ _ _ _ _ _ (œÄ / 2)).sub h

end arccos

end real
