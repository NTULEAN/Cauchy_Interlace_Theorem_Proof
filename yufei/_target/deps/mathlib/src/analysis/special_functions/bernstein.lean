/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import ring_theory.polynomial.bernstein
import topology.continuous_function.polynomial

/-!
# Bernstein approximations and Weierstrass' theorem

We prove that the Bernstein approximations
```
‚àë k : fin (n+1), f (k/n : ‚Ñù) * n.choose k * x^k * (1-x)^(n-k)
```
for a continuous function `f : C([0,1], ‚Ñù)` converge uniformly to `f` as `n` tends to infinity.

Our proof follows [Richard Beals' *Analysis, an introduction*][beals-analysis], ¬ß7D.
The original proof, due to [Bernstein](bernstein1912) in 1912, is probabilistic,
and relies on Bernoulli's theorem,
which gives bounds for how quickly the observed frequencies in a
Bernoulli trial approach the underlying probability.

The proof here does not directly rely on Bernoulli's theorem,
but can also be given a probabilistic account.
* Consider a weighted coin which with probability `x` produces heads,
  and with probability `1-x` produces tails.
* The value of `bernstein n k x` is the probability that
  such a coin gives exactly `k` heads in a sequence of `n` tosses.
* If such an appearance of `k` heads results in a payoff of `f(k / n)`,
  the `n`-th Bernstein approximation for `f` evaluated at `x` is the expected payoff.
* The main estimate in the proof bounds the probability that
  the observed frequency of heads differs from `x` by more than some `Œ¥`,
  obtaining a bound of `(4 * n * Œ¥^2)‚Åª¬π`, irrespective of `x`.
* This ensures that for `n` large, the Bernstein approximation is (uniformly) close to the
  payoff function `f`.

(You don't need to think in these terms to follow the proof below: it's a giant `calc` block!)

This result proves Weierstrass' theorem that polynomials are dense in `C([0,1], ‚Ñù)`,
although we defer an abstract statement of this until later.
-/

noncomputable theory

open_locale classical
open_locale big_operators
open_locale bounded_continuous_function
open_locale unit_interval

/--
The Bernstein polynomials, as continuous functions on `[0,1]`.
-/
def bernstein (n ŒΩ : ‚Ñï) : C(I, ‚Ñù) :=
(bernstein_polynomial ‚Ñù n ŒΩ).to_continuous_map_on I

@[simp] lemma bernstein_apply (n ŒΩ : ‚Ñï) (x : I) :
  bernstein n ŒΩ x = n.choose ŒΩ * x^ŒΩ * (1-x)^(n-ŒΩ) :=
begin
  dsimp [bernstein, polynomial.to_continuous_map_on, polynomial.to_continuous_map,
    bernstein_polynomial],
  simp,
end

lemma bernstein_nonneg {n ŒΩ : ‚Ñï} {x : I} :
  0 ‚â§ bernstein n ŒΩ x :=
begin
  simp only [bernstein_apply],
  exact mul_nonneg
    (mul_nonneg (nat.cast_nonneg _) (pow_nonneg (by unit_interval) _))
    (pow_nonneg (by unit_interval) _),
end

/-!
We now give a slight reformulation of `bernstein_polynomial.variance`.
-/

namespace bernstein

/--
Send `k : fin (n+1)` to the equally spaced points `k/n` in the unit interval.
-/
def z {n : ‚Ñï} (k : fin (n+1)) : I :=
‚ü®(k : ‚Ñù) / n,
  begin
    cases n,
    { norm_num },
    { have h‚ÇÅ : 0 < (n.succ : ‚Ñù) := by exact_mod_cast (nat.succ_pos _),
      have h‚ÇÇ : ‚Üëk ‚â§ n.succ := by exact_mod_cast (fin.le_last k),
      rw [set.mem_Icc, le_div_iff h‚ÇÅ, div_le_iff h‚ÇÅ],
      norm_cast,
      simp [h‚ÇÇ], },
  end‚ü©

local postfix `/‚Çô`:90 := z

lemma probability (n : ‚Ñï) (x : I) :
  ‚àë k : fin (n+1), bernstein n k x = 1 :=
begin
  have := bernstein_polynomial.sum ‚Ñù n,
  apply_fun (Œª p, polynomial.aeval (x : ‚Ñù) p) at this,
  simp [alg_hom.map_sum, finset.sum_range] at this,
  exact this,
end

lemma variance {n : ‚Ñï} (h : 0 < (n : ‚Ñù)) (x : I) :
  ‚àë k : fin (n+1), (x - k/‚Çô : ‚Ñù)^2 * bernstein n k x = x * (1-x) / n :=
begin
  have h' : (n : ‚Ñù) ‚â† 0 := ne_of_gt h,
  apply_fun (Œª x : ‚Ñù, x * n) using group_with_zero.mul_right_injective h',
  apply_fun (Œª x : ‚Ñù, x * n) using group_with_zero.mul_right_injective h',
  dsimp,
  conv_lhs { simp only [finset.sum_mul, z], },
  conv_rhs { rw div_mul_cancel _ h', },
  have := bernstein_polynomial.variance ‚Ñù n,
  apply_fun (Œª p, polynomial.aeval (x : ‚Ñù) p) at this,
  simp [alg_hom.map_sum, finset.sum_range, ‚Üêpolynomial.nat_cast_mul] at this,
  convert this using 1,
  { congr' 1, funext k,
    rw [mul_comm _ (n : ‚Ñù), mul_comm _ (n : ‚Ñù), ‚Üêmul_assoc, ‚Üêmul_assoc],
    congr' 1,
    field_simp [h],
    ring, },
  { ring, },
end

end bernstein

open bernstein

local postfix `/‚Çô`:2000 := z

/--
The `n`-th approximation of a continuous function on `[0,1]` by Bernstein polynomials,
given by `‚àë k, f (k/n) * bernstein n k x`.
-/
def bernstein_approximation (n : ‚Ñï) (f : C(I, ‚Ñù)) : C(I, ‚Ñù) :=
‚àë k : fin (n+1), f k/‚Çô ‚Ä¢ bernstein n k

/-!
We now set up some of the basic machinery of the proof that the Bernstein approximations
converge uniformly.

A key player is the set `S f Œµ h n x`,
for some function `f : C(I, ‚Ñù)`, `h : 0 < Œµ`, `n : ‚Ñï` and `x : I`.

This is the set of points `k` in `fin (n+1)` such that
`k/n` is within `Œ¥` of `x`, where `Œ¥` is the modulus of uniform continuity for `f`,
chosen so `|f x - f y| < Œµ/2` when `|x - y| < Œ¥`.

We show that if `k ‚àâ S`, then `1 ‚â§ Œ¥^-2 * (x - k/n)^2`.
-/

namespace bernstein_approximation

@[simp] lemma apply (n : ‚Ñï) (f : C(I, ‚Ñù)) (x : I) :
  bernstein_approximation n f x = ‚àë k : fin (n+1), f k/‚Çô * bernstein n k x :=
by simp [bernstein_approximation]

/--
The modulus of (uniform) continuity for `f`, chosen so `|f x - f y| < Œµ/2` when `|x - y| < Œ¥`.
-/
def Œ¥ (f : C(I, ‚Ñù)) (Œµ : ‚Ñù) (h : 0 < Œµ) : ‚Ñù := f.modulus (Œµ/2) (half_pos h)

/--
The set of points `k` so `k/n` is within `Œ¥` of `x`.
-/
def S (f : C(I, ‚Ñù)) (Œµ : ‚Ñù) (h : 0 < Œµ) (n : ‚Ñï) (x : I) : finset (fin (n+1)) :=
{ k : fin (n+1) | dist k/‚Çô x < Œ¥ f Œµ h }.to_finset

/--
If `k ‚àà S`, then `f(k/n)` is close to `f x`.
-/
lemma lt_of_mem_S
  {f : C(I, ‚Ñù)} {Œµ : ‚Ñù} {h : 0 < Œµ} {n : ‚Ñï} {x : I} {k : fin (n+1)} (m : k ‚àà S f Œµ h n x) :
  |f k/‚Çô - f x| < Œµ/2 :=
begin
  apply f.dist_lt_of_dist_lt_modulus (Œµ/2) (half_pos h),
  simpa [S] using m,
end

/--
If `k ‚àâ S`, then as `Œ¥ ‚â§ |x - k/n|`, we have the inequality `1 ‚â§ Œ¥^-2 * (x - k/n)^2`.
This particular formulation will be helpful later.
-/
lemma le_of_mem_S_compl
  {f : C(I, ‚Ñù)} {Œµ : ‚Ñù} {h : 0 < Œµ} {n : ‚Ñï} {x : I} {k : fin (n+1)} (m : k ‚àà (S f Œµ h n x)·∂ú) :
  (1 : ‚Ñù) ‚â§ (Œ¥ f Œµ h)^(-2 : ‚Ñ§) * (x - k/‚Çô) ^ 2 :=
begin
  simp only [finset.mem_compl, not_lt, set.mem_to_finset, set.mem_set_of_eq, S] at m,
  field_simp,
  erw [le_div_iff (pow_pos f.modulus_pos 2), one_mul],
  apply sq_le_sq,
  rw abs_eq_self.mpr (le_of_lt f.modulus_pos),
  rw [dist_comm] at m,
  exact m,
end

end bernstein_approximation

open bernstein_approximation
open bounded_continuous_function
open filter

open_locale topological_space

/--
The Bernstein approximations
```
‚àë k : fin (n+1), f (k/n : ‚Ñù) * n.choose k * x^k * (1-x)^(n-k)
```
for a continuous function `f : C([0,1], ‚Ñù)` converge uniformly to `f` as `n` tends to infinity.

This is the proof given in [Richard Beals' *Analysis, an introduction*][beals-analysis], ¬ß7D,
and reproduced on wikipedia.
-/
theorem bernstein_approximation_uniform (f : C(I, ‚Ñù)) :
  tendsto (Œª n : ‚Ñï, bernstein_approximation n f) at_top (ùìù f) :=
begin
  simp only [metric.nhds_basis_ball.tendsto_right_iff, metric.mem_ball, dist_eq_norm],
  intros Œµ h,
  let Œ¥ := Œ¥ f Œµ h,
  have nhds_zero := tendsto_const_div_at_top_nhds_0_nat (2 * ‚à•f‚à• * Œ¥ ^ (-2 : ‚Ñ§)),
  filter_upwards [nhds_zero.eventually (gt_mem_nhds (half_pos h)), eventually_gt_at_top 0]
    with n nh npos',
  have npos : 0 < (n:‚Ñù) := by exact_mod_cast npos',
  -- Two easy inequalities we'll need later:
  have w‚ÇÅ : 0 ‚â§ 2 * ‚à•f‚à• := mul_nonneg (by norm_num) (norm_nonneg f),
  have w‚ÇÇ : 0 ‚â§ 2 * ‚à•f‚à• * Œ¥^(-2 : ‚Ñ§) := mul_nonneg w‚ÇÅ pow_minus_two_nonneg,
  -- As `[0,1]` is compact, it suffices to check the inequality pointwise.
  rw (continuous_map.norm_lt_iff _ h),
  intro x,
  -- The idea is to split up the sum over `k` into two sets,
  -- `S`, where `x - k/n < Œ¥`, and its complement.
  let S := S f Œµ h n x,
  calc
    |(bernstein_approximation n f - f) x|
        = |bernstein_approximation n f x - f x|
                              : rfl
    ... = |bernstein_approximation n f x - f x * 1|
                              : by rw mul_one
    ... = |bernstein_approximation n f x - f x * (‚àë k : fin (n+1), bernstein n k x)|
                              : by rw bernstein.probability
    ... = |‚àë k : fin (n+1), (f k/‚Çô - f x) * bernstein n k x|
                              : by simp [bernstein_approximation, finset.mul_sum, sub_mul]
    ... ‚â§ ‚àë k : fin (n+1), |(f k/‚Çô - f x) * bernstein n k x|
                              : finset.abs_sum_le_sum_abs _ _
    ... = ‚àë k : fin (n+1), |f k/‚Çô - f x| * bernstein n k x
                              : by simp_rw [abs_mul, abs_eq_self.mpr bernstein_nonneg]
    ... = ‚àë k in S, |f k/‚Çô - f x| * bernstein n k x +
          ‚àë k in S·∂ú, |f k/‚Çô - f x| * bernstein n k x
                              : (S.sum_add_sum_compl _).symm
    -- We'll now deal with the terms in `S` and the terms in `S·∂ú` in separate calc blocks.
    ... < Œµ/2 + Œµ/2 : add_lt_add_of_le_of_lt _ _
    ... = Œµ : add_halves Œµ,
    { -- We now work on the terms in `S`: uniform continuity and `bernstein.probability`
      -- quickly give us a bound.
      calc ‚àë k in S, |f k/‚Çô - f x| * bernstein n k x
          ‚â§ ‚àë k in S, Œµ/2 * bernstein n k x
                                :  finset.sum_le_sum
                                    (Œª k m, (mul_le_mul_of_nonneg_right (le_of_lt (lt_of_mem_S m))
                                      bernstein_nonneg))
      ... = Œµ/2 * ‚àë k in S, bernstein n k x
                                : by rw finset.mul_sum
      -- In this step we increase the sum over `S` back to a sum over all of `fin (n+1)`,
      -- so that we can use `bernstein.probability`.
      ... ‚â§ Œµ/2 * ‚àë k : fin (n+1), bernstein n k x
                                : mul_le_mul_of_nonneg_left
                                    (finset.sum_le_univ_sum_of_nonneg (Œª k, bernstein_nonneg))
                                    (le_of_lt (half_pos h))
      ... = Œµ/2 : by rw [bernstein.probability, mul_one] },
      { -- We now turn to working on `S·∂ú`: we control the difference term just using `‚à•f‚à•`,
        -- and then insert a `Œ¥^(-2) * (x - k/n)^2` factor
        -- (which is at least one because we are not in `S`).
        calc ‚àë k in S·∂ú, |f k/‚Çô - f x| * bernstein n k x
            ‚â§ ‚àë k in S·∂ú, (2 * ‚à•f‚à•) * bernstein n k x
                                  : finset.sum_le_sum
                                      (Œª k m, mul_le_mul_of_nonneg_right (f.dist_le_two_norm _ _)
                                        bernstein_nonneg)
        ... = (2 * ‚à•f‚à•) * ‚àë k in S·∂ú, bernstein n k x
                                  : by rw finset.mul_sum
        ... ‚â§ (2 * ‚à•f‚à•) * ‚àë k in S·∂ú, Œ¥^(-2 : ‚Ñ§) * (x - k/‚Çô)^2 * bernstein n k x
                                  : mul_le_mul_of_nonneg_left
                                      (finset.sum_le_sum (Œª k m, begin
                                        conv_lhs { rw ‚Üêone_mul (bernstein _ _ _), },
                                        exact mul_le_mul_of_nonneg_right
                                          (le_of_mem_S_compl m) bernstein_nonneg,
                                      end)) w‚ÇÅ
        -- Again enlarging the sum from `S·∂ú` to all of `fin (n+1)`
        ... ‚â§ (2 * ‚à•f‚à•) * ‚àë k : fin (n+1), Œ¥^(-2 : ‚Ñ§) * (x - k/‚Çô)^2 * bernstein n k x
                                  : mul_le_mul_of_nonneg_left
                                      (finset.sum_le_univ_sum_of_nonneg
                                        (Œª k, mul_nonneg
                                          (mul_nonneg pow_minus_two_nonneg (sq_nonneg _))
                                          bernstein_nonneg)) w‚ÇÅ
        ... = (2 * ‚à•f‚à•) * Œ¥^(-2 : ‚Ñ§) * ‚àë k : fin (n+1), (x - k/‚Çô)^2 * bernstein n k x
                                  : by conv_rhs
                                    { rw [mul_assoc, finset.mul_sum], simp only [‚Üêmul_assoc], }
        -- `bernstein.variance` and `x ‚àà [0,1]` gives the uniform bound
        ... = (2 * ‚à•f‚à•) * Œ¥^(-2 : ‚Ñ§) * x * (1-x) / n
                                  : by { rw variance npos, ring, }
        ... ‚â§ (2 * ‚à•f‚à•) * Œ¥^(-2 : ‚Ñ§) / n
                                  : (div_le_div_right npos).mpr
                                    begin
                                      apply mul_nonneg_le_one_le w‚ÇÇ,
                                      apply mul_nonneg_le_one_le w‚ÇÇ le_rfl,
                                      all_goals { unit_interval, },
                                    end
        ... < Œµ/2 : nh, }
end
