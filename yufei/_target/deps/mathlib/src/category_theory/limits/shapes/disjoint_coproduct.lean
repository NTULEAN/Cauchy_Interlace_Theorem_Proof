/-
Copyright (c) 2021 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.limits.shapes.binary_products
import category_theory.limits.shapes.pullbacks

/-!
# Disjoint coproducts

Defines disjoint coproducts: coproducts where the intersection is initial and the coprojections
are monic.
Shows that a category with disjoint coproducts is `initial_mono_class`.

## TODO

* Adapt this to the infinitary (small) version: This is one of the conditions in Giraud's theorem
  characterising sheaf topoi.
* Construct examples (and counterexamples?), eg Type, Vec.
* Define extensive categories, and show every extensive category has disjoint coproducts.
* Define coherent categories and use this to define positive coherent categories.
-/

universes v u u‚ÇÇ

namespace category_theory
namespace limits

open category

variables {C : Type u} [category.{v} C]

/--
Given any pullback diagram of the form

Z  ‚ü∂  X‚ÇÅ
‚Üì      ‚Üì
X‚ÇÇ ‚ü∂  X

where `X‚ÇÅ ‚ü∂ X ‚Üê X‚ÇÇ` is a coproduct diagram, then `Z` is initial, and both `X‚ÇÅ ‚ü∂ X` and `X‚ÇÇ ‚ü∂ X`
are mono.
-/
class coproduct_disjoint (X‚ÇÅ X‚ÇÇ : C) :=
(is_initial_of_is_pullback_of_is_coproduct :
  ‚àÄ {X Z} {pX‚ÇÅ : X‚ÇÅ ‚ü∂ X} {pX‚ÇÇ : X‚ÇÇ ‚ü∂ X} {f : Z ‚ü∂ X‚ÇÅ} {g : Z ‚ü∂ X‚ÇÇ}
    (cX : is_colimit (binary_cofan.mk pX‚ÇÅ pX‚ÇÇ)) {comm : f ‚â´ pX‚ÇÅ = g ‚â´ pX‚ÇÇ},
    is_limit (pullback_cone.mk _ _ comm) ‚Üí is_initial Z)
(mono_inl : ‚àÄ X (X‚ÇÅ : X‚ÇÅ ‚ü∂ X) (X‚ÇÇ : X‚ÇÇ ‚ü∂ X) (cX : is_colimit (binary_cofan.mk X‚ÇÅ X‚ÇÇ)), mono X‚ÇÅ)
(mono_inr : ‚àÄ X (X‚ÇÅ : X‚ÇÅ ‚ü∂ X) (X‚ÇÇ : X‚ÇÇ ‚ü∂ X) (cX : is_colimit (binary_cofan.mk X‚ÇÅ X‚ÇÇ)), mono X‚ÇÇ)

/--
If the coproduct of `X‚ÇÅ` and `X‚ÇÇ` is disjoint, then given any pullback square

Z  ‚ü∂  X‚ÇÅ
‚Üì      ‚Üì
X‚ÇÇ ‚ü∂  X

where `X‚ÇÅ ‚ü∂ X ‚Üê X‚ÇÇ` is a coproduct, then `Z` is initial.
-/
def is_initial_of_is_pullback_of_is_coproduct {Z X‚ÇÅ X‚ÇÇ X : C} [coproduct_disjoint X‚ÇÅ X‚ÇÇ]
  {pX‚ÇÅ : X‚ÇÅ ‚ü∂ X} {pX‚ÇÇ : X‚ÇÇ ‚ü∂ X} (cX : is_colimit (binary_cofan.mk pX‚ÇÅ pX‚ÇÇ))
  {f : Z ‚ü∂ X‚ÇÅ} {g : Z ‚ü∂ X‚ÇÇ} {comm : f ‚â´ pX‚ÇÅ = g ‚â´ pX‚ÇÇ}
  (cZ : is_limit (pullback_cone.mk _ _ comm)) :
  is_initial Z :=
coproduct_disjoint.is_initial_of_is_pullback_of_is_coproduct cX cZ

/--
If the coproduct of `X‚ÇÅ` and `X‚ÇÇ` is disjoint, then given any pullback square

Z  ‚ü∂  X‚ÇÅ
‚Üì       ‚Üì
X‚ÇÇ ‚ü∂  X‚ÇÅ ‚®ø X‚ÇÇ

`Z` is initial.
-/
noncomputable def is_initial_of_is_pullback_of_coproduct {Z X‚ÇÅ X‚ÇÇ : C}
  [has_binary_coproduct X‚ÇÅ X‚ÇÇ] [coproduct_disjoint X‚ÇÅ X‚ÇÇ]
  {f : Z ‚ü∂ X‚ÇÅ} {g : Z ‚ü∂ X‚ÇÇ} {comm : f ‚â´ (coprod.inl : X‚ÇÅ ‚ü∂ _ ‚®ø X‚ÇÇ) = g ‚â´ coprod.inr}
  (cZ : is_limit (pullback_cone.mk _ _ comm)) :
  is_initial Z :=
coproduct_disjoint.is_initial_of_is_pullback_of_is_coproduct (coprod_is_coprod _ _) cZ

/--
If the coproduct of `X‚ÇÅ` and `X‚ÇÇ` is disjoint, then provided `X‚ÇÅ ‚ü∂ X ‚Üê X‚ÇÇ` is a coproduct the
pullback is an initial object:

        X‚ÇÅ
        ‚Üì
X‚ÇÇ ‚ü∂  X
-/
noncomputable def is_initial_of_pullback_of_is_coproduct {X X‚ÇÅ X‚ÇÇ : C} [coproduct_disjoint X‚ÇÅ X‚ÇÇ]
  {pX‚ÇÅ : X‚ÇÅ ‚ü∂ X} {pX‚ÇÇ : X‚ÇÇ ‚ü∂ X} [has_pullback pX‚ÇÅ pX‚ÇÇ]
  (cX : is_colimit (binary_cofan.mk pX‚ÇÅ pX‚ÇÇ)) :
  is_initial (pullback pX‚ÇÅ pX‚ÇÇ) :=
coproduct_disjoint.is_initial_of_is_pullback_of_is_coproduct cX (pullback_is_pullback _ _)

/--
If the coproduct of `X‚ÇÅ` and `X‚ÇÇ` is disjoint, the pullback of `X‚ÇÅ ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ` and `X‚ÇÇ ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ`
is initial.
-/
noncomputable def is_initial_of_pullback_of_coproduct {X‚ÇÅ X‚ÇÇ : C}
  [has_binary_coproduct X‚ÇÅ X‚ÇÇ] [coproduct_disjoint X‚ÇÅ X‚ÇÇ]
    [has_pullback (coprod.inl : X‚ÇÅ ‚ü∂ _ ‚®ø X‚ÇÇ) coprod.inr] :
  is_initial (pullback (coprod.inl : X‚ÇÅ ‚ü∂ _ ‚®ø X‚ÇÇ) coprod.inr) :=
is_initial_of_is_pullback_of_coproduct (pullback_is_pullback _ _)

instance {X‚ÇÅ X‚ÇÇ : C} [has_binary_coproduct X‚ÇÅ X‚ÇÇ] [coproduct_disjoint X‚ÇÅ X‚ÇÇ] :
  mono (coprod.inl : X‚ÇÅ ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ) :=
coproduct_disjoint.mono_inl _ _ _ (coprod_is_coprod _ _)
instance {X‚ÇÅ X‚ÇÇ : C} [has_binary_coproduct X‚ÇÅ X‚ÇÇ] [coproduct_disjoint X‚ÇÅ X‚ÇÇ] :
  mono (coprod.inr : X‚ÇÇ ‚ü∂ X‚ÇÅ ‚®ø X‚ÇÇ) :=
coproduct_disjoint.mono_inr _ _ _ (coprod_is_coprod _ _)

/-- `C` has disjoint coproducts if every coproduct is disjoint. -/
class coproducts_disjoint (C : Type u) [category.{v} C] :=
(coproduct_disjoint : ‚àÄ (X Y : C), coproduct_disjoint X Y)

attribute [instance, priority 999] coproducts_disjoint.coproduct_disjoint

/-- If `C` has disjoint coproducts, any morphism out of initial is mono. Note it isn't true in
general that `C` has strict initial objects, for instance consider the category of types and
partial functions. -/
lemma initial_mono_class_of_disjoint_coproducts [coproducts_disjoint C] : initial_mono_class C :=
{ is_initial_mono_from := Œª I X hI,
    coproduct_disjoint.mono_inl _ _ (ùüô X)
      { desc := Œª (s : binary_cofan _ _), s.inr,
        fac' := Œª s j, walking_pair.cases_on j (hI.hom_ext _ _) (id_comp _),
        uniq' := Œª (s : binary_cofan _ _) m w, (id_comp _).symm.trans (w walking_pair.right) } }

end limits
end category_theory
