/-
Copyright (c) 2019 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Justus Springer
-/
import order.complete_lattice
import category_theory.limits.shapes.pullbacks
import category_theory.category.preorder
import category_theory.limits.shapes.products
import category_theory.limits.shapes.finite_limits

/-!
# Limits in lattice categories are given by infimums and supremums.
-/

universes u

open category_theory
open category_theory.limits

namespace category_theory.limits.complete_lattice

section semilattice

variables {Œ± : Type u}

variables {J : Type u} [small_category J] [fin_category J]

/--
The limit cone over any functor from a finite diagram into a `semilattice_inf` with `order_top`.
-/
def finite_limit_cone [semilattice_inf Œ±] [order_top Œ±] (F : J ‚•§ Œ±) : limit_cone F :=
{ cone :=
  { X := finset.univ.inf F.obj,
    œÄ := { app := Œª j, hom_of_le (finset.inf_le (fintype.complete _)) } },
  is_limit := { lift := Œª s, hom_of_le (finset.le_inf (Œª j _, (s.œÄ.app j).down.down)) } }

/--
The colimit cocone over any functor from a finite diagram into a `semilattice_sup` with `order_bot`.
-/
def finite_colimit_cocone [semilattice_sup Œ±] [order_bot Œ±] (F : J ‚•§ Œ±) : colimit_cocone F :=
{ cocone :=
  { X := finset.univ.sup F.obj,
    Œπ := { app := Œª i, hom_of_le (finset.le_sup (fintype.complete _)) } },
  is_colimit := { desc := Œª s, hom_of_le (finset.sup_le (Œª j _, (s.Œπ.app j).down.down)) } }

@[priority 100] -- see Note [lower instance priority]
instance has_finite_limits_of_semilattice_inf_order_top [semilattice_inf Œ±] [order_top Œ±] :
  has_finite_limits Œ± :=
‚ü®Œª J ùí•‚ÇÅ ùí•‚ÇÇ, by exactI { has_limit := Œª F, has_limit.mk (finite_limit_cone F) }‚ü©

@[priority 100] -- see Note [lower instance priority]
instance has_finite_colimits_of_semilattice_sup_order_bot [semilattice_sup Œ±] [order_bot Œ±] :
  has_finite_colimits Œ± :=
‚ü®Œª J ùí•‚ÇÅ ùí•‚ÇÇ, by exactI { has_colimit := Œª F, has_colimit.mk (finite_colimit_cocone F) }‚ü©

/--
The limit of a functor from a finite diagram into a `semilattice_inf` with `order_top` is the
infimum of the objects in the image.
-/
lemma finite_limit_eq_finset_univ_inf [semilattice_inf Œ±] [order_top Œ±] (F : J ‚•§ Œ±) :
  limit F = finset.univ.inf F.obj :=
(is_limit.cone_point_unique_up_to_iso (limit.is_limit F)
  (finite_limit_cone F).is_limit).to_eq

/--
The colimit of a functor from a finite diagram into a `semilattice_sup` with `order_bot`
is the supremum of the objects in the image.
-/
lemma finite_colimit_eq_finset_univ_sup [semilattice_sup Œ±] [order_bot Œ±] (F : J ‚•§ Œ±) :
  colimit F = finset.univ.sup F.obj :=
(is_colimit.cocone_point_unique_up_to_iso (colimit.is_colimit F)
  (finite_colimit_cocone F).is_colimit).to_eq

/--
A finite product in the category of a `semilattice_inf` with `order_top` is the same as the infimum.
-/
lemma finite_product_eq_finset_inf [semilattice_inf Œ±] [order_top Œ±] {Œπ : Type u} [decidable_eq Œπ]
  [fintype Œπ] (f : Œπ ‚Üí Œ±) : (‚àè f) = (fintype.elems Œπ).inf f :=
(is_limit.cone_point_unique_up_to_iso (limit.is_limit _)
  (finite_limit_cone (discrete.functor f)).is_limit).to_eq

/--
A finite coproduct in the category of a `semilattice_sup` with `order_bot` is the same as the
supremum.
-/
lemma finite_coproduct_eq_finset_sup [semilattice_sup Œ±] [order_bot Œ±] {Œπ : Type u} [decidable_eq Œπ]
  [fintype Œπ] (f : Œπ ‚Üí Œ±) : (‚àê f) = (fintype.elems Œπ).sup f :=
(is_colimit.cocone_point_unique_up_to_iso (colimit.is_colimit _)
  (finite_colimit_cocone (discrete.functor f)).is_colimit).to_eq

/--
The binary product in the category of a `semilattice_inf` with `order_top` is the same as the
infimum.
-/
@[simp]
lemma prod_eq_inf [semilattice_inf Œ±] [order_top Œ±] (x y : Œ±) : limits.prod x y = x ‚äì y :=
calc limits.prod x y = limit (pair x y) : rfl
... = finset.univ.inf (pair x y).obj : by rw finite_limit_eq_finset_univ_inf (pair x y)
... = x ‚äì (y ‚äì ‚ä§) : rfl -- Note: finset.inf is realized as a fold, hence the definitional equality
... = x ‚äì y : by rw inf_top_eq

/--
The binary coproduct in the category of a `semilattice_sup` with `order_bot` is the same as the
supremum.
-/
@[simp]
lemma coprod_eq_sup [semilattice_sup Œ±] [order_bot Œ±] (x y : Œ±) : limits.coprod x y = x ‚äî y :=
calc limits.coprod x y = colimit (pair x y) : rfl
... = finset.univ.sup (pair x y).obj : by rw finite_colimit_eq_finset_univ_sup (pair x y)
... = x ‚äî (y ‚äî ‚ä•) : rfl -- Note: finset.sup is realized as a fold, hence the definitional equality
... = x ‚äî y : by rw sup_bot_eq

/--
The pullback in the category of a `semilattice_inf` with `order_top` is the same as the infimum
over the objects.
-/
@[simp]
lemma pullback_eq_inf [semilattice_inf Œ±] [order_top Œ±] {x y z : Œ±} (f : x ‚ü∂ z) (g : y ‚ü∂ z) :
  pullback f g = x ‚äì y :=
calc pullback f g = limit (cospan f g) : rfl
... = finset.univ.inf (cospan f g).obj : by rw finite_limit_eq_finset_univ_inf
... = z ‚äì (x ‚äì (y ‚äì ‚ä§)) : rfl
... = z ‚äì (x ‚äì y) : by rw inf_top_eq
... = x ‚äì y : inf_eq_right.mpr (inf_le_of_left_le f.le)

/--
The pushout in the category of a `semilattice_sup` with `order_bot` is the same as the supremum
over the objects.
-/
@[simp]
lemma pushout_eq_sup [semilattice_sup Œ±] [order_bot Œ±] (x y z : Œ±) (f : z ‚ü∂ x) (g : z ‚ü∂ y) :
  pushout f g = x ‚äî y :=
calc pushout f g = colimit (span f g) : rfl
... = finset.univ.sup (span f g).obj : by rw finite_colimit_eq_finset_univ_sup
... = z ‚äî (x ‚äî (y ‚äî ‚ä•)) : rfl
... = z ‚äî (x ‚äî y) : by rw sup_bot_eq
... = x ‚äî y : sup_eq_right.mpr (le_sup_of_le_left f.le)

end semilattice

variables {Œ± : Type u} [complete_lattice Œ±]
variables {J : Type u} [small_category J]

/--
The limit cone over any functor into a complete lattice.
-/
def limit_cone (F : J ‚•§ Œ±) : limit_cone F :=
{ cone :=
  { X := infi F.obj,
    œÄ :=
    { app := Œª j, hom_of_le (complete_lattice.Inf_le _ _ (set.mem_range_self _)) } },
  is_limit :=
  { lift := Œª s, hom_of_le (complete_lattice.le_Inf _ _
    begin rintros _ ‚ü®j, rfl‚ü©, exact (s.œÄ.app j).le, end) } }

/--
The colimit cocone over any functor into a complete lattice.
-/
def colimit_cocone (F : J ‚•§ Œ±) : colimit_cocone F :=
{ cocone :=
  { X := supr F.obj,
    Œπ :=
    { app := Œª j, hom_of_le (complete_lattice.le_Sup _ _ (set.mem_range_self _)) } },
  is_colimit :=
  { desc := Œª s, hom_of_le (complete_lattice.Sup_le _ _
    begin rintros _ ‚ü®j, rfl‚ü©, exact (s.Œπ.app j).le, end) } }

-- It would be nice to only use the `Inf` half of the complete lattice, but
-- this seems not to have been described separately.
@[priority 100] -- see Note [lower instance priority]
instance has_limits_of_complete_lattice : has_limits Œ± :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit.mk (limit_cone F) } }

@[priority 100] -- see Note [lower instance priority]
instance has_colimits_of_complete_lattice : has_colimits Œ± :=
{ has_colimits_of_shape := Œª J ùí•, by exactI
  { has_colimit := Œª F, has_colimit.mk (colimit_cocone F) } }

/--
The limit of a functor into a complete lattice is the infimum of the objects in the image.
-/
lemma limit_eq_infi (F : J ‚•§ Œ±) : limit F = infi F.obj :=
(is_limit.cone_point_unique_up_to_iso (limit.is_limit F)
  (limit_cone F).is_limit).to_eq

/--
The colimit of a functor into a complete lattice is the supremum of the objects in the image.
-/
lemma colimit_eq_supr (F : J ‚•§ Œ±) : colimit F = supr F.obj :=
(is_colimit.cocone_point_unique_up_to_iso (colimit.is_colimit F)
  (colimit_cocone F).is_colimit).to_eq

end category_theory.limits.complete_lattice
