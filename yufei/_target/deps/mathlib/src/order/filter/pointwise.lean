/-
Copyright (c) 2019 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou
-/
import algebra.pointwise
import order.filter.basic
/-!
# Pointwise operations on filters.

The pointwise operations on filters have nice properties, such as
  ‚Ä¢ `map m (f‚ÇÅ * f‚ÇÇ) = map m f‚ÇÅ * map m f‚ÇÇ`
  ‚Ä¢ `ùìù x * ùìù y = ùìù (x * y)`

-/

open classical set

universes u v w
variables {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

open_locale classical pointwise

namespace filter
open set

@[to_additive]
instance [has_one Œ±] : has_one (filter Œ±) := ‚ü®principal 1‚ü©

@[simp, to_additive]
lemma mem_one [has_one Œ±] (s : set Œ±) : s ‚àà (1 : filter Œ±) ‚Üî (1:Œ±) ‚àà s :=
calc
  s ‚àà (1:filter Œ±) ‚Üî 1 ‚äÜ s : iff.rfl
  ... ‚Üî (1 : Œ±) ‚àà s : by simp

@[to_additive]
instance [monoid Œ±] : has_mul (filter Œ±) := ‚ü®Œªf g,
{ sets             := { s | ‚àÉt‚ÇÅ t‚ÇÇ, t‚ÇÅ ‚àà f ‚àß t‚ÇÇ ‚àà g ‚àß t‚ÇÅ * t‚ÇÇ ‚äÜ s },
  univ_sets        :=
  begin
    have h‚ÇÅ : (‚àÉx, x ‚àà f) := ‚ü®univ, univ_sets f‚ü©,
    have h‚ÇÇ : (‚àÉx, x ‚àà g) := ‚ü®univ, univ_sets g‚ü©,
    simpa using and.intro h‚ÇÅ h‚ÇÇ
  end,
  sets_of_superset := Œªx y hx hxy,
  begin
   rcases hx with ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©,
   exact ‚ü®t‚ÇÅ, ht‚ÇÅ, t‚ÇÇ, ht‚ÇÇ, subset.trans t‚ÇÅt‚ÇÇ hxy‚ü©
  end,
  inter_sets       := Œªx y,
  begin
    simp only [exists_prop, mem_set_of_eq, subset_inter_iff],
    rintros ‚ü®s‚ÇÅ, s‚ÇÇ, hs‚ÇÅ, hs‚ÇÇ, s‚ÇÅs‚ÇÇ‚ü© ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©,
    exact ‚ü®s‚ÇÅ ‚à© t‚ÇÅ, s‚ÇÇ ‚à© t‚ÇÇ, inter_sets f hs‚ÇÅ ht‚ÇÅ, inter_sets g hs‚ÇÇ ht‚ÇÇ,
    subset.trans (mul_subset_mul (inter_subset_left _ _) (inter_subset_left _ _)) s‚ÇÅs‚ÇÇ,
    subset.trans (mul_subset_mul (inter_subset_right _ _) (inter_subset_right _ _)) t‚ÇÅt‚ÇÇ‚ü©,
  end }‚ü©

@[to_additive]
lemma mem_mul [monoid Œ±] {f g : filter Œ±} {s : set Œ±} :
  s ‚àà f * g ‚Üî ‚àÉt‚ÇÅ t‚ÇÇ, t‚ÇÅ ‚àà f ‚àß t‚ÇÇ ‚àà g ‚àß t‚ÇÅ * t‚ÇÇ  ‚äÜ s := iff.rfl

@[to_additive]
lemma mul_mem_mul [monoid Œ±] {f g : filter Œ±} {s t : set Œ±} (hs : s ‚àà f) (ht : t ‚àà g) :
  s * t ‚àà f * g := ‚ü®_, _, hs, ht, subset.refl _‚ü©

@[to_additive]
protected lemma mul_le_mul [monoid Œ±] {f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ : filter Œ±} (hf : f‚ÇÅ ‚â§ f‚ÇÇ) (hg : g‚ÇÅ ‚â§ g‚ÇÇ) :
  f‚ÇÅ * g‚ÇÅ ‚â§ f‚ÇÇ * g‚ÇÇ := assume _ ‚ü®s, t, hs, ht, hst‚ü©, ‚ü®s, t, hf hs, hg ht, hst‚ü©

@[to_additive]
lemma ne_bot.mul [monoid Œ±] {f g : filter Œ±} : ne_bot f ‚Üí ne_bot g ‚Üí ne_bot (f * g) :=
begin
  simp only [forall_mem_nonempty_iff_ne_bot.symm],
  rintros hf hg s ‚ü®a, b, ha, hb, ab‚ü©,
  exact ((hf a ha).mul (hg b hb)).mono ab
end

@[to_additive]
protected lemma mul_assoc [monoid Œ±] (f g h : filter Œ±) : f * g * h = f * (g * h) :=
begin
  ext s, split,
  { rintros ‚ü®a, b, ‚ü®a‚ÇÅ, a‚ÇÇ, ha‚ÇÅ, ha‚ÇÇ, a‚ÇÅa‚ÇÇ‚ü©, hb, ab‚ü©,
    refine ‚ü®a‚ÇÅ, a‚ÇÇ * b, ha‚ÇÅ, mul_mem_mul ha‚ÇÇ hb, _‚ü©, rw [‚Üê mul_assoc],
    calc
      a‚ÇÅ * a‚ÇÇ * b ‚äÜ a * b : mul_subset_mul a‚ÇÅa‚ÇÇ (subset.refl _)
      ...         ‚äÜ s     : ab },
  { rintros ‚ü®a, b, ha, ‚ü®b‚ÇÅ, b‚ÇÇ, hb‚ÇÅ, hb‚ÇÇ, b‚ÇÅb‚ÇÇ‚ü©, ab‚ü©,
    refine ‚ü®a * b‚ÇÅ, b‚ÇÇ, mul_mem_mul ha hb‚ÇÅ, hb‚ÇÇ, _‚ü©, rw [mul_assoc],
    calc
      a * (b‚ÇÅ * b‚ÇÇ) ‚äÜ a * b : mul_subset_mul (subset.refl _) b‚ÇÅb‚ÇÇ
      ...           ‚äÜ s     : ab }
end

@[to_additive]
protected lemma one_mul [monoid Œ±] (f : filter Œ±) : 1 * f = f :=
begin
  ext s, split,
  { rintros ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©,
    refine mem_of_superset (mem_of_superset ht‚ÇÇ _) t‚ÇÅt‚ÇÇ,
    assume x hx,
    exact ‚ü®1, x, by rwa [‚Üê mem_one], hx, one_mul _‚ü© },
  { assume hs, refine ‚ü®(1:set Œ±), s, mem_principal_self _, hs, by simp only [one_mul]‚ü© }
end

@[to_additive]
protected lemma mul_one [monoid Œ±] (f : filter Œ±) : f * 1 = f :=
begin
  ext s, split,
  { rintros ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©,
    refine mem_of_superset (mem_of_superset ht‚ÇÅ _) t‚ÇÅt‚ÇÇ,
    assume x hx,
    exact ‚ü®x, 1, hx, by rwa [‚Üê mem_one], mul_one _‚ü© },
  { assume hs,
    refine ‚ü®s, (1:set Œ±), hs, mem_principal_self _, by simp only [mul_one]‚ü© }
end

@[to_additive filter.add_monoid]
instance [monoid Œ±] : monoid (filter Œ±) :=
{ mul_assoc := filter.mul_assoc,
  one_mul := filter.one_mul,
  mul_one := filter.mul_one,
  .. filter.has_mul,
  .. filter.has_one }

section map

variables [monoid Œ±] [monoid Œ≤] {f : filter Œ±} (m : mul_hom Œ± Œ≤) (œÜ : Œ± ‚Üí* Œ≤)

@[to_additive]
protected lemma map_mul {f‚ÇÅ f‚ÇÇ : filter Œ±} : map m (f‚ÇÅ * f‚ÇÇ) = map m f‚ÇÅ * map m f‚ÇÇ :=
begin
  ext s,
  simp only [mem_mul], split,
  { rintro ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©,
    have : m '' (t‚ÇÅ * t‚ÇÇ) ‚äÜ s := subset.trans (image_subset m t‚ÇÅt‚ÇÇ) (image_preimage_subset _ _),
    refine ‚ü®m '' t‚ÇÅ, m '' t‚ÇÇ, image_mem_map ht‚ÇÅ, image_mem_map ht‚ÇÇ, _‚ü©,
    rwa ‚Üê image_mul m },
  { rintro ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©,
    refine ‚ü®m ‚Åª¬π' t‚ÇÅ, m ‚Åª¬π' t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, image_subset_iff.1 _‚ü©,
    rw image_mul m,
    exact subset.trans
      (mul_subset_mul (image_preimage_subset _ _) (image_preimage_subset _ _)) t‚ÇÅt‚ÇÇ },
end

@[to_additive]
protected lemma map_one : map œÜ (1:filter Œ±) = 1 :=
le_antisymm
  (le_principal_iff.2 $ mem_map_iff_exists_image.2 ‚ü®(1:set Œ±), by simp,
    by { assume x, simp [œÜ.map_one] }‚ü©)
  (le_map $ assume s hs,
   begin
     simp only [mem_one],
     exact ‚ü®(1:Œ±), (mem_one s).1 hs, œÜ.map_one‚ü©
   end)

/-- If `œÜ : Œ± ‚Üí* Œ≤` then `map_monoid_hom œÜ` is the monoid homomorphism
`filter Œ± ‚Üí* filter Œ≤` induced by `map œÜ`. -/
@[to_additive "If `œÜ : Œ± ‚Üí+ Œ≤` then `map_add_monoid_hom œÜ` is the monoid homomorphism
`filter Œ± ‚Üí+ filter Œ≤` induced by `map œÜ`."]
def map_monoid_hom : filter Œ± ‚Üí* filter Œ≤ :=
{ to_fun := map œÜ,
  map_one' := filter.map_one œÜ,
  map_mul' := Œª _ _, filter.map_mul œÜ.to_mul_hom }

-- The other direction does not hold in general.
@[to_additive]
lemma comap_mul_comap_le {f‚ÇÅ f‚ÇÇ : filter Œ≤} :
  comap m f‚ÇÅ * comap m f‚ÇÇ ‚â§ comap m (f‚ÇÅ * f‚ÇÇ) :=
begin
  rintros s ‚ü®t, ‚ü®t‚ÇÅ, t‚ÇÇ, ht‚ÇÅ, ht‚ÇÇ, t‚ÇÅt‚ÇÇ‚ü©, mt‚ü©,
  refine ‚ü®m ‚Åª¬π' t‚ÇÅ, m ‚Åª¬π' t‚ÇÇ, ‚ü®t‚ÇÅ, ht‚ÇÅ, subset.refl _‚ü©, ‚ü®t‚ÇÇ, ht‚ÇÇ, subset.refl _‚ü©, _‚ü©,
  have := subset.trans (preimage_mono t‚ÇÅt‚ÇÇ) mt,
  exact subset.trans (preimage_mul_preimage_subset _) this
end

@[to_additive]
lemma tendsto.mul_mul {f‚ÇÅ g‚ÇÅ : filter Œ±} {f‚ÇÇ g‚ÇÇ : filter Œ≤} :
  tendsto m f‚ÇÅ f‚ÇÇ ‚Üí tendsto m g‚ÇÅ g‚ÇÇ ‚Üí tendsto m (f‚ÇÅ * g‚ÇÅ) (f‚ÇÇ * g‚ÇÇ) :=
assume hf hg, by { rw [tendsto, filter.map_mul m], exact filter.mul_le_mul hf hg }

end map

end filter
