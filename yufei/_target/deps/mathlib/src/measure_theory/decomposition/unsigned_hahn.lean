/-
Copyright (c) 2019 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl
-/
import measure_theory.measure.measure_space

/-!
# Unsigned Hahn decomposition theorem

This file proves the unsigned version of the Hahn decomposition theorem.

## Main statements

* `hahn_decomposition` : Given two finite measures `Œº` and `ŒΩ`, there exists a measurable set `s`
    such that any measurable set `t` included in `s` satisfies `ŒΩ t ‚â§ Œº t`, and any
    measurable set `u` included in the complement of `s` satisfies `Œº u ‚â§ ŒΩ u`.

## Tags

Hahn decomposition
-/

open set filter
open_locale classical topological_space ennreal

namespace measure_theory

variables {Œ± : Type*} [measurable_space Œ±] {Œº ŒΩ : measure Œ±}

-- suddenly this is necessary?!
private lemma aux {m : ‚Ñï} {Œ≥ d : ‚Ñù} (h : Œ≥ - (1 / 2) ^ m < d) :
  Œ≥ - 2 * (1 / 2) ^ m + (1 / 2) ^ m ‚â§ d :=
by linarith

/-- **Hahn decomposition theorem** -/
lemma hahn_decomposition [is_finite_measure Œº] [is_finite_measure ŒΩ] :
  ‚àÉs, measurable_set s ‚àß
    (‚àÄt, measurable_set t ‚Üí t ‚äÜ s ‚Üí ŒΩ t ‚â§ Œº t) ‚àß
    (‚àÄt, measurable_set t ‚Üí t ‚äÜ s·∂ú ‚Üí Œº t ‚â§ ŒΩ t) :=
begin
  let d : set Œ± ‚Üí ‚Ñù := Œªs, ((Œº s).to_nnreal : ‚Ñù) - (ŒΩ s).to_nnreal,
  let c : set ‚Ñù := d '' {s | measurable_set s },
  let Œ≥ : ‚Ñù := Sup c,

  have hŒº : ‚àÄ s, Œº s ‚â† ‚àû := measure_ne_top Œº,
  have hŒΩ : ‚àÄ s, ŒΩ s ‚â† ‚àû := measure_ne_top ŒΩ,
  have to_nnreal_Œº : ‚àÄs, ((Œº s).to_nnreal : ‚Ñù‚â•0‚àû) = Œº s :=
    (assume s, ennreal.coe_to_nnreal $ hŒº _),
  have to_nnreal_ŒΩ : ‚àÄs, ((ŒΩ s).to_nnreal : ‚Ñù‚â•0‚àû) = ŒΩ s :=
    (assume s, ennreal.coe_to_nnreal $ hŒΩ _),

  have d_empty : d ‚àÖ = 0,
  { change _ - _ = _, rw [measure_empty, measure_empty, sub_self] },

  have d_split : ‚àÄs t, measurable_set s ‚Üí measurable_set t ‚Üí
    d s = d (s \ t) + d (s ‚à© t),
  { assume s t hs ht,
    simp only [d],
    rw [‚Üê measure_inter_add_diff s ht, ‚Üê measure_inter_add_diff s ht,
      ennreal.to_nnreal_add (hŒº _) (hŒº _), ennreal.to_nnreal_add (hŒΩ _) (hŒΩ _),
      nnreal.coe_add, nnreal.coe_add],
    simp only [sub_eq_add_neg, neg_add],
    ac_refl },

  have d_Union : ‚àÄ(s : ‚Ñï ‚Üí set Œ±), monotone s ‚Üí
    tendsto (Œªn, d (s n)) at_top (ùìù (d (‚ãÉn, s n))),
  { assume s hm,
    refine tendsto.sub _ _;
      refine (nnreal.tendsto_coe.2 $ (ennreal.tendsto_to_nnreal _).comp $
        tendsto_measure_Union hm),
    exact hŒº _,
    exact hŒΩ _ },

  have d_Inter : ‚àÄ(s : ‚Ñï ‚Üí set Œ±), (‚àÄn, measurable_set (s n)) ‚Üí (‚àÄn m, n ‚â§ m ‚Üí s m ‚äÜ s n) ‚Üí
    tendsto (Œªn, d (s n)) at_top (ùìù (d (‚ãÇn, s n))),
  { assume s hs hm,
    refine tendsto.sub _ _;
      refine (nnreal.tendsto_coe.2 $ (ennreal.tendsto_to_nnreal $ _).comp $
        tendsto_measure_Inter hs hm _),
    exacts [hŒº _, ‚ü®0, hŒº _‚ü©, hŒΩ _, ‚ü®0, hŒΩ _‚ü©] },

  have bdd_c : bdd_above c,
  { use (Œº univ).to_nnreal,
    rintros r ‚ü®s, hs, rfl‚ü©,
    refine le_trans (sub_le_self _ $ nnreal.coe_nonneg _) _,
    rw [nnreal.coe_le_coe, ‚Üê ennreal.coe_le_coe, to_nnreal_Œº, to_nnreal_Œº],
    exact measure_mono (subset_univ _) },

  have c_nonempty : c.nonempty := nonempty.image _ ‚ü®_, measurable_set.empty‚ü©,

  have d_le_Œ≥ : ‚àÄs, measurable_set s ‚Üí d s ‚â§ Œ≥ := assume s hs, le_cSup bdd_c ‚ü®s, hs, rfl‚ü©,

  have : ‚àÄn:‚Ñï, ‚àÉs : set Œ±, measurable_set s ‚àß Œ≥ - (1/2)^n < d s,
  { assume n,
    have : Œ≥ - (1/2)^n < Œ≥ := sub_lt_self Œ≥ (pow_pos (half_pos zero_lt_one) n),
    rcases exists_lt_of_lt_cSup c_nonempty this with ‚ü®r, ‚ü®s, hs, rfl‚ü©, hlt‚ü©,
    exact ‚ü®s, hs, hlt‚ü© },
  rcases classical.axiom_of_choice this with ‚ü®e, he‚ü©,
  change ‚Ñï ‚Üí set Œ± at e,
  have he‚ÇÅ : ‚àÄn, measurable_set (e n) := assume n, (he n).1,
  have he‚ÇÇ : ‚àÄn, Œ≥ - (1/2)^n < d (e n) := assume n, (he n).2,

  let f : ‚Ñï ‚Üí ‚Ñï ‚Üí set Œ± := Œªn m, (finset.Ico n (m + 1)).inf e,

  have hf : ‚àÄn m, measurable_set (f n m),
  { assume n m,
    simp only [f, finset.inf_eq_infi],
    exact measurable_set.bInter (countable_encodable _) (assume i _, he‚ÇÅ _) },

  have f_subset_f : ‚àÄ{a b c d}, a ‚â§ b ‚Üí c ‚â§ d ‚Üí f a d ‚äÜ f b c,
  { assume a b c d hab hcd,
    dsimp only [f],
    rw [finset.inf_eq_infi, finset.inf_eq_infi],
    exact bInter_subset_bInter_left (finset.Ico_subset_Ico hab $ nat.succ_le_succ hcd) },

  have f_succ : ‚àÄn m, n ‚â§ m ‚Üí f n (m + 1) = f n m ‚à© e (m + 1),
  { assume n m hnm,
    have : n ‚â§ m + 1 := le_of_lt (nat.succ_le_succ hnm),
    simp only [f],
    rw [nat.Ico_succ_right_eq_insert_Ico this, finset.inf_insert, set.inter_comm],
    refl },

  have le_d_f : ‚àÄn m, m ‚â§ n ‚Üí Œ≥ - 2 * ((1 / 2) ^ m) + (1 / 2) ^ n ‚â§ d (f m n),
  { assume n m h,
    refine nat.le_induction _ _ n h,
    { have := he‚ÇÇ m,
      simp only [f],
      rw [nat.Ico_succ_singleton, finset.inf_singleton],
      exact aux this },
    { assume n (hmn : m ‚â§ n) ih,
      have : Œ≥ + (Œ≥ - 2 * (1 / 2)^m + (1 / 2) ^ (n + 1)) ‚â§ Œ≥ + d (f m (n + 1)),
      { calc Œ≥ + (Œ≥ - 2 * (1 / 2)^m + (1 / 2) ^ (n+1)) ‚â§
            Œ≥ + (Œ≥ - 2 * (1 / 2)^m + ((1 / 2) ^ n - (1/2)^(n+1))) :
          begin
            refine add_le_add_left (add_le_add_left _ _) Œ≥,
            simp only [pow_add, pow_one, le_sub_iff_add_le],
            linarith
          end
          ... = (Œ≥ - (1 / 2)^(n+1)) + (Œ≥ - 2 * (1 / 2)^m + (1 / 2)^n) :
            by simp only [sub_eq_add_neg]; ac_refl
          ... ‚â§ d (e (n + 1)) + d (f m n) : add_le_add (le_of_lt $ he‚ÇÇ _) ih
          ... ‚â§ d (e (n + 1)) + d (f m n \ e (n + 1)) + d (f m (n + 1)) :
            by rw [f_succ _ _ hmn, d_split (f m n) (e (n + 1)) (hf _ _) (he‚ÇÅ _), add_assoc]
          ... = d (e (n + 1) ‚à™ f m n) + d (f m (n + 1)) :
            begin
              rw [d_split (e (n + 1) ‚à™ f m n) (e (n + 1)),
                union_diff_left, union_inter_cancel_left],
              ac_refl,
              exact (he‚ÇÅ _).union (hf _ _),
              exact (he‚ÇÅ _)
            end
          ... ‚â§ Œ≥ + d (f m (n + 1)) :
            add_le_add_right (d_le_Œ≥ _ $ (he‚ÇÅ _).union (hf _ _)) _ },
      exact (add_le_add_iff_left Œ≥).1 this } },

  let s := ‚ãÉ m, ‚ãÇn, f m n,
  have Œ≥_le_d_s : Œ≥ ‚â§ d s,
  { have hŒ≥ : tendsto (Œªm:‚Ñï, Œ≥ - 2 * (1/2)^m) at_top (ùìù Œ≥),
    { suffices : tendsto (Œªm:‚Ñï, Œ≥ - 2 * (1/2)^m) at_top (ùìù (Œ≥ - 2 * 0)), { simpa },
      exact (tendsto_const_nhds.sub $ tendsto_const_nhds.mul $
        tendsto_pow_at_top_nhds_0_of_lt_1
          (le_of_lt $ half_pos $ zero_lt_one) (half_lt_self zero_lt_one)) },
    have hd : tendsto (Œªm, d (‚ãÇn, f m n)) at_top (ùìù (d (‚ãÉ m, ‚ãÇ n, f m n))),
    { refine d_Union _ _,
      exact assume n m hnm, subset_Inter
        (assume i, subset.trans (Inter_subset (f n) i) $ f_subset_f hnm $ le_rfl) },
    refine le_of_tendsto_of_tendsto' hŒ≥ hd (assume m, _),
    have : tendsto (Œªn, d (f m n)) at_top (ùìù (d (‚ãÇ n, f m n))),
    { refine d_Inter _ _ _,
      { assume n, exact hf _ _ },
      { assume n m hnm, exact f_subset_f le_rfl hnm } },
    refine ge_of_tendsto this (eventually_at_top.2 ‚ü®m, assume n hmn, _‚ü©),
    change Œ≥ - 2 * (1 / 2) ^ m ‚â§ d (f m n),
    refine le_trans _ (le_d_f _ _ hmn),
    exact le_add_of_le_of_nonneg le_rfl (pow_nonneg (le_of_lt $ half_pos $ zero_lt_one) _) },

  have hs : measurable_set s :=
    measurable_set.Union (assume n, measurable_set.Inter (assume m, hf _ _)),
  refine ‚ü®s, hs, _, _‚ü©,
  { assume t ht hts,
    have : 0 ‚â§ d t := ((add_le_add_iff_left Œ≥).1 $
      calc Œ≥ + 0 ‚â§ d s : by rw [add_zero]; exact Œ≥_le_d_s
        ... = d (s \ t) + d t : by rw [d_split _ _ hs ht, inter_eq_self_of_subset_right hts]
        ... ‚â§ Œ≥ + d t : add_le_add (d_le_Œ≥ _ (hs.diff ht)) le_rfl),
    rw [‚Üê to_nnreal_Œº, ‚Üê to_nnreal_ŒΩ, ennreal.coe_le_coe, ‚Üê nnreal.coe_le_coe],
    simpa only [d, le_sub_iff_add_le, zero_add] using this },
  { assume t ht hts,
    have : d t ‚â§ 0,
    exact ((add_le_add_iff_left Œ≥).1 $
      calc Œ≥ + d t ‚â§ d s + d t : add_le_add Œ≥_le_d_s le_rfl
        ... = d (s ‚à™ t) :
        begin
          rw [d_split _ _ (hs.union ht) ht, union_diff_right, union_inter_cancel_right,
            diff_eq_self.2],
          exact assume a ‚ü®hat, has‚ü©, hts hat has
        end
        ... ‚â§ Œ≥ + 0 : by rw [add_zero]; exact d_le_Œ≥ _ (hs.union ht)),
    rw [‚Üê to_nnreal_Œº, ‚Üê to_nnreal_ŒΩ, ennreal.coe_le_coe, ‚Üê nnreal.coe_le_coe],
    simpa only [d, sub_le_iff_le_add, zero_add] using this }
end

end measure_theory
