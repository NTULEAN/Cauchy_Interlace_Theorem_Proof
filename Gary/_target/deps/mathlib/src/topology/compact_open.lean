/-
Copyright (c) 2018 Reid Barton. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton
-/
import tactic.tidy
import topology.continuous_function.basic
import topology.homeomorph
import topology.subset_properties
import topology.maps

/-!
# The compact-open topology

In this file, we define the compact-open topology on the set of continuous maps between two
topological spaces.

## Main definitions

* `compact_open` is the compact-open topology on `C(Œ±, Œ≤)`. It is declared as an instance.
* `ev` is the evaluation map `C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤`. It is continuous as long as `Œ±` is locally compact.
* `coev` is the coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)`. It is always continuous.
* `continuous_map.curry` is the currying map `C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))`. This map always exists
  and it is continuous as long as `Œ± √ó Œ≤` is locally compact.
* `continuous_map.uncurry` is the uncurrying map `C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)`. For this map to
  exist, we need `Œ≤` to be locally compact. If `Œ±` is also locally compact, then this map is
  continuous.
* `homeomorph.curry` combines the currying and uncurrying operations into a homeomorphism
  `C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥))`. This homeomorphism exists if `Œ±` and `Œ≤` are locally compact.


## Tags

compact-open, curry, function space
-/

open set
open_locale topological_space

namespace continuous_map

section compact_open
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥]

/-- A generating set for the compact-open topology (when `s` is compact and `u` is open). -/
def compact_open.gen (s : set Œ±) (u : set Œ≤) : set C(Œ±,Œ≤) := {f | f '' s ‚äÜ u}

-- The compact-open topology on the space of continuous maps Œ± ‚Üí Œ≤.
instance compact_open : topological_space C(Œ±, Œ≤) :=
topological_space.generate_from
  {m | ‚àÉ (s : set Œ±) (hs : is_compact s) (u : set Œ≤) (hu : is_open u), m = compact_open.gen s u}

protected lemma is_open_gen {s : set Œ±} (hs : is_compact s) {u : set Œ≤} (hu : is_open u) :
  is_open (compact_open.gen s u) :=
topological_space.generate_open.basic _ (by dsimp [mem_set_of_eq]; tauto)

section functorial

variables (g : C(Œ≤, Œ≥))

private lemma preimage_gen {s : set Œ±} (hs : is_compact s) {u : set Œ≥} (hu : is_open u) :
  continuous_map.comp g ‚Åª¬π' (compact_open.gen s u) = compact_open.gen s (g ‚Åª¬π' u) :=
begin
  ext ‚ü®f, _‚ü©,
  change g ‚àò f '' s ‚äÜ u ‚Üî f '' s ‚äÜ g ‚Åª¬π' u,
  rw [image_comp, image_subset_iff]
end

/-- C(Œ±, -) is a functor. -/
lemma continuous_comp : continuous (continuous_map.comp g : C(Œ±, Œ≤) ‚Üí C(Œ±, Œ≥)) :=
continuous_generated_from $ assume m ‚ü®s, hs, u, hu, hm‚ü©,
  by rw [hm, preimage_gen g hs hu]; exact continuous_map.is_open_gen hs (hu.preimage g.2)

end functorial

section ev

variables (Œ± Œ≤)

/-- The evaluation map `map C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤` -/
def ev (p : C(Œ±, Œ≤) √ó Œ±) : Œ≤ := p.1 p.2

variables {Œ± Œ≤}

/-- The evaluation map `C(Œ±, Œ≤) √ó Œ± ‚Üí Œ≤` is continuous if `Œ±` is locally compact. -/
lemma continuous_ev [locally_compact_space Œ±] : continuous (ev Œ± Œ≤) :=
continuous_iff_continuous_at.mpr $ assume ‚ü®f, x‚ü© n hn,
  let ‚ü®v, vn, vo, fxv‚ü© := mem_nhds_iff.mp hn in
  have v ‚àà ùìù (f x), from is_open.mem_nhds vo fxv,
  let ‚ü®s, hs, sv, sc‚ü© :=
    locally_compact_space.local_compact_nhds x (f ‚Åª¬π' v)
      (f.continuous.tendsto x this) in
  let ‚ü®u, us, uo, xu‚ü© := mem_nhds_iff.mp hs in
  show (ev Œ± Œ≤) ‚Åª¬π' n ‚àà ùìù (f, x), from
  let w := compact_open.gen s v √óÀ¢ u in
  have w ‚äÜ ev Œ± Œ≤ ‚Åª¬π' n, from assume ‚ü®f', x'‚ü© ‚ü®hf', hx'‚ü©, calc
    f' x' ‚àà f' '' s  : mem_image_of_mem f' (us hx')
    ...       ‚äÜ v            : hf'
    ...       ‚äÜ n            : vn,
  have is_open w, from (continuous_map.is_open_gen sc vo).prod uo,
  have (f, x) ‚àà w, from ‚ü®image_subset_iff.mpr sv, xu‚ü©,
  mem_nhds_iff.mpr ‚ü®w, by assumption, by assumption, by assumption‚ü©

lemma continuous_ev‚ÇÅ [locally_compact_space Œ±] (a : Œ±) : continuous (Œª f : C(Œ±, Œ≤), f a) :=
continuous_ev.comp (continuous_id.prod_mk continuous_const)

instance [t2_space Œ≤] [locally_compact_space Œ±] : t2_space C(Œ±, Œ≤) :=
‚ü® begin
    intros f‚ÇÅ f‚ÇÇ h,
    obtain ‚ü®p, hp‚ü© := not_forall.mp (mt continuous_map.ext h),
    exact separated_by_continuous (continuous_ev‚ÇÅ p) hp,
  end ‚ü©

end ev

section Inf_induced

lemma compact_open_le_induced (s : set Œ±) :
  (continuous_map.compact_open : topological_space C(Œ±, Œ≤))
  ‚â§ topological_space.induced (continuous_map.restrict s) continuous_map.compact_open :=
begin
  simp only [induced_generate_from_eq, continuous_map.compact_open],
  apply generate_from_mono,
  rintros b ‚ü®a, ‚ü®c, hc, u, hu, rfl‚ü©, rfl‚ü©,
  refine ‚ü®coe '' c, hc.image continuous_subtype_coe, u, hu, _‚ü©,
  ext f,
  simp only [compact_open.gen, mem_set_of_eq, mem_preimage, continuous_map.coe_restrict],
  rw image_comp f (coe : s ‚Üí Œ±),
end

/-- The compact-open topology on `C(Œ±, Œ≤)` is equal to the infimum of the compact-open topologies
on `C(s, Œ≤)` for `s` a compact subset of `Œ±`.  The key point of the proof is that the union of the
compact subsets of `Œ±` is equal to the union of compact subsets of the compact subsets of `Œ±`. -/
lemma compact_open_eq_Inf_induced :
  (continuous_map.compact_open : topological_space C(Œ±, Œ≤))
  = ‚®Ö (s : set Œ±) (hs : is_compact s),
    topological_space.induced (continuous_map.restrict s) continuous_map.compact_open :=
begin
  refine le_antisymm _ _,
  { refine le_binfi _,
    exact Œª s hs, compact_open_le_induced s },
  simp only [‚Üê generate_from_Union, induced_generate_from_eq, continuous_map.compact_open],
  apply generate_from_mono,
  rintros _ ‚ü®s, hs, u, hu, rfl‚ü©,
  rw mem_Union‚ÇÇ,
  refine ‚ü®s, hs, _, ‚ü®univ, is_compact_iff_is_compact_univ.mp hs, u, hu, rfl‚ü©, _‚ü©,
  ext f,
  simp only [compact_open.gen, mem_set_of_eq, mem_preimage, continuous_map.coe_restrict],
  rw image_comp f (coe : s ‚Üí Œ±),
  simp
end

/-- For any subset `s` of `Œ±`, the restriction of continuous functions to `s` is continuous as a
function from `C(Œ±, Œ≤)` to `C(s, Œ≤)` with their respective compact-open topologies. -/
lemma continuous_restrict (s : set Œ±) : continuous (Œª F : C(Œ±, Œ≤), F.restrict s) :=
by { rw continuous_iff_le_induced, exact compact_open_le_induced s }

lemma nhds_compact_open_eq_Inf_nhds_induced (f : C(Œ±, Œ≤)) :
  ùìù f = ‚®Ö s (hs : is_compact s), (ùìù (f.restrict s)).comap (continuous_map.restrict s) :=
by { rw [compact_open_eq_Inf_induced], simp [nhds_infi, nhds_induced] }

lemma tendsto_compact_open_restrict {Œπ : Type*} {l : filter Œπ} {F : Œπ ‚Üí C(Œ±, Œ≤)} {f : C(Œ±, Œ≤)}
  (hFf : filter.tendsto F l (ùìù f)) (s : set Œ±) :
  filter.tendsto (Œª i, (F i).restrict s) l (ùìù (f.restrict s)) :=
(continuous_restrict s).continuous_at.tendsto.comp hFf

lemma tendsto_compact_open_iff_forall {Œπ : Type*} {l : filter Œπ} (F : Œπ ‚Üí C(Œ±, Œ≤)) (f : C(Œ±, Œ≤)) :
  filter.tendsto F l (ùìù f)
  ‚Üî ‚àÄ s (hs : is_compact s), filter.tendsto (Œª i, (F i).restrict s) l (ùìù (f.restrict s)) :=
by { rw [compact_open_eq_Inf_induced], simp [nhds_infi, nhds_induced, filter.tendsto_comap_iff] }

/-- A family `F` of functions in `C(Œ±, Œ≤)` converges in the compact-open topology, if and only if
it converges in the compact-open topology on each compact subset of `Œ±`. -/
lemma exists_tendsto_compact_open_iff_forall [locally_compact_space Œ±] [t2_space Œ±] [t2_space Œ≤]
  {Œπ : Type*} {l : filter Œπ} [filter.ne_bot l] (F : Œπ ‚Üí C(Œ±, Œ≤)) :
  (‚àÉ f, filter.tendsto F l (ùìù f))
  ‚Üî ‚àÄ (s : set Œ±) (hs : is_compact s), ‚àÉ f, filter.tendsto (Œª i, (F i).restrict s) l (ùìù f) :=
begin
  split,
  { rintros ‚ü®f, hf‚ü© s hs,
    exact ‚ü®f.restrict s, tendsto_compact_open_restrict hf s‚ü© },
  { intros h,
    choose f hf using h,
    -- By uniqueness of limits in a `t2_space`, since `Œª i, F i x` tends to both `f s‚ÇÅ hs‚ÇÅ x` and
    -- `f s‚ÇÇ hs‚ÇÇ x`, we have `f s‚ÇÅ hs‚ÇÅ x = f s‚ÇÇ hs‚ÇÇ x`
    have h : ‚àÄ s‚ÇÅ (hs‚ÇÅ : is_compact s‚ÇÅ) s‚ÇÇ (hs‚ÇÇ : is_compact s‚ÇÇ) (x : Œ±) (hxs‚ÇÅ : x ‚àà s‚ÇÅ)
      (hxs‚ÇÇ : x ‚àà s‚ÇÇ), f s‚ÇÅ hs‚ÇÅ ‚ü®x, hxs‚ÇÅ‚ü© = f s‚ÇÇ hs‚ÇÇ ‚ü®x, hxs‚ÇÇ‚ü©,
    { rintros s‚ÇÅ hs‚ÇÅ s‚ÇÇ hs‚ÇÇ x hxs‚ÇÅ hxs‚ÇÇ,
      haveI := is_compact_iff_compact_space.mp hs‚ÇÅ,
      haveI := is_compact_iff_compact_space.mp hs‚ÇÇ,
      have h‚ÇÅ := (continuous_ev‚ÇÅ (‚ü®x, hxs‚ÇÅ‚ü© : s‚ÇÅ)).continuous_at.tendsto.comp (hf s‚ÇÅ hs‚ÇÅ),
      have h‚ÇÇ := (continuous_ev‚ÇÅ (‚ü®x, hxs‚ÇÇ‚ü© : s‚ÇÇ)).continuous_at.tendsto.comp (hf s‚ÇÇ hs‚ÇÇ),
      exact tendsto_nhds_unique h‚ÇÅ h‚ÇÇ },
    -- So glue the `f s hs` together and prove that this glued function `f‚ÇÄ` is a limit on each
    -- compact set `s`
    have hs : ‚àÄ x : Œ±, ‚àÉ s (hs : is_compact s), s ‚àà ùìù x,
    { intros x,
      obtain ‚ü®s, hs, hs'‚ü© := exists_compact_mem_nhds x,
      exact ‚ü®s, hs, hs'‚ü© },
    refine ‚ü®lift_cover' _ _ h hs, _‚ü©,
    rw tendsto_compact_open_iff_forall,
    intros s hs,
    rw lift_cover_restrict',
    exact hf s hs }
end

end Inf_induced

section coev

variables (Œ± Œ≤)

/-- The coevaluation map `Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±)` sending a point `x : Œ≤` to the continuous function
on `Œ±` sending `y` to `(x, y)`. -/
def coev (b : Œ≤) : C(Œ±, Œ≤ √ó Œ±) := ‚ü®Œª a, (b, a), continuous.prod_mk continuous_const continuous_id‚ü©

variables {Œ± Œ≤}
lemma image_coev {y : Œ≤} (s : set Œ±) : (coev Œ± Œ≤ y) '' s = ({y} : set Œ≤) √óÀ¢ s := by tidy

-- The coevaluation map Œ≤ ‚Üí C(Œ±, Œ≤ √ó Œ±) is continuous (always).
lemma continuous_coev : continuous (coev Œ± Œ≤) :=
continuous_generated_from $ begin
  rintros _ ‚ü®s, sc, u, uo, rfl‚ü©,
  rw is_open_iff_forall_mem_open,
  intros y hy,
  change (coev Œ± Œ≤ y) '' s ‚äÜ u at hy,
  rw image_coev s at hy,
  rcases generalized_tube_lemma is_compact_singleton sc uo hy
    with ‚ü®v, w, vo, wo, yv, sw, vwu‚ü©,
  refine ‚ü®v, _, vo, singleton_subset_iff.mp yv‚ü©,
  intros y' hy',
  change (coev Œ± Œ≤ y') '' s ‚äÜ u,
  rw image_coev s,
  exact subset.trans (prod_mono (singleton_subset_iff.mpr hy') sw) vwu
end

end coev

section curry

/-- Auxiliary definition, see `continuous_map.curry` and `homeomorph.curry`. -/
def curry' (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) : C(Œ≤, Œ≥) := ‚ü®function.curry f a‚ü©

/-- If a map `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous, then its curried form `Œ± ‚Üí C(Œ≤, Œ≥)` is continuous. -/
lemma continuous_curry' (f : C(Œ± √ó Œ≤, Œ≥)) : continuous (curry' f) :=
have hf : curry' f = continuous_map.comp f ‚àò coev _ _, by { ext, refl },
hf ‚ñ∏ continuous.comp (continuous_comp f) continuous_coev

/-- To show continuity of a map `Œ± ‚Üí C(Œ≤, Œ≥)`, it suffices to show that its uncurried form
    `Œ± √ó Œ≤ ‚Üí Œ≥` is continuous. -/
lemma continuous_of_continuous_uncurry (f : Œ± ‚Üí C(Œ≤, Œ≥))
  (h : continuous (function.uncurry (Œª x y, f x y))) : continuous f :=
by { convert continuous_curry' ‚ü®_, h‚ü©, ext, refl }

/-- The curried form of a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` as a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)`.
    If `a √ó Œ≤` is locally compact, this is continuous. If `Œ±` and `Œ≤` are both locally
    compact, then this is a homeomorphism, see `homeomorph.curry`. -/
def curry (f : C(Œ± √ó Œ≤, Œ≥)) : C(Œ±, C(Œ≤, Œ≥)) :=
‚ü®_, continuous_curry' f‚ü©

/-- The currying process is a continuous map between function spaces. -/
lemma continuous_curry [locally_compact_space (Œ± √ó Œ≤)] :
  continuous (curry : C(Œ± √ó Œ≤, Œ≥) ‚Üí C(Œ±, C(Œ≤, Œ≥))) :=
begin
  apply continuous_of_continuous_uncurry,
  apply continuous_of_continuous_uncurry,
  rw ‚Üêhomeomorph.comp_continuous_iff' (homeomorph.prod_assoc _ _ _).symm,
  convert continuous_ev;
  tidy
end

@[simp]
lemma curry_apply (f : C(Œ± √ó Œ≤, Œ≥)) (a : Œ±) (b : Œ≤) : f.curry a b = f (a, b) := rfl

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` is a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥`. -/
lemma continuous_uncurry_of_continuous [locally_compact_space Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) :
  continuous (function.uncurry (Œª x y, f x y)) :=
have hf : function.uncurry (Œª x y, f x y) = ev Œ≤ Œ≥ ‚àò prod.map f id, by { ext, refl },
hf ‚ñ∏ continuous.comp continuous_ev $ continuous.prod_map f.2 id.2

/-- The uncurried form of a continuous map `Œ± ‚Üí C(Œ≤, Œ≥)` as a continuous map `Œ± √ó Œ≤ ‚Üí Œ≥` (if `Œ≤` is
    locally compact). If `Œ±` is also locally compact, then this is a homeomorphism between the two
    function spaces, see `homeomorph.curry`. -/
def uncurry [locally_compact_space Œ≤] (f : C(Œ±, C(Œ≤, Œ≥))) : C(Œ± √ó Œ≤, Œ≥) :=
‚ü®_, continuous_uncurry_of_continuous f‚ü©

/-- The uncurrying process is a continuous map between function spaces. -/
lemma continuous_uncurry [locally_compact_space Œ±] [locally_compact_space Œ≤] :
  continuous (uncurry : C(Œ±, C(Œ≤, Œ≥)) ‚Üí C(Œ± √ó Œ≤, Œ≥)) :=
begin
  apply continuous_of_continuous_uncurry,
  rw ‚Üêhomeomorph.comp_continuous_iff' (homeomorph.prod_assoc _ _ _),
  apply continuous.comp continuous_ev (continuous.prod_map continuous_ev id.2);
  apply_instance
end

/-- The family of constant maps: `Œ≤ ‚Üí C(Œ±, Œ≤)` as a continuous map. -/
def const' : C(Œ≤, C(Œ±, Œ≤)) := curry ‚ü®prod.fst, continuous_fst‚ü©

@[simp] lemma coe_const' : (const' : Œ≤ ‚Üí C(Œ±, Œ≤)) = const := rfl

lemma continuous_const' : continuous (const : Œ≤ ‚Üí C(Œ±, Œ≤)) := const'.continuous

end curry

end compact_open

end continuous_map

open continuous_map

namespace homeomorph
variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*}
variables [topological_space Œ±] [topological_space Œ≤] [topological_space Œ≥]

/-- Currying as a homeomorphism between the function spaces `C(Œ± √ó Œ≤, Œ≥)` and `C(Œ±, C(Œ≤, Œ≥))`. -/
def curry [locally_compact_space Œ±] [locally_compact_space Œ≤] : C(Œ± √ó Œ≤, Œ≥) ‚âÉ‚Çú C(Œ±, C(Œ≤, Œ≥)) :=
‚ü®‚ü®curry, uncurry, by tidy, by tidy‚ü©, continuous_curry, continuous_uncurry‚ü©

/-- If `Œ±` has a single element, then `Œ≤` is homeomorphic to `C(Œ±, Œ≤)`. -/
def continuous_map_of_unique [unique Œ±] : Œ≤ ‚âÉ‚Çú C(Œ±, Œ≤) :=
{ to_fun := continuous_map.comp ‚ü®_, continuous_fst‚ü© ‚àò coev Œ± Œ≤,
  inv_fun := ev Œ± Œ≤ ‚àò (Œª f, (f, default)),
  left_inv := Œª a, rfl,
  right_inv := Œª f, by { ext, rw unique.eq_default x, refl },
  continuous_to_fun := continuous.comp (continuous_comp _) continuous_coev,
  continuous_inv_fun :=
    continuous.comp continuous_ev (continuous.prod_mk continuous_id continuous_const) }

@[simp] lemma continuous_map_of_unique_apply [unique Œ±] (b : Œ≤) (a : Œ±) :
  continuous_map_of_unique b a = b :=
rfl

@[simp] lemma continuous_map_of_unique_symm_apply [unique Œ±] (f : C(Œ±, Œ≤)) :
  continuous_map_of_unique.symm f = f default :=
rfl

end homeomorph

section quotient_map

variables {X‚ÇÄ X Y Z : Type*} [topological_space X‚ÇÄ] [topological_space X]
  [topological_space Y] [topological_space Z] [locally_compact_space Y] {f : X‚ÇÄ ‚Üí X}

lemma quotient_map.continuous_lift_prod_left (hf : quotient_map f) {g : X √ó Y ‚Üí Z}
  (hg : continuous (Œª p : X‚ÇÄ √ó Y, g (f p.1, p.2))) : continuous g :=
begin
  let Gf : C(X‚ÇÄ, C(Y, Z)) := continuous_map.curry ‚ü®_, hg‚ü©,
  have h : ‚àÄ x : X, continuous (Œª y, g (x, y)),
  { intros x,
    obtain ‚ü®x‚ÇÄ, rfl‚ü© := hf.surjective x,
    exact (Gf x‚ÇÄ).continuous },
  let G : X ‚Üí C(Y, Z) := Œª x, ‚ü®_, h x‚ü©,
  have : continuous G,
  { rw hf.continuous_iff,
    exact Gf.continuous },
  convert continuous_map.continuous_uncurry_of_continuous ‚ü®G, this‚ü©,
  ext x,
  cases x,
  refl,
end

lemma quotient_map.continuous_lift_prod_right (hf : quotient_map f) {g : Y √ó X ‚Üí Z}
  (hg : continuous (Œª p : Y √ó X‚ÇÄ, g (p.1, f p.2))) : continuous g :=
begin
  have : continuous (Œª p : X‚ÇÄ √ó Y, g ((prod.swap p).1, f (prod.swap p).2)),
  { exact hg.comp continuous_swap },
  have : continuous (Œª p : X‚ÇÄ √ó Y, (g ‚àò prod.swap) (f p.1, p.2)) := this,
  convert (hf.continuous_lift_prod_left this).comp continuous_swap,
  ext x,
  simp,
end

end quotient_map
