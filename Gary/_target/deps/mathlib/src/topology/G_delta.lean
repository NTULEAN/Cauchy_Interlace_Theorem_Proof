/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Yury Kudryashov
-/
import topology.uniform_space.basic
import topology.separation

/-!
# `GŒ¥` sets

In this file we define `GŒ¥` sets and prove their basic properties.

## Main definitions

* `is_GŒ¥`: a set `s` is a `GŒ¥` set if it can be represented as an intersection
  of countably many open sets;

* `residual`: the filter of residual sets. A set `s` is called *residual* if it includes a dense
  `GŒ¥` set. In a Baire space (e.g., in a complete (e)metric space), residual sets form a filter.

  For technical reasons, we define `residual` in any topological space but the definition agrees
  with the description above only in Baire spaces.

## Main results

We prove that finite or countable intersections of GŒ¥ sets is a GŒ¥ set. We also prove that the
continuity set of a function from a topological space to an (e)metric space is a GŒ¥ set.

## Tags

GŒ¥ set, residual set
-/

noncomputable theory
open_locale classical topological_space filter uniformity

open filter encodable set

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {Œπ : Type*}

section is_GŒ¥
variable [topological_space Œ±]

/-- A GŒ¥ set is a countable intersection of open sets. -/
def is_GŒ¥ (s : set Œ±) : Prop :=
  ‚àÉT : set (set Œ±), (‚àÄt ‚àà T, is_open t) ‚àß countable T ‚àß s = (‚ãÇ‚ÇÄ T)

/-- An open set is a GŒ¥ set. -/
lemma is_open.is_GŒ¥ {s : set Œ±} (h : is_open s) : is_GŒ¥ s :=
‚ü®{s}, by simp [h], countable_singleton _, (set.sInter_singleton _).symm‚ü©

@[simp] lemma is_GŒ¥_empty : is_GŒ¥ (‚àÖ : set Œ±) := is_open_empty.is_GŒ¥

@[simp] lemma is_GŒ¥_univ : is_GŒ¥ (univ : set Œ±) := is_open_univ.is_GŒ¥

lemma is_GŒ¥_bInter_of_open {I : set Œπ} (hI : countable I) {f : Œπ ‚Üí set Œ±}
  (hf : ‚àÄi ‚àà I, is_open (f i)) : is_GŒ¥ (‚ãÇi‚ààI, f i) :=
‚ü®f '' I, by rwa ball_image_iff, hI.image _, by rw sInter_image‚ü©

lemma is_GŒ¥_Inter_of_open [encodable Œπ] {f : Œπ ‚Üí set Œ±}
  (hf : ‚àÄi, is_open (f i)) : is_GŒ¥ (‚ãÇi, f i) :=
‚ü®range f, by rwa forall_range_iff, countable_range _, by rw sInter_range‚ü©

/-- The intersection of an encodable family of GŒ¥ sets is a GŒ¥ set. -/
lemma is_GŒ¥_Inter [encodable Œπ] {s : Œπ ‚Üí set Œ±} (hs : ‚àÄ i, is_GŒ¥ (s i)) : is_GŒ¥ (‚ãÇ i, s i) :=
begin
  choose T hTo hTc hTs using hs,
  obtain rfl : s = Œª i, ‚ãÇ‚ÇÄ T i := funext hTs,
  refine ‚ü®‚ãÉ i, T i, _, countable_Union hTc, (sInter_Union _).symm‚ü©,
  simpa [@forall_swap Œπ] using hTo
end

lemma is_GŒ¥_bInter {s : set Œπ} (hs : countable s) {t : Œ† i ‚àà s, set Œ±}
  (ht : ‚àÄ i ‚àà s, is_GŒ¥ (t i ‚Äπ_‚Ä∫)) : is_GŒ¥ (‚ãÇ i ‚àà s, t i ‚Äπ_‚Ä∫) :=
begin
  rw [bInter_eq_Inter],
  haveI := hs.to_encodable,
  exact is_GŒ¥_Inter (Œª x, ht x x.2)
end

/-- A countable intersection of GŒ¥ sets is a GŒ¥ set. -/
lemma is_GŒ¥_sInter {S : set (set Œ±)} (h : ‚àÄs‚ààS, is_GŒ¥ s) (hS : countable S) : is_GŒ¥ (‚ãÇ‚ÇÄ S) :=
by simpa only [sInter_eq_bInter] using is_GŒ¥_bInter hS h

lemma is_GŒ¥.inter {s t : set Œ±} (hs : is_GŒ¥ s) (ht : is_GŒ¥ t) : is_GŒ¥ (s ‚à© t) :=
by { rw inter_eq_Inter, exact is_GŒ¥_Inter (bool.forall_bool.2 ‚ü®ht, hs‚ü©) }

/-- The union of two GŒ¥ sets is a GŒ¥ set. -/
lemma is_GŒ¥.union {s t : set Œ±} (hs : is_GŒ¥ s) (ht : is_GŒ¥ t) : is_GŒ¥ (s ‚à™ t) :=
begin
  rcases hs with ‚ü®S, Sopen, Scount, rfl‚ü©,
  rcases ht with ‚ü®T, Topen, Tcount, rfl‚ü©,
  rw [sInter_union_sInter],
  apply is_GŒ¥_bInter_of_open (Scount.prod Tcount),
  rintros ‚ü®a, b‚ü© ‚ü®ha, hb‚ü©,
  exact (Sopen a ha).union (Topen b hb)
end

/-- The union of finitely many GŒ¥ sets is a GŒ¥ set. -/
lemma is_GŒ¥_bUnion {s : set Œπ} (hs : s.finite) {f : Œπ ‚Üí set Œ±} (h : ‚àÄ i ‚àà s, is_GŒ¥ (f i)) :
  is_GŒ¥ (‚ãÉ i ‚àà s, f i) :=
begin
  refine finite.induction_on hs (by simp) _ h,
  simp only [ball_insert_iff, bUnion_insert],
  exact Œª a s _ _ ihs H, H.1.union (ihs H.2)
end

lemma is_closed.is_GŒ¥ {Œ±} [uniform_space Œ±] [is_countably_generated (ùì§ Œ±)]
  {s : set Œ±} (hs : is_closed s) : is_GŒ¥ s :=
begin
  rcases (@uniformity_has_basis_open Œ± _).exists_antitone_subbasis  with ‚ü®U, hUo, hU, -‚ü©,
  rw [‚Üê hs.closure_eq, ‚Üê hU.bInter_bUnion_ball],
  refine is_GŒ¥_bInter (countable_encodable _) (Œª n hn, is_open.is_GŒ¥ _),
  exact is_open_bUnion (Œª x hx, uniform_space.is_open_ball _ (hUo _).2)
end

section t1_space

variable [t1_space Œ±]

lemma is_GŒ¥_compl_singleton (a : Œ±) : is_GŒ¥ ({a}·∂ú : set Œ±) :=
is_open_compl_singleton.is_GŒ¥

lemma set.countable.is_GŒ¥_compl {s : set Œ±} (hs : countable s) : is_GŒ¥ s·∂ú :=
begin
  rw [‚Üê bUnion_of_singleton s, compl_Union‚ÇÇ],
  exact is_GŒ¥_bInter hs (Œª x _, is_GŒ¥_compl_singleton x)
end

lemma set.finite.is_GŒ¥_compl {s : set Œ±} (hs : finite s) : is_GŒ¥ s·∂ú :=
hs.countable.is_GŒ¥_compl

lemma set.subsingleton.is_GŒ¥_compl {s : set Œ±} (hs : s.subsingleton) : is_GŒ¥ s·∂ú :=
hs.finite.is_GŒ¥_compl

lemma finset.is_GŒ¥_compl (s : finset Œ±) : is_GŒ¥ (s·∂ú : set Œ±) :=
s.finite_to_set.is_GŒ¥_compl

open topological_space

variables [first_countable_topology Œ±]

lemma is_GŒ¥_singleton (a : Œ±) : is_GŒ¥ ({a} : set Œ±) :=
begin
  rcases (nhds_basis_opens a).exists_antitone_subbasis with ‚ü®U, hU, h_basis‚ü©,
  rw [‚Üê bInter_basis_nhds h_basis.to_has_basis],
  exact is_GŒ¥_bInter (countable_encodable _) (Œª n hn, (hU n).2.is_GŒ¥),
end

lemma set.finite.is_GŒ¥ {s : set Œ±} (hs : finite s) : is_GŒ¥ s :=
finite.induction_on hs is_GŒ¥_empty $ Œª a s _ _ hs, (is_GŒ¥_singleton a).union hs

end t1_space

end is_GŒ¥

section continuous_at

open topological_space
open_locale uniformity

variables [topological_space Œ±]

/-- The set of points where a function is continuous is a GŒ¥ set. -/
lemma is_GŒ¥_set_of_continuous_at [uniform_space Œ≤] [is_countably_generated (ùì§ Œ≤)] (f : Œ± ‚Üí Œ≤) :
  is_GŒ¥ {x | continuous_at f x} :=
begin
  obtain ‚ü®U, hUo, hU‚ü© := (@uniformity_has_basis_open_symmetric Œ≤ _).exists_antitone_subbasis,
  simp only [uniform.continuous_at_iff_prod, nhds_prod_eq],
  simp only [(nhds_basis_opens _).prod_self.tendsto_iff hU.to_has_basis, forall_prop_of_true,
    set_of_forall, id],
  refine is_GŒ¥_Inter (Œª k, is_open.is_GŒ¥ $ is_open_iff_mem_nhds.2 $ Œª x, _),
  rintros ‚ü®s, ‚ü®hsx, hso‚ü©, hsU‚ü©,
  filter_upwards [is_open.mem_nhds hso hsx] with _ hy using ‚ü®s, ‚ü®hy, hso‚ü©, hsU‚ü©,
end

end continuous_at

/-- A set `s` is called *residual* if it includes a dense `GŒ¥` set. If `Œ±` is a Baire space
(e.g., a complete metric space), then residual sets form a filter, see `mem_residual`.

For technical reasons we define the filter `residual` in any topological space but in a non-Baire
space it is not useful because it may contain some non-residual sets. -/
def residual (Œ± : Type*) [topological_space Œ±] : filter Œ± :=
‚®Ö t (ht : is_GŒ¥ t) (ht' : dense t), ùìü t
