/-
Copyright (c) 2021 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import topology.compact_open
import topology.uniform_space.uniform_convergence

/-!
# Compact convergence (uniform convergence on compact sets)

Given a topological space `Œ±` and a uniform space `Œ≤` (e.g., a metric space or a topological group),
the space of continuous maps `C(Œ±, Œ≤)` carries a natural uniform space structure. We define this
uniform space structure in this file and also prove the following properties of the topology it
induces on `C(Œ±, Œ≤)`:

 1. Given a sequence of continuous functions `F‚Çô : Œ± ‚Üí Œ≤` together with some continuous `f : Œ± ‚Üí Œ≤`,
    then `F‚Çô` converges to `f` as a sequence in `C(Œ±, Œ≤)` iff `F‚Çô` converges to `f` uniformly on
    each compact subset `K` of `Œ±`.
 2. Given `F‚Çô` and `f` as above and suppose `Œ±` is locally compact, then `F‚Çô` converges to `f` iff
    `F‚Çô` converges to `f` locally uniformly.
 3. The topology coincides with the compact-open topology.

Property 1 is essentially true by definition, 2 follows from basic results about uniform
convergence, but 3 requires a little work and uses the Lebesgue number lemma.

## The uniform space structure

Given subsets `K ‚äÜ Œ±` and `V ‚äÜ Œ≤ √ó Œ≤`, let `E(K, V) ‚äÜ C(Œ±, Œ≤) √ó C(Œ±, Œ≤)` be the set of pairs of
continuous functions `Œ± ‚Üí Œ≤` which are `V`-close on `K`:
$$
  E(K, V) = \{ (f, g) | ‚àÄ (x ‚àà K), (f x, g x) ‚àà V \}.
$$
Fixing some `f ‚àà C(Œ±, Œ≤)`, let `N(K, V, f) ‚äÜ C(Œ±, Œ≤)` be the set of continuous functions `Œ± ‚Üí Œ≤`
which are `V`-close to `f` on `K`:
$$
  N(K, V, f) = \{ g | ‚àÄ (x ‚àà K), (f x, g x) ‚àà V \}.
$$
Using this notation we can describe the uniform space structure and the topology it induces.
Specifically:
 *  A subset `X ‚äÜ C(Œ±, Œ≤) √ó C(Œ±, Œ≤)` is an entourage for the uniform space structure on `C(Œ±, Œ≤)`
    iff there exists a compact `K` and entourage `V` such that `E(K, V) ‚äÜ X`.
 *  A subset `Y ‚äÜ C(Œ±, Œ≤)` is a neighbourhood of `f` iff there exists a compact `K` and entourage
    `V` such that `N(K, V, f) ‚äÜ Y`.

The topology on `C(Œ±, Œ≤)` thus has a natural subbasis (the compact-open subbasis) and a natural
neighbourhood basis (the compact-convergence neighbourhood basis).

## Main definitions / results

 * `compact_open_eq_compact_convergence`: the compact-open topology is equal to the
   compact-convergence topology.
 * `compact_convergence_uniform_space`: the uniform space structure on `C(Œ±, Œ≤)`.
 * `mem_compact_convergence_entourage_iff`: a characterisation of the entourages of `C(Œ±, Œ≤)`.
 * `tendsto_iff_forall_compact_tendsto_uniformly_on`: a sequence of functions `F‚Çô` in `C(Œ±, Œ≤)`
   converges to some `f` iff `F‚Çô` converges to `f` uniformly on each compact subset `K` of `Œ±`.
 * `tendsto_iff_tendsto_locally_uniformly`: on a locally compact space, a sequence of functions
   `F‚Çô` in `C(Œ±, Œ≤)` converges to some `f` iff `F‚Çô` converges to `f` locally uniformly.
 * `tendsto_iff_tendsto_uniformly`: on a compact space, a sequence of functions `F‚Çô` in `C(Œ±, Œ≤)`
   converges to some `f` iff `F‚Çô` converges to `f` uniformly.

## Implementation details

We use the forgetful inheritance pattern (see Note [forgetful inheritance]) to make the topology
of the uniform space structure on `C(Œ±, Œ≤)` definitionally equal to the compact-open topology.

## TODO

 * When `Œ≤` is a metric space, there is natural basis for the compact-convergence topology
   parameterised by triples `(K, Œµ, f)` for a real number `Œµ > 0`.
 * When `Œ±` is compact and `Œ≤` is a metric space, the compact-convergence topology (and thus also
   the compact-open topology) is metrisable.
 * Results about uniformly continuous functions `Œ≥ ‚Üí C(Œ±, Œ≤)` and uniform limits of sequences
   `Œπ ‚Üí Œ≥ ‚Üí C(Œ±, Œ≤)`.
-/

universes u‚ÇÅ u‚ÇÇ u‚ÇÉ

open_locale filter uniformity topological_space
open uniform_space set filter

variables {Œ± : Type u‚ÇÅ} {Œ≤ : Type u‚ÇÇ} [topological_space Œ±] [uniform_space Œ≤]
variables (K : set Œ±) (V : set (Œ≤ √ó Œ≤)) (f : C(Œ±, Œ≤))

namespace continuous_map

/-- Given `K ‚äÜ Œ±`, `V ‚äÜ Œ≤ √ó Œ≤`, and `f : C(Œ±, Œ≤)`, we define `compact_conv_nhd K V f` to be the set
of `g : C(Œ±, Œ≤)` that are `V`-close to `f` on `K`. -/
def compact_conv_nhd : set C(Œ±, Œ≤) := { g | ‚àÄ (x ‚àà K), (f x, g x) ‚àà V }

variables {K V}

lemma self_mem_compact_conv_nhd (hV : V ‚àà ùì§ Œ≤) : f ‚àà compact_conv_nhd K V f :=
Œª x hx, refl_mem_uniformity hV

@[mono] lemma compact_conv_nhd_mono {V' : set (Œ≤ √ó Œ≤)} (hV' : V' ‚äÜ V) :
  compact_conv_nhd K V' f ‚äÜ compact_conv_nhd K V f :=
Œª x hx a ha, hV' (hx a ha)

lemma compact_conv_nhd_mem_comp {g‚ÇÅ g‚ÇÇ : C(Œ±, Œ≤)} {V' : set (Œ≤ √ó Œ≤)}
  (hg‚ÇÅ : g‚ÇÅ ‚àà compact_conv_nhd K V f) (hg‚ÇÇ : g‚ÇÇ ‚àà compact_conv_nhd K V' g‚ÇÅ) :
  g‚ÇÇ ‚àà compact_conv_nhd K (V ‚óã V') f :=
Œª x hx, ‚ü®g‚ÇÅ x, hg‚ÇÅ x hx, hg‚ÇÇ x hx‚ü©

/-- A key property of `compact_conv_nhd`. It allows us to apply
`topological_space.nhds_mk_of_nhds_filter_basis` below. -/
lemma compact_conv_nhd_nhd_basis (hV : V ‚àà ùì§ Œ≤) :
  ‚àÉ (V' ‚àà ùì§ Œ≤), V' ‚äÜ V ‚àß ‚àÄ (g ‚àà compact_conv_nhd K V' f),
    compact_conv_nhd K V' g ‚äÜ compact_conv_nhd K V f :=
begin
  obtain ‚ü®V', h‚ÇÅ, h‚ÇÇ‚ü© := comp_mem_uniformity_sets hV,
  exact ‚ü®V', h‚ÇÅ, subset.trans (subset_comp_self_of_mem_uniformity h‚ÇÅ) h‚ÇÇ, Œª g hg g' hg',
    compact_conv_nhd_mono f h‚ÇÇ (compact_conv_nhd_mem_comp f hg hg')‚ü©,
end

lemma compact_conv_nhd_subset_inter (K‚ÇÅ K‚ÇÇ : set Œ±) (V‚ÇÅ V‚ÇÇ : set (Œ≤ √ó Œ≤)) :
  compact_conv_nhd (K‚ÇÅ ‚à™ K‚ÇÇ) (V‚ÇÅ ‚à© V‚ÇÇ) f ‚äÜ
  compact_conv_nhd K‚ÇÅ V‚ÇÅ f ‚à© compact_conv_nhd K‚ÇÇ V‚ÇÇ f :=
Œª g hg, ‚ü®Œª x hx, mem_of_mem_inter_left (hg x (mem_union_left K‚ÇÇ hx)),
         Œª x hx, mem_of_mem_inter_right (hg x (mem_union_right K‚ÇÅ hx))‚ü©

lemma compact_conv_nhd_compact_entourage_nonempty :
  { KV : set Œ± √ó set (Œ≤ √ó Œ≤) | is_compact KV.1 ‚àß KV.2 ‚àà ùì§ Œ≤ }.nonempty :=
‚ü®‚ü®‚àÖ, univ‚ü©, is_compact_empty, filter.univ_mem‚ü©

lemma compact_conv_nhd_filter_is_basis : filter.is_basis
  (Œª (KV : set Œ± √ó set (Œ≤ √ó Œ≤)), is_compact KV.1 ‚àß KV.2 ‚àà ùì§ Œ≤)
  (Œª KV, compact_conv_nhd KV.1 KV.2 f) :=
{ nonempty := compact_conv_nhd_compact_entourage_nonempty,
  inter    :=
    begin
      rintros ‚ü®K‚ÇÅ, V‚ÇÅ‚ü© ‚ü®K‚ÇÇ, V‚ÇÇ‚ü© ‚ü®hK‚ÇÅ, hV‚ÇÅ‚ü© ‚ü®hK‚ÇÇ, hV‚ÇÇ‚ü©,
      exact ‚ü®‚ü®K‚ÇÅ ‚à™ K‚ÇÇ, V‚ÇÅ ‚à© V‚ÇÇ‚ü©, ‚ü®hK‚ÇÅ.union hK‚ÇÇ, filter.inter_mem hV‚ÇÅ hV‚ÇÇ‚ü©,
        compact_conv_nhd_subset_inter f K‚ÇÅ K‚ÇÇ V‚ÇÅ V‚ÇÇ‚ü©,
    end, }

/-- A filter basis for the neighbourhood filter of a point in the compact-convergence topology. -/
def compact_convergence_filter_basis (f : C(Œ±, Œ≤)) : filter_basis C(Œ±, Œ≤) :=
(compact_conv_nhd_filter_is_basis f).filter_basis

lemma mem_compact_convergence_nhd_filter (Y : set C(Œ±, Œ≤)) :
  Y ‚àà (compact_convergence_filter_basis f).filter ‚Üî
  ‚àÉ (K : set Œ±) (V : set (Œ≤ √ó Œ≤)) (hK : is_compact K) (hV : V ‚àà ùì§ Œ≤), compact_conv_nhd K V f ‚äÜ Y :=
begin
  split,
  { rintros ‚ü®X, ‚ü®‚ü®K, V‚ü©, ‚ü®hK, hV‚ü©, rfl‚ü©, hY‚ü©,
    exact ‚ü®K, V, hK, hV, hY‚ü©, },
  { rintros ‚ü®K, V, hK, hV, hY‚ü©,
    exact ‚ü®compact_conv_nhd K V f, ‚ü®‚ü®K, V‚ü©, ‚ü®hK, hV‚ü©, rfl‚ü©, hY‚ü©, },
end

/-- The compact-convergence topology. In fact, see `compact_open_eq_compact_convergence` this is
the same as the compact-open topology. This definition is thus an auxiliary convenience definition
and is unlikely to be of direct use. -/
def compact_convergence_topology : topological_space C(Œ±, Œ≤) :=
topological_space.mk_of_nhds $ Œª f, (compact_convergence_filter_basis f).filter

lemma nhds_compact_convergence :
  @nhds _ compact_convergence_topology f = (compact_convergence_filter_basis f).filter :=
begin
  rw topological_space.nhds_mk_of_nhds_filter_basis;
  rintros g - ‚ü®‚ü®K, V‚ü©, ‚ü®hK, hV‚ü©, rfl‚ü©,
  { exact self_mem_compact_conv_nhd g hV, },
  { obtain ‚ü®V', hV', h‚ÇÅ, h‚ÇÇ‚ü© := compact_conv_nhd_nhd_basis g hV,
    exact ‚ü®compact_conv_nhd K V' g, ‚ü®‚ü®K, V'‚ü©, ‚ü®hK, hV'‚ü©, rfl‚ü©, compact_conv_nhd_mono g h‚ÇÅ,
      Œª g' hg', ‚ü®compact_conv_nhd K V' g', ‚ü®‚ü®K, V'‚ü©, ‚ü®hK, hV'‚ü©, rfl‚ü©, h‚ÇÇ g' hg'‚ü©‚ü©, },
end

lemma has_basis_nhds_compact_convergence :
  has_basis (@nhds _ compact_convergence_topology f)
  (Œª (p : set Œ± √ó set (Œ≤ √ó Œ≤)), is_compact p.1 ‚àß p.2 ‚àà ùì§ Œ≤) (Œª p, compact_conv_nhd p.1 p.2 f) :=
(nhds_compact_convergence f).symm ‚ñ∏ (compact_conv_nhd_filter_is_basis f).has_basis

/-- This is an auxiliary lemma and is unlikely to be of direct use outside of this file. See
`tendsto_iff_forall_compact_tendsto_uniformly_on` below for the useful version where the topology
is picked up via typeclass inference. -/
lemma tendsto_iff_forall_compact_tendsto_uniformly_on'
  {Œπ : Type u‚ÇÉ} {p : filter Œπ} {F : Œπ ‚Üí C(Œ±, Œ≤)} :
  filter.tendsto F p (@nhds _ compact_convergence_topology f) ‚Üî
  ‚àÄ K, is_compact K ‚Üí tendsto_uniformly_on (Œª i a, F i a) f p K :=
begin
  simp only [(has_basis_nhds_compact_convergence f).tendsto_right_iff, tendsto_uniformly_on,
    and_imp, prod.forall],
  refine forall_congr (Œª K, _),
  rw forall_swap,
  exact forall‚ÇÉ_congr (Œª hK V hV, iff.rfl),
end

/-- Any point of `compact_open.gen K U` is also an interior point wrt the topology of compact
convergence.

The topology of compact convergence is thus at least as fine as the compact-open topology. -/
lemma compact_conv_nhd_subset_compact_open (hK : is_compact K) {U : set Œ≤} (hU : is_open U)
  (hf : f ‚àà compact_open.gen K U) :
  ‚àÉ (V ‚àà ùì§ Œ≤), is_open V ‚àß compact_conv_nhd K V f ‚äÜ compact_open.gen K U :=
begin
  obtain ‚ü®V, hV‚ÇÅ, hV‚ÇÇ, hV‚ÇÉ‚ü© := lebesgue_number_of_compact_open (hK.image f.continuous) hU hf,
  refine ‚ü®V, hV‚ÇÅ, hV‚ÇÇ, _‚ü©,
  rintros g hg - ‚ü®x, hx, rfl‚ü©,
  exact hV‚ÇÉ (f x) ‚ü®x, hx, rfl‚ü© (hg x hx),
end

/-- The point `f` in `compact_conv_nhd K V f` is also an interior point wrt the compact-open
topology.

Since `compact_conv_nhd K V f` are a neighbourhood basis at `f` for each `f`, it follows that
the compact-open topology is at least as fine as the topology of compact convergence. -/
lemma Inter_compact_open_gen_subset_compact_conv_nhd (hK : is_compact K) (hV : V ‚àà ùì§ Œ≤) :
  ‚àÉ (Œπ : Sort (u‚ÇÅ + 1)) [fintype Œπ]
  (C : Œπ ‚Üí set Œ±) (hC : ‚àÄ i, is_compact (C i))
  (U : Œπ ‚Üí set Œ≤) (hU : ‚àÄ i, is_open (U i)),
  (f ‚àà ‚ãÇ i, compact_open.gen (C i) (U i)) ‚àß
  (‚ãÇ i, compact_open.gen (C i) (U i)) ‚äÜ compact_conv_nhd K V f :=
begin
  obtain ‚ü®W, hW‚ÇÅ, hW‚ÇÑ, hW‚ÇÇ, hW‚ÇÉ‚ü© := comp_open_symm_mem_uniformity_sets hV,
  obtain ‚ü®Z, hZ‚ÇÅ, hZ‚ÇÑ, hZ‚ÇÇ, hZ‚ÇÉ‚ü© := comp_open_symm_mem_uniformity_sets hW‚ÇÅ,
  let U : Œ± ‚Üí set Œ± := Œª x, f‚Åª¬π' (ball (f x) Z),
  have hU : ‚àÄ x, is_open (U x) := Œª x, f.continuous.is_open_preimage _ (is_open_ball _ hZ‚ÇÑ),
  have hUK : K ‚äÜ ‚ãÉ (x : K), U (x : K),
  { intros x hx,
    simp only [exists_prop, mem_Union, Union_coe_set, mem_preimage],
    exact ‚ü®(‚ü®x, hx‚ü© : K), by simp [hx, mem_ball_self (f x) hZ‚ÇÅ]‚ü©, },
  obtain ‚ü®t, ht‚ü© := hK.elim_finite_subcover _ (Œª (x : K), hU x.val) hUK,
  let C : t ‚Üí set Œ± := Œª i, K ‚à© closure (U ((i : K) : Œ±)),
  have hC : K ‚äÜ ‚ãÉ i, C i,
  { rw [‚Üê K.inter_Union, subset_inter_iff],
    refine ‚ü®subset.rfl, ht.trans _‚ü©,
    simp only [set_coe.forall, subtype.coe_mk, Union_subset_iff],
    exact Œª x hx‚ÇÅ hx‚ÇÇ, subset_Union_of_subset (‚ü®_, hx‚ÇÇ‚ü© : t) (by simp [subset_closure]) },
  have hfC : ‚àÄ (i : t), C i ‚äÜ f ‚Åª¬π' ball (f ((i : K) : Œ±)) W,
  { simp only [‚Üê image_subset_iff, ‚Üê mem_preimage],
    rintros ‚ü®‚ü®x, hx‚ÇÅ‚ü©, hx‚ÇÇ‚ü©,
    have hZW : closure (ball (f x) Z) ‚äÜ ball (f x) W,
    { intros y hy,
      obtain ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü© := uniform_space.mem_closure_iff_ball.mp hy hZ‚ÇÅ,
      exact ball_mono hZ‚ÇÉ _ (mem_ball_comp hz‚ÇÇ ((mem_ball_symmetry hZ‚ÇÇ).mp hz‚ÇÅ)), },
    calc f '' (K ‚à© closure (U x)) ‚äÜ f '' (closure (U x)) : image_subset _ (inter_subset_right _ _)
                              ... ‚äÜ closure (f '' (U x)) : f.continuous.continuous_on.image_closure
                              ... ‚äÜ closure (ball (f x) Z) : by { apply closure_mono, simp, }
                              ... ‚äÜ ball (f x) W : hZW, },
  refine ‚ü®t, t.fintype_coe_sort, C,
          Œª i, hK.inter_right is_closed_closure,
          Œª i, ball (f ((i : K) : Œ±)) W,
          Œª i, is_open_ball _ hW‚ÇÑ,
          by simp [compact_open.gen, hfC],
          Œª g hg x hx, hW‚ÇÉ (mem_comp_rel.mpr _)‚ü©,
  simp only [mem_Inter, compact_open.gen, mem_set_of_eq, image_subset_iff] at hg,
  obtain ‚ü®y, hy‚ü© := mem_Union.mp (hC hx),
  exact ‚ü®f y, (mem_ball_symmetry hW‚ÇÇ).mp (hfC y hy), mem_preimage.mp (hg y hy)‚ü©,
end

/-- The compact-open topology is equal to the compact-convergence topology. -/
lemma compact_open_eq_compact_convergence :
  continuous_map.compact_open = (compact_convergence_topology : topological_space C(Œ±, Œ≤)) :=
begin
  rw [compact_convergence_topology, continuous_map.compact_open],
  refine le_antisymm _ _,
  { refine Œª X hX, is_open_iff_forall_mem_open.mpr (Œª f hf, _),
    have hXf : X ‚àà (compact_convergence_filter_basis f).filter,
    { rw ‚Üê nhds_compact_convergence,
      exact @is_open.mem_nhds C(Œ±, Œ≤) compact_convergence_topology _ _ hX hf, },
    obtain ‚ü®-, ‚ü®‚ü®K, V‚ü©, ‚ü®hK, hV‚ü©, rfl‚ü©, hXf‚ü© := hXf,
    obtain ‚ü®Œπ, hŒπ, C, hC, U, hU, h‚ÇÅ, h‚ÇÇ‚ü© := Inter_compact_open_gen_subset_compact_conv_nhd f hK hV,
    haveI := hŒπ,
    exact ‚ü®‚ãÇ i, compact_open.gen (C i) (U i), h‚ÇÇ.trans hXf,
      is_open_Inter (Œª i, continuous_map.is_open_gen (hC i) (hU i)), h‚ÇÅ‚ü©, },
  { simp only [le_generate_from_iff_subset_is_open, and_imp, exists_prop, forall_exists_index,
      set_of_subset_set_of],
    rintros - K hK U hU rfl f hf,
    obtain ‚ü®V, hV, hV', hVf‚ü© := compact_conv_nhd_subset_compact_open f hK hU hf,
    exact filter.mem_of_superset (filter_basis.mem_filter_of_mem _ ‚ü®‚ü®K, V‚ü©, ‚ü®hK, hV‚ü©, rfl‚ü©) hVf, },
end

/-- The filter on `C(Œ±, Œ≤) √ó C(Œ±, Œ≤)` which underlies the uniform space structure on `C(Œ±, Œ≤)`. -/
def compact_convergence_uniformity : filter (C(Œ±, Œ≤) √ó C(Œ±, Œ≤)) :=
‚®Ö KV ‚àà { KV : set Œ± √ó set (Œ≤ √ó Œ≤) | is_compact KV.1 ‚àß KV.2 ‚àà ùì§ Œ≤ },
ùìü { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ (x : Œ±), x ‚àà KV.1 ‚Üí (fg.1 x, fg.2 x) ‚àà KV.2 }

/-- An intermediate lemma. Usually `mem_compact_convergence_entourage_iff` is more useful. -/
lemma mem_compact_convergence_uniformity (X : set (C(Œ±, Œ≤) √ó C(Œ±, Œ≤))) :
  X ‚àà @compact_convergence_uniformity Œ± Œ≤ _ _ ‚Üî
  ‚àÉ (K : set Œ±) (V : set (Œ≤ √ó Œ≤)) (hK : is_compact K) (hV : V ‚àà ùì§ Œ≤),
    { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ x ‚àà K, (fg.1 x, fg.2 x) ‚àà V } ‚äÜ X :=
begin
  rw [compact_convergence_uniformity,
    (filter.has_basis_binfi_principal _ compact_conv_nhd_compact_entourage_nonempty).mem_iff],
  { simp only [exists_prop, prod.forall, set_of_subset_set_of, mem_set_of_eq, prod.exists],
    exact exists‚ÇÇ_congr (Œª K V, by tauto) },
  { rintros ‚ü®K‚ÇÅ, V‚ÇÅ‚ü© ‚ü®hK‚ÇÅ, hV‚ÇÅ‚ü© ‚ü®K‚ÇÇ, V‚ÇÇ‚ü© ‚ü®hK‚ÇÇ, hV‚ÇÇ‚ü©,
    refine ‚ü®‚ü®K‚ÇÅ ‚à™ K‚ÇÇ, V‚ÇÅ ‚à© V‚ÇÇ‚ü©, ‚ü®hK‚ÇÅ.union hK‚ÇÇ, filter.inter_mem hV‚ÇÅ hV‚ÇÇ‚ü©, _‚ü©,
    simp only [le_eq_subset, prod.forall, set_of_subset_set_of, ge_iff_le, order.preimage,
      ‚Üê forall_and_distrib, mem_inter_eq, mem_union_eq],
    exact Œª f g, forall_imp (Œª x, by tauto!), },
end

/-- Note that we ensure the induced topology is definitionally the compact-open topology. -/
instance compact_convergence_uniform_space : uniform_space C(Œ±, Œ≤) :=
{ uniformity := compact_convergence_uniformity,
  refl :=
    begin
      simp only [compact_convergence_uniformity, and_imp, filter.le_principal_iff, prod.forall,
        filter.mem_principal, mem_set_of_eq, le_infi_iff, id_rel_subset],
      exact Œª K V hK hV f x hx, refl_mem_uniformity hV,
    end,
  symm :=
    begin
      simp only [compact_convergence_uniformity, and_imp, prod.forall, mem_set_of_eq, prod.fst_swap,
        filter.tendsto_principal, prod.snd_swap, filter.tendsto_infi],
      intros K V hK hV,
      obtain ‚ü®V', hV', hsymm, hsub‚ü© := symm_of_uniformity hV,
      let X := { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ (x : Œ±), x ‚àà K ‚Üí (fg.1 x, fg.2 x) ‚àà V' },
      have hX : X ‚àà compact_convergence_uniformity :=
        (mem_compact_convergence_uniformity X).mpr ‚ü®K, V', hK, hV', by simp‚ü©,
      exact filter.eventually_of_mem hX (Œª fg hfg x hx, hsub (hsymm _ _ (hfg x hx))),
    end,
  comp := Œª X hX,
    begin
      obtain ‚ü®K, V, hK, hV, hX‚ü© := (mem_compact_convergence_uniformity X).mp hX,
      obtain ‚ü®V', hV', hcomp‚ü© := comp_mem_uniformity_sets hV,
      let h := Œª (s : set (C(Œ±, Œ≤) √ó C(Œ±, Œ≤))), s ‚óã s,
      suffices : h {fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ (x ‚àà K), (fg.1 x, fg.2 x) ‚àà V'} ‚àà
                 compact_convergence_uniformity.lift' h,
      { apply filter.mem_of_superset this,
        rintros ‚ü®f, g‚ü© ‚ü®z, hz‚ÇÅ, hz‚ÇÇ‚ü©,
        refine hX (Œª x hx, hcomp _),
        exact ‚ü®z x, hz‚ÇÅ x hx, hz‚ÇÇ x hx‚ü©, },
      apply filter.mem_lift',
      exact (mem_compact_convergence_uniformity _).mpr ‚ü®K, V', hK, hV', subset.refl _‚ü©,
    end,
  is_open_uniformity :=
    begin
      rw compact_open_eq_compact_convergence,
      refine Œª Y, forall‚ÇÇ_congr (Œª f hf, _),
      simp only [mem_compact_convergence_nhd_filter, mem_compact_convergence_uniformity,
        prod.forall, set_of_subset_set_of, compact_conv_nhd],
      refine exists‚ÇÑ_congr (Œª K V hK hV, ‚ü®_, Œª hY g hg, hY f g hg rfl‚ü©),
      rintros hY g‚ÇÅ g‚ÇÇ hg‚ÇÅ rfl,
      exact hY hg‚ÇÅ,
    end }

lemma mem_compact_convergence_entourage_iff (X : set (C(Œ±, Œ≤) √ó C(Œ±, Œ≤))) :
  X ‚àà ùì§ C(Œ±, Œ≤) ‚Üî ‚àÉ (K : set Œ±) (V : set (Œ≤ √ó Œ≤)) (hK : is_compact K) (hV : V ‚àà ùì§ Œ≤),
    { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ x ‚àà K, (fg.1 x, fg.2 x) ‚àà V } ‚äÜ X :=
mem_compact_convergence_uniformity X

lemma has_basis_compact_convergence_uniformity :
  has_basis (ùì§ C(Œ±, Œ≤)) (Œª p : set Œ± √ó set (Œ≤ √ó Œ≤), is_compact p.1 ‚àß p.2 ‚àà ùì§ Œ≤)
            (Œª p, { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ x ‚àà p.1, (fg.1 x, fg.2 x) ‚àà p.2 }) :=
‚ü®Œª t, by { simp only [mem_compact_convergence_entourage_iff, prod.exists], tauto, }‚ü©

variables {Œπ : Type u‚ÇÉ} {p : filter Œπ} {F : Œπ ‚Üí C(Œ±, Œ≤)} {f}

lemma tendsto_iff_forall_compact_tendsto_uniformly_on :
  tendsto F p (ùìù f) ‚Üî ‚àÄ K, is_compact K ‚Üí tendsto_uniformly_on (Œª i a, F i a) f p K :=
by rw [compact_open_eq_compact_convergence, tendsto_iff_forall_compact_tendsto_uniformly_on']

/-- Locally uniform convergence implies convergence in the compact-open topology. -/
lemma tendsto_of_tendsto_locally_uniformly
  (h : tendsto_locally_uniformly (Œª i a, F i a) f p) : tendsto F p (ùìù f) :=
begin
  rw tendsto_iff_forall_compact_tendsto_uniformly_on,
  intros K hK,
  rw ‚Üê tendsto_locally_uniformly_on_iff_tendsto_uniformly_on_of_compact hK,
  exact h.tendsto_locally_uniformly_on,
end

/-- If every point has a compact neighbourhood, then convergence in the compact-open topology
implies locally uniform convergence.

See also `tendsto_iff_tendsto_locally_uniformly`, especially for T2 spaces. -/
lemma tendsto_locally_uniformly_of_tendsto
  (hŒ± : ‚àÄ x : Œ±, ‚àÉ n, is_compact n ‚àß n ‚àà ùìù x) (h : tendsto F p (ùìù f)) :
  tendsto_locally_uniformly (Œª i a, F i a) f p :=
begin
  rw tendsto_iff_forall_compact_tendsto_uniformly_on at h,
  intros V hV x,
  obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := hŒ± x,
  exact ‚ü®n, hn‚ÇÇ, h n hn‚ÇÅ V hV‚ü©,
end

/-- Convergence in the compact-open topology is the same as locally uniform convergence on a locally
compact space.

For non-T2 spaces, the assumption `locally_compact_space Œ±` is stronger than we need and in fact
the `‚Üê` direction is true unconditionally. See `tendsto_locally_uniformly_of_tendsto` and
`tendsto_of_tendsto_locally_uniformly` for versions requiring weaker hypotheses. -/
lemma tendsto_iff_tendsto_locally_uniformly [locally_compact_space Œ±] :
  tendsto F p (ùìù f) ‚Üî tendsto_locally_uniformly (Œª i a, F i a) f p :=
‚ü®tendsto_locally_uniformly_of_tendsto exists_compact_mem_nhds, tendsto_of_tendsto_locally_uniformly‚ü©

section compact_domain

variables [compact_space Œ±]

lemma has_basis_compact_convergence_uniformity_of_compact :
  has_basis (ùì§ C(Œ±, Œ≤)) (Œª V : set (Œ≤ √ó Œ≤), V ‚àà ùì§ Œ≤)
            (Œª V, { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ x, (fg.1 x, fg.2 x) ‚àà V }) :=
has_basis_compact_convergence_uniformity.to_has_basis
  (Œª p hp, ‚ü®p.2, hp.2, Œª fg hfg x hx, hfg x‚ü©)
  (Œª V hV, ‚ü®‚ü®univ, V‚ü©, ‚ü®compact_univ, hV‚ü©, Œª fg hfg x, hfg x (mem_univ x)‚ü©)

/-- Convergence in the compact-open topology is the same as uniform convergence for sequences of
continuous functions on a compact space. -/
lemma tendsto_iff_tendsto_uniformly :
  tendsto F p (ùìù f) ‚Üî tendsto_uniformly (Œª i a, F i a) f p :=
begin
  rw [tendsto_iff_forall_compact_tendsto_uniformly_on, ‚Üê tendsto_uniformly_on_univ],
  exact ‚ü®Œª h, h univ compact_univ, Œª h K hK, h.mono (subset_univ K)‚ü©,
end

end compact_domain

end continuous_map
