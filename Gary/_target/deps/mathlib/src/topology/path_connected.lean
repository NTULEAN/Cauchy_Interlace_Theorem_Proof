/-
Copyright (c) 2020 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import topology.algebra.order.proj_Icc
import topology.continuous_function.basic
import topology.unit_interval

/-!
# Path connectedness

## Main definitions

In the file the unit interval `[0, 1]` in `‚Ñù` is denoted by `I`, and `X` is a topological space.

* `path (x y : X)` is the type of paths from `x` to `y`, i.e., continuous maps from `I` to `X`
  mapping `0` to `x` and `1` to `y`.
* `path.map` is the image of a path under a continuous map.
* `joined (x y : X)` means there is a path between `x` and `y`.
* `joined.some_path (h : joined x y)` selects some path between two points `x` and `y`.
* `path_component (x : X)` is the set of points joined to `x`.
* `path_connected_space X` is a predicate class asserting that `X` is non-empty and every two
  points of `X` are joined.

Then there are corresponding relative notions for `F : set X`.

* `joined_in F (x y : X)` means there is a path `Œ≥` joining `x` to `y` with values in `F`.
* `joined_in.some_path (h : joined_in F x y)` selects a path from `x` to `y` inside `F`.
* `path_component_in F (x : X)` is the set of points joined to `x` in `F`.
* `is_path_connected F` asserts that `F` is non-empty and every two
  points of `F` are joined in `F`.
* `loc_path_connected_space X` is a predicate class asserting that `X` is locally path-connected:
  each point has a basis of path-connected neighborhoods (we do *not* ask these to be open).

##¬†Main theorems

* `joined` and `joined_in F` are transitive relations.

One can link the absolute and relative version in two directions, using `(univ : set X)` or the
subtype `‚Ü•F`.

* `path_connected_space_iff_univ : path_connected_space X ‚Üî is_path_connected (univ : set X)`
* `is_path_connected_iff_path_connected_space : is_path_connected F ‚Üî path_connected_space ‚Ü•F`

For locally path connected spaces, we have
* `path_connected_space_iff_connected_space : path_connected_space X ‚Üî connected_space X`
* `is_connected_iff_is_path_connected (U_op : is_open U) : is_path_connected U ‚Üî is_connected U`

## Implementation notes

By default, all paths have `I` as their source and `X` as their target, but there is an
operation `set.Icc_extend` that will extend any continuous map `Œ≥ : I ‚Üí X` into a continuous map
`Icc_extend zero_le_one Œ≥ : ‚Ñù ‚Üí X` that is constant before `0` and after `1`.

This is used to define `path.extend` that turns `Œ≥ : path x y` into a continuous map
`Œ≥.extend : ‚Ñù ‚Üí X` whose restriction to `I` is the original `Œ≥`, and is equal to `x`
on `(-‚àû, 0]` and to `y` on `[1, +‚àû)`.
-/

noncomputable theory
open_locale classical topological_space filter unit_interval
open filter set function unit_interval

variables {X Y : Type*} [topological_space X] [topological_space Y] {x y z : X} {Œπ : Type*}

/-! ### Paths -/

/-- Continuous path connecting two points `x` and `y` in a topological space -/
@[nolint has_inhabited_instance]
structure path (x y : X) extends C(I, X) :=
(source' : to_fun 0 = x)
(target' : to_fun 1 = y)

instance : has_coe_to_fun (path x y) (Œª _, I ‚Üí X) := ‚ü®Œª p, p.to_fun‚ü©

@[ext] protected lemma path.ext : ‚àÄ {Œ≥‚ÇÅ Œ≥‚ÇÇ : path x y}, (Œ≥‚ÇÅ : I ‚Üí X) = Œ≥‚ÇÇ ‚Üí Œ≥‚ÇÅ = Œ≥‚ÇÇ
| ‚ü®‚ü®x, h11‚ü©, h12, h13‚ü© ‚ü®‚ü®.(x), h21‚ü©, h22, h23‚ü© rfl := rfl

namespace path

@[simp] lemma coe_mk (f : I ‚Üí X) (h‚ÇÅ h‚ÇÇ h‚ÇÉ) : ‚áë(mk ‚ü®f, h‚ÇÅ‚ü© h‚ÇÇ h‚ÇÉ : path x y) = f := rfl

variable (Œ≥ : path x y)

@[continuity]
protected lemma continuous : continuous Œ≥ :=
Œ≥.continuous_to_fun

@[simp] protected lemma source : Œ≥ 0 = x :=
Œ≥.source'

@[simp] protected lemma target : Œ≥ 1 = y :=
Œ≥.target'

/-- See Note [custom simps projection]. We need to specify this projection explicitly in this case,
because it is a composition of multiple projections. -/
def simps.apply : I ‚Üí X := Œ≥

initialize_simps_projections path (to_continuous_map_to_fun ‚Üí simps.apply, -to_continuous_map)

@[simp] lemma coe_to_continuous_map : ‚áëŒ≥.to_continuous_map = Œ≥ := rfl

/-- Any function `œÜ : Œ† (a : Œ±), path (x a) (y a)` can be seen as a function `Œ± √ó I ‚Üí X`. -/
instance has_uncurry_path {X Œ± : Type*} [topological_space X] {x y : Œ± ‚Üí X} :
  has_uncurry (Œ† (a : Œ±), path (x a) (y a)) (Œ± √ó I) X :=
‚ü®Œª œÜ p, œÜ p.1 p.2‚ü©

/-- The constant path from a point to itself -/
@[refl, simps] def refl (x : X) : path x x :=
{ to_fun := Œª t, x,
  continuous_to_fun := continuous_const,
  source' := rfl,
  target' := rfl }

@[simp] lemma refl_range {a : X} : range (path.refl a) = {a} :=
by simp [path.refl, has_coe_to_fun.coe, coe_fn]

/-- The reverse of a path from `x` to `y`, as a path from `y` to `x` -/
@[symm, simps] def symm (Œ≥ : path x y) : path y x :=
{ to_fun      := Œ≥ ‚àò œÉ,
  continuous_to_fun := by continuity,
  source'       := by simpa [-path.target] using Œ≥.target,
  target'      := by simpa [-path.source] using Œ≥.source }

@[simp] lemma symm_symm {Œ≥ : path x y} : Œ≥.symm.symm = Œ≥ :=
by { ext, simp }

@[simp] lemma refl_symm {a : X} : (path.refl a).symm = path.refl a :=
by { ext, refl }

@[simp] lemma symm_range {a b : X} (Œ≥ : path a b) : range Œ≥.symm = range Œ≥ :=
begin
  ext x,
  simp only [mem_range, path.symm, has_coe_to_fun.coe, coe_fn, unit_interval.symm, set_coe.exists,
    comp_app, subtype.coe_mk, subtype.val_eq_coe],
  split; rintros ‚ü®y, hy, hxy‚ü©; refine ‚ü®1-y, mem_iff_one_sub_mem.mp hy, _‚ü©; convert hxy,
  simp
end

/-- A continuous map extending a path to `‚Ñù`, constant before `0` and after `1`. -/
def extend : ‚Ñù ‚Üí X := Icc_extend zero_le_one Œ≥

/-- See Note [continuity lemma statement]. -/
lemma _root_.continuous.path_extend {Œ≥ : Y ‚Üí path x y} {f : Y ‚Üí ‚Ñù} (hŒ≥ : continuous ‚ÜøŒ≥)
  (hf : continuous f) : continuous (Œª t, (Œ≥ t).extend (f t)) :=
continuous.Icc_extend hŒ≥ hf

/-- A useful special case of `continuous.path_extend`. -/
@[continuity]
lemma continuous_extend : continuous Œ≥.extend :=
Œ≥.continuous.Icc_extend'

lemma _root_.filter.tendsto.path_extend {X Y : Type*} [topological_space X] [topological_space Y]
  {l r : Y ‚Üí X} {y : Y} {l‚ÇÅ : filter ‚Ñù} {l‚ÇÇ : filter X} {Œ≥ : ‚àÄ y, path (l y) (r y)}
  (hŒ≥ : tendsto ‚ÜøŒ≥ (ùìù y √ó·∂† l‚ÇÅ.map (proj_Icc 0 1 zero_le_one)) l‚ÇÇ) :
  tendsto ‚Üø(Œª x, (Œ≥ x).extend) (ùìù y √ó·∂† l‚ÇÅ) l‚ÇÇ :=
filter.tendsto.Icc_extend _ hŒ≥

lemma _root_.continuous_at.path_extend {g : Y ‚Üí ‚Ñù} {l r : Y ‚Üí X} (Œ≥ : ‚àÄ y, path (l y) (r y)) {y : Y}
  (hŒ≥ : continuous_at ‚ÜøŒ≥ (y, proj_Icc 0 1 zero_le_one (g y)))
  (hg : continuous_at g y) : continuous_at (Œª i, (Œ≥ i).extend (g i)) y :=
hŒ≥.Icc_extend (Œª x, Œ≥ x) hg

@[simp] lemma extend_extends {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) {t : ‚Ñù} (ht : t ‚àà (Icc 0 1 : set ‚Ñù)) : Œ≥.extend t = Œ≥ ‚ü®t, ht‚ü© :=
Icc_extend_of_mem _ Œ≥ ht

lemma extend_zero : Œ≥.extend 0 = x :=
by simp

lemma extend_one : Œ≥.extend 1 = y :=
by simp

@[simp] lemma extend_extends' {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) (t : (Icc 0 1 : set ‚Ñù)) : Œ≥.extend t = Œ≥ t :=
Icc_extend_coe _ Œ≥ t

@[simp] lemma extend_range {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) : range Œ≥.extend = range Œ≥ :=
Icc_extend_range _ Œ≥

lemma extend_of_le_zero {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) {t : ‚Ñù} (ht : t ‚â§ 0) : Œ≥.extend t = a :=
(Icc_extend_of_le_left _ _ ht).trans Œ≥.source

lemma extend_of_one_le {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) {t : ‚Ñù} (ht : 1 ‚â§ t) : Œ≥.extend t = b :=
(Icc_extend_of_right_le _ _ ht).trans Œ≥.target

@[simp] lemma refl_extend {X : Type*} [topological_space X] {a : X} :
  (path.refl a).extend = Œª _, a := rfl

/-- The path obtained from a map defined on `‚Ñù` by restriction to the unit interval. -/
def of_line {f : ‚Ñù ‚Üí X} (hf : continuous_on f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y) : path x y :=
{ to_fun := f ‚àò coe,
  continuous_to_fun := hf.comp_continuous continuous_subtype_coe subtype.prop,
  source' := h‚ÇÄ,
  target' := h‚ÇÅ }

lemma of_line_mem {f : ‚Ñù ‚Üí X} (hf : continuous_on f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y) :
  ‚àÄ t, of_line hf h‚ÇÄ h‚ÇÅ t ‚àà f '' I :=
Œª ‚ü®t, t_in‚ü©, ‚ü®t, t_in, rfl‚ü©

local attribute [simp] Iic_def

/-- Concatenation of two paths from `x` to `y` and from `y` to `z`, putting the first
path on `[0, 1/2]` and the second one on `[1/2, 1]`. -/
@[trans] def trans (Œ≥ : path x y) (Œ≥' : path y z) : path x z :=
{ to_fun := (Œª t : ‚Ñù, if t ‚â§ 1/2 then Œ≥.extend (2*t) else Œ≥'.extend (2*t-1)) ‚àò coe,
  continuous_to_fun :=
  begin
    refine (continuous.if_le _ _ continuous_id continuous_const (by norm_num)).comp
      continuous_subtype_coe,
    -- TODO: the following are provable by `continuity` but it is too slow
    exacts [Œ≥.continuous_extend.comp (continuous_const.mul continuous_id),
      Œ≥'.continuous_extend.comp ((continuous_const.mul continuous_id).sub continuous_const)]
  end,
  source' := by norm_num,
  target' := by norm_num }

lemma trans_apply (Œ≥ : path x y) (Œ≥' : path y z) (t : I) : (Œ≥.trans Œ≥') t =
  if h : (t : ‚Ñù) ‚â§ 1/2 then
    Œ≥ ‚ü®2 * t, (mul_pos_mem_iff zero_lt_two).2 ‚ü®t.2.1, h‚ü©‚ü©
  else
    Œ≥' ‚ü®2 * t - 1, two_mul_sub_one_mem_iff.2 ‚ü®(not_le.1 h).le, t.2.2‚ü©‚ü© :=
show ite _ _ _ = _,
by split_ifs; rw extend_extends

@[simp] lemma trans_symm (Œ≥ : path x y) (Œ≥' : path y z) :
  (Œ≥.trans Œ≥').symm = Œ≥'.symm.trans Œ≥.symm :=
begin
  ext t,
  simp only [trans_apply, ‚Üê one_div, symm_apply, not_le, comp_app],
  split_ifs with h h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ; rw [coe_symm_eq] at h,
  { have ht : (t : ‚Ñù) = 1/2,
    { linarith [unit_interval.nonneg t, unit_interval.le_one t] },
    norm_num [ht] },
  { refine congr_arg _ (subtype.ext _),
    norm_num [sub_sub_assoc_swap, mul_sub] },
  { refine congr_arg _ (subtype.ext _),
    have h : 2 - 2 * (t : ‚Ñù) - 1 = 1 - 2 * t, by linarith,
    norm_num [mul_sub, h] },
  { exfalso, linarith [unit_interval.nonneg t, unit_interval.le_one t] }
end

@[simp] lemma refl_trans_refl {X : Type*} [topological_space X] {a : X} :
  (path.refl a).trans (path.refl a) = path.refl a :=
begin
  ext,
  simp only [path.trans, if_t_t, one_div, path.refl_extend],
  refl
end

lemma trans_range {X : Type*} [topological_space X] {a b c : X}
  (Œ≥‚ÇÅ : path a b) (Œ≥‚ÇÇ : path b c) : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) = range Œ≥‚ÇÅ ‚à™ range Œ≥‚ÇÇ :=
begin
  rw path.trans,
  apply eq_of_subset_of_subset,
  { rintros x ‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü©,
    by_cases h : t ‚â§ 1/2,
    { left,
      use [2*t, ‚ü®by linarith, by linarith‚ü©],
      rw ‚Üê Œ≥‚ÇÅ.extend_extends,
      unfold_coes at hxt,
      simp only [h, comp_app, if_true] at hxt,
      exact hxt },
    { right,
      use [2*t-1, ‚ü®by linarith, by linarith‚ü©],
      rw ‚Üê Œ≥‚ÇÇ.extend_extends,
      unfold_coes at hxt,
      simp only [h, comp_app, if_false] at hxt,
      exact hxt } },
  { rintros x (‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü© | ‚ü®‚ü®t, ht0, ht1‚ü©, hxt‚ü©),
    { use ‚ü®t/2, ‚ü®by linarith, by linarith‚ü©‚ü©,
      unfold_coes,
      have : t/2 ‚â§ 1/2 := by linarith,
      simp only [this, comp_app, if_true],
      ring_nf,
      rwa Œ≥‚ÇÅ.extend_extends },
    { by_cases h : t = 0,
      { use ‚ü®1/2, ‚ü®by linarith, by linarith‚ü©‚ü©,
        unfold_coes,
        simp only [h, comp_app, if_true, le_refl, mul_one_div_cancel (@two_ne_zero ‚Ñù _ _)],
        rw Œ≥‚ÇÅ.extend_one,
        rwa [‚Üê Œ≥‚ÇÇ.extend_extends, h, Œ≥‚ÇÇ.extend_zero] at hxt },
      { use ‚ü®(t+1)/2, ‚ü®by linarith, by linarith‚ü©‚ü©,
        unfold_coes,
        change t ‚â† 0 at h,
        have ht0 := lt_of_le_of_ne ht0 h.symm,
        have : ¬¨ (t+1)/2 ‚â§ 1/2 := by {rw not_le, linarith},
        simp only [comp_app, if_false, this],
        ring_nf,
        rwa Œ≥‚ÇÇ.extend_extends } } }
end

/-- Image of a path from `x` to `y` by a continuous map -/
def map (Œ≥ : path x y) {Y : Type*} [topological_space Y]
  {f : X ‚Üí Y} (h : continuous f) : path (f x) (f y) :=
{ to_fun := f ‚àò Œ≥,
  continuous_to_fun := by continuity,
  source' := by simp,
  target' := by simp }

@[simp] lemma map_coe (Œ≥ : path x y) {Y : Type*} [topological_space Y]
  {f : X ‚Üí Y} (h : continuous f) :
  (Œ≥.map h : I ‚Üí Y) = f ‚àò Œ≥ :=
by { ext t, refl }

@[simp] lemma map_symm (Œ≥ : path x y) {Y : Type*} [topological_space Y]
  {f : X ‚Üí Y} (h : continuous f) :
  (Œ≥.map h).symm = Œ≥.symm.map h := rfl

@[simp] lemma map_trans (Œ≥ : path x y) (Œ≥' : path y z) {Y : Type*} [topological_space Y]
  {f : X ‚Üí Y} (h : continuous f) : (Œ≥.trans Œ≥').map h = (Œ≥.map h).trans (Œ≥'.map h) :=
by { ext t, rw [trans_apply, map_coe, comp_app, trans_apply], split_ifs; refl }

@[simp] lemma map_id (Œ≥ : path x y) : Œ≥.map continuous_id = Œ≥ := by { ext, refl }

@[simp] lemma map_map (Œ≥ : path x y) {Y : Type*} [topological_space Y] {Z : Type*}
  [topological_space Z] {f : X ‚Üí Y} (hf : continuous f) {g : Y ‚Üí Z} (hg : continuous g) :
  (Œ≥.map hf).map hg = Œ≥.map (hg.comp hf) := by { ext, refl }

/-- Casting a path from `x` to `y` to a path from `x'` to `y'` when `x' = x` and `y' = y` -/
def cast (Œ≥ : path x y) {x' y'} (hx : x' = x) (hy : y' = y) : path x' y' :=
{ to_fun := Œ≥,
  continuous_to_fun := Œ≥.continuous,
  source' := by simp [hx],
  target' := by simp [hy] }

@[simp] lemma symm_cast {X : Type*} [topological_space X] {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : X}
  (Œ≥ : path a‚ÇÇ b‚ÇÇ) (ha : a‚ÇÅ = a‚ÇÇ) (hb : b‚ÇÅ = b‚ÇÇ) :
  (Œ≥.cast ha hb).symm = (Œ≥.symm).cast hb ha := rfl

@[simp] lemma trans_cast {X : Type*} [topological_space X] {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ c‚ÇÅ c‚ÇÇ : X}
  (Œ≥ : path a‚ÇÇ b‚ÇÇ) (Œ≥' : path b‚ÇÇ c‚ÇÇ) (ha : a‚ÇÅ = a‚ÇÇ) (hb : b‚ÇÅ = b‚ÇÇ) (hc : c‚ÇÅ = c‚ÇÇ) :
  (Œ≥.cast ha hb).trans (Œ≥'.cast hb hc) = (Œ≥.trans Œ≥').cast ha hc := rfl

@[simp] lemma cast_coe (Œ≥ : path x y) {x' y'} (hx : x' = x) (hy : y' = y) :
  (Œ≥.cast hx hy : I ‚Üí X) = Œ≥ :=
rfl

@[continuity]
lemma symm_continuous_family {X Œπ : Type*} [topological_space X] [topological_space Œπ]
  {a b : Œπ ‚Üí X} (Œ≥ : Œ† (t : Œπ), path (a t) (b t)) (h : continuous ‚ÜøŒ≥) :
  continuous ‚Üø(Œª t, (Œ≥ t).symm) :=
h.comp (continuous_id.prod_map continuous_symm)

@[continuity]
lemma continuous_uncurry_extend_of_continuous_family {X Œπ : Type*} [topological_space X]
  [topological_space Œπ] {a b : Œπ ‚Üí X}  (Œ≥ : Œ† (t : Œπ), path (a t) (b t)) (h : continuous ‚ÜøŒ≥) :
  continuous ‚Üø(Œª t, (Œ≥ t).extend) :=
h.comp (continuous_id.prod_map continuous_proj_Icc)

@[continuity]
lemma trans_continuous_family {X Œπ : Type*} [topological_space X] [topological_space Œπ]
  {a b c : Œπ ‚Üí X}
  (Œ≥‚ÇÅ : Œ† (t : Œπ), path (a t) (b t)) (h‚ÇÅ : continuous ‚ÜøŒ≥‚ÇÅ)
  (Œ≥‚ÇÇ : Œ† (t : Œπ), path (b t) (c t)) (h‚ÇÇ : continuous ‚ÜøŒ≥‚ÇÇ) :
  continuous ‚Üø(Œª t, (Œ≥‚ÇÅ t).trans (Œ≥‚ÇÇ t)) :=
begin
  have h‚ÇÅ' := path.continuous_uncurry_extend_of_continuous_family Œ≥‚ÇÅ h‚ÇÅ,
  have h‚ÇÇ' := path.continuous_uncurry_extend_of_continuous_family Œ≥‚ÇÇ h‚ÇÇ,
  simp only [has_uncurry.uncurry, has_coe_to_fun.coe, coe_fn, path.trans, (‚àò)],
  refine continuous.if_le _ _ (continuous_subtype_coe.comp continuous_snd) continuous_const _,
  { change continuous ((Œª p : Œπ √ó ‚Ñù, (Œ≥‚ÇÅ p.1).extend p.2) ‚àò (prod.map id (Œª x, 2*x : I ‚Üí ‚Ñù))),
    exact h‚ÇÅ'.comp (continuous_id.prod_map $ continuous_const.mul continuous_subtype_coe) },
  { change continuous ((Œª p : Œπ √ó ‚Ñù, (Œ≥‚ÇÇ p.1).extend p.2) ‚àò (prod.map id (Œª x, 2*x - 1 : I ‚Üí ‚Ñù))),
    exact h‚ÇÇ'.comp (continuous_id.prod_map $
      (continuous_const.mul continuous_subtype_coe).sub continuous_const) },
  { rintros st hst,
    simp [hst, mul_inv_cancel (@two_ne_zero ‚Ñù _ _)] }
end

/-! #### Product of paths -/
section prod
variables {a‚ÇÅ a‚ÇÇ a‚ÇÉ : X} {b‚ÇÅ b‚ÇÇ b‚ÇÉ : Y}
/-- Given a path in `X` and a path in `Y`, we can take their pointwise product to get a path in
`X √ó Y`. -/
protected def prod (Œ≥‚ÇÅ : path a‚ÇÅ a‚ÇÇ) (Œ≥‚ÇÇ : path b‚ÇÅ b‚ÇÇ) :
  path (a‚ÇÅ, b‚ÇÅ) (a‚ÇÇ, b‚ÇÇ) :=
{ to_continuous_map := continuous_map.prod_mk Œ≥‚ÇÅ.to_continuous_map Œ≥‚ÇÇ.to_continuous_map,
  source' := by simp,
  target' := by simp, }

@[simp] lemma prod_coe_fn (Œ≥‚ÇÅ : path a‚ÇÅ a‚ÇÇ) (Œ≥‚ÇÇ : path b‚ÇÅ b‚ÇÇ) :
  (coe_fn (Œ≥‚ÇÅ.prod Œ≥‚ÇÇ)) = Œª t, (Œ≥‚ÇÅ t, Œ≥‚ÇÇ t) := rfl

/-- Path composition commutes with products -/
lemma trans_prod_eq_prod_trans
  (Œ≥‚ÇÅ : path a‚ÇÅ a‚ÇÇ) (Œ¥‚ÇÅ : path a‚ÇÇ a‚ÇÉ) (Œ≥‚ÇÇ : path b‚ÇÅ b‚ÇÇ) (Œ¥‚ÇÇ : path b‚ÇÇ b‚ÇÉ) :
  (Œ≥‚ÇÅ.prod Œ≥‚ÇÇ).trans (Œ¥‚ÇÅ.prod Œ¥‚ÇÇ) = (Œ≥‚ÇÅ.trans Œ¥‚ÇÅ).prod (Œ≥‚ÇÇ.trans Œ¥‚ÇÇ) :=
begin
  ext t;
  unfold path.trans;
  simp only [path.coe_mk, path.prod_coe_fn, function.comp_app];
  split_ifs; refl,
end

end prod

section pi
variables {œá : Œπ ‚Üí Type*} [‚àÄ i, topological_space (œá i)] {as bs cs : Œ† i, œá i}
/-- Given a family of paths, one in each X·µ¢, we take their pointwise product to get a path in
Œ† i, X·µ¢. -/
protected def pi (Œ≥ : Œ† i, path (as i) (bs i)) : path as bs :=
{ to_continuous_map := continuous_map.pi (Œª i, (Œ≥ i).to_continuous_map),
  source' := by simp,
  target' := by simp, }

@[simp] lemma pi_coe_fn (Œ≥ : Œ† i, path (as i) (bs i)) : (coe_fn (path.pi Œ≥)) = Œª t i, Œ≥ i t := rfl

/-- Path composition commutes with products -/
lemma trans_pi_eq_pi_trans (Œ≥‚ÇÄ : Œ† i, path (as i) (bs i)) (Œ≥‚ÇÅ : Œ† i, path (bs i) (cs i)) :
  (path.pi Œ≥‚ÇÄ).trans (path.pi Œ≥‚ÇÅ) = path.pi (Œª i, (Œ≥‚ÇÄ i).trans (Œ≥‚ÇÅ i)) :=
begin
  ext t i,
  unfold path.trans,
  simp only [path.coe_mk, function.comp_app, pi_coe_fn],
  split_ifs; refl,
end
end pi
/-! #### Pointwise multiplication/addition of two paths in a topological (additive) group -/

/-- Pointwise multiplication of paths in a topological group. The additive version is probably more
useful. -/
@[to_additive "Pointwise addition of paths in a topological additive group."]
protected def mul [has_mul X] [has_continuous_mul X] {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : X}
  (Œ≥‚ÇÅ : path a‚ÇÅ b‚ÇÅ) (Œ≥‚ÇÇ : path a‚ÇÇ b‚ÇÇ) : path (a‚ÇÅ * a‚ÇÇ) (b‚ÇÅ * b‚ÇÇ) :=
(Œ≥‚ÇÅ.prod Œ≥‚ÇÇ).map continuous_mul

@[to_additive] protected lemma mul_apply [has_mul X] [has_continuous_mul X] {a‚ÇÅ b‚ÇÅ a‚ÇÇ b‚ÇÇ : X}
  (Œ≥‚ÇÅ : path a‚ÇÅ b‚ÇÅ) (Œ≥‚ÇÇ : path a‚ÇÇ b‚ÇÇ) (t : unit_interval) : (Œ≥‚ÇÅ.mul Œ≥‚ÇÇ) t = Œ≥‚ÇÅ t * Œ≥‚ÇÇ t := rfl

/-! #### Truncating a path -/

/-- `Œ≥.truncate t‚ÇÄ t‚ÇÅ` is the path which follows the path `Œ≥` on the
  time interval `[t‚ÇÄ, t‚ÇÅ]` and stays still otherwise. -/
def truncate {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) (t‚ÇÄ t‚ÇÅ : ‚Ñù) : path (Œ≥.extend $ min t‚ÇÄ t‚ÇÅ) (Œ≥.extend t‚ÇÅ) :=
{ to_fun := Œª s, Œ≥.extend (min (max s t‚ÇÄ) t‚ÇÅ),
  continuous_to_fun := Œ≥.continuous_extend.comp
    ((continuous_subtype_coe.max continuous_const).min continuous_const),
  source' :=
  begin
    simp only [min_def, max_def],
    norm_cast,
    split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
    { simp [Œ≥.extend_of_le_zero h‚ÇÅ] },
    { congr, linarith },
    { have h‚ÇÑ : t‚ÇÅ ‚â§ 0 := le_of_lt (by simpa using h‚ÇÇ),
      simp [Œ≥.extend_of_le_zero h‚ÇÑ, Œ≥.extend_of_le_zero h‚ÇÅ] },
    all_goals { refl }
  end,
  target' :=
  begin
    simp only [min_def, max_def],
    norm_cast,
    split_ifs with h‚ÇÅ h‚ÇÇ h‚ÇÉ,
    { simp [Œ≥.extend_of_one_le h‚ÇÇ] },
    { refl },
    { have h‚ÇÑ : 1 ‚â§ t‚ÇÄ := le_of_lt (by simpa using h‚ÇÅ),
      simp [Œ≥.extend_of_one_le h‚ÇÑ, Œ≥.extend_of_one_le (h‚ÇÑ.trans h‚ÇÉ)] },
    { refl }
  end }

/-- `Œ≥.truncate_of_le t‚ÇÄ t‚ÇÅ h`, where `h : t‚ÇÄ ‚â§ t‚ÇÅ` is `Œ≥.truncate t‚ÇÄ t‚ÇÅ`
  casted as a path from `Œ≥.extend t‚ÇÄ` to `Œ≥.extend t‚ÇÅ`. -/
def truncate_of_le {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) {t‚ÇÄ t‚ÇÅ : ‚Ñù} (h : t‚ÇÄ ‚â§ t‚ÇÅ) : path (Œ≥.extend t‚ÇÄ) (Œ≥.extend t‚ÇÅ) :=
(Œ≥.truncate t‚ÇÄ t‚ÇÅ).cast (by rw min_eq_left h) rfl

lemma truncate_range {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) {t‚ÇÄ t‚ÇÅ : ‚Ñù} : range (Œ≥.truncate t‚ÇÄ t‚ÇÅ) ‚äÜ range Œ≥ :=
begin
  rw ‚Üê Œ≥.extend_range,
  simp only [range_subset_iff, set_coe.exists, set_coe.forall],
  intros x hx,
  simp only [has_coe_to_fun.coe, coe_fn, path.truncate, mem_range_self]
end

/-- For a path `Œ≥`, `Œ≥.truncate` gives a "continuous family of paths", by which we
  mean the uncurried function which maps `(t‚ÇÄ, t‚ÇÅ, s)` to `Œ≥.truncate t‚ÇÄ t‚ÇÅ s` is continuous. -/
@[continuity]
lemma truncate_continuous_family {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) : continuous (Œª x, Œ≥.truncate x.1 x.2.1 x.2.2 : ‚Ñù √ó ‚Ñù √ó I ‚Üí X) :=
Œ≥.continuous_extend.comp
  (((continuous_subtype_coe.comp (continuous_snd.comp continuous_snd)).max continuous_fst).min
    (continuous_fst.comp continuous_snd))
/- TODO : When `continuity` gets quicker, change the proof back to :
    `begin`
      `simp only [has_coe_to_fun.coe, coe_fn, path.truncate],`
      `continuity,`
      `exact continuous_subtype_coe`
    `end` -/

@[continuity]
lemma truncate_const_continuous_family {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) (t : ‚Ñù) : continuous ‚Üø(Œ≥.truncate t) :=
have key : continuous (Œª x, (t, x) : ‚Ñù √ó I ‚Üí ‚Ñù √ó ‚Ñù √ó I) := continuous_const.prod_mk continuous_id,
by convert Œ≥.truncate_continuous_family.comp key

@[simp] lemma truncate_self {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) (t : ‚Ñù) : Œ≥.truncate t t = (path.refl $ Œ≥.extend t).cast (by rw min_self) rfl :=
begin
  ext x,
  rw cast_coe,
  simp only [truncate, has_coe_to_fun.coe, coe_fn, refl, min_def, max_def],
  split_ifs with h‚ÇÅ h‚ÇÇ; congr,
  exact le_antisymm ‚Äπ_‚Ä∫ ‚Äπ_‚Ä∫
end

@[simp] lemma truncate_zero_zero {X : Type*} [topological_space X] {a b : X} (Œ≥ : path a b) :
  Œ≥.truncate 0 0 = (path.refl a).cast (by rw [min_self, Œ≥.extend_zero]) Œ≥.extend_zero :=
by convert Œ≥.truncate_self 0; exact Œ≥.extend_zero.symm

@[simp] lemma truncate_one_one {X : Type*} [topological_space X] {a b : X} (Œ≥ : path a b) :
  Œ≥.truncate 1 1 = (path.refl b).cast (by rw [min_self, Œ≥.extend_one]) Œ≥.extend_one :=
by convert Œ≥.truncate_self 1; exact Œ≥.extend_one.symm

@[simp] lemma truncate_zero_one {X : Type*} [topological_space X] {a b : X}
  (Œ≥ : path a b) : Œ≥.truncate 0 1 = Œ≥.cast (by simp [zero_le_one, extend_zero]) (by simp) :=
begin
  ext x,
  rw cast_coe,
  have : ‚Üëx ‚àà (Icc 0 1 : set ‚Ñù) := x.2,
  rw [truncate, coe_mk, max_eq_left this.1, min_eq_left this.2, extend_extends']
end

/-! #### Reparametrising a path -/

/--
Given a path `Œ≥` and a function `f : I ‚Üí I` where `f 0 = 0` and `f 1 = 1`, `Œ≥.reparam f` is the
path defined by `Œ≥ ‚àò f`.
-/
def reparam (Œ≥ : path x y) (f : I ‚Üí I) (hfcont : continuous f) (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
  path x y :=
{ to_fun := Œ≥ ‚àò f,
  continuous_to_fun := by continuity,
  source' := by simp [hf‚ÇÄ],
  target' := by simp [hf‚ÇÅ] }

@[simp]
lemma coe_to_fun (Œ≥ : path x y) {f : I ‚Üí I} (hfcont : continuous f) (hf‚ÇÄ : f 0 = 0)
  (hf‚ÇÅ : f 1 = 1) : ‚áë(Œ≥.reparam f hfcont hf‚ÇÄ hf‚ÇÅ) = Œ≥ ‚àò f := rfl

@[simp]
lemma reparam_id (Œ≥ : path x y) : Œ≥.reparam id continuous_id rfl rfl = Œ≥ :=
by { ext, refl }

lemma range_reparam (Œ≥ : path x y) {f : I ‚Üí I} (hfcont : continuous f) (hf‚ÇÄ : f 0 = 0)
  (hf‚ÇÅ : f 1 = 1) : range ‚áë(Œ≥.reparam f hfcont hf‚ÇÄ hf‚ÇÅ) = range Œ≥ :=
begin
  change range (Œ≥ ‚àò f) = range Œ≥,
  have : range f = univ,
  { rw range_iff_surjective,
    intro t,
    have h‚ÇÅ : continuous (Icc_extend (@zero_le_one ‚Ñù _) f),
    { continuity },
    have := intermediate_value_Icc (@zero_le_one ‚Ñù _) h‚ÇÅ.continuous_on,
    { rw [Icc_extend_left, Icc_extend_right] at this,
      change Icc (f 0) (f 1) ‚äÜ _ at this,
      rw [hf‚ÇÄ, hf‚ÇÅ] at this,
      rcases this t.2 with ‚ü®w, hw‚ÇÅ, hw‚ÇÇ‚ü©,
      rw Icc_extend_of_mem _ _ hw‚ÇÅ at hw‚ÇÇ,
      use [‚ü®w, hw‚ÇÅ‚ü©, hw‚ÇÇ] } },
  rw [range_comp, this, image_univ],
end

lemma refl_reparam {f : I ‚Üí I} (hfcont : continuous f) (hf‚ÇÄ : f 0 = 0)
  (hf‚ÇÅ : f 1 = 1) : (refl x).reparam f hfcont hf‚ÇÄ hf‚ÇÅ = refl x :=
begin
  ext,
  simp,
end

end path

/-! ### Being joined by a path -/

/-- The relation "being joined by a path". This is an equivalence relation. -/
def joined (x y : X) : Prop :=
nonempty (path x y)

@[refl] lemma joined.refl (x : X) : joined x x :=
‚ü®path.refl x‚ü©

/-- When two points are joined, choose some path from `x` to `y`. -/
def joined.some_path (h : joined x y) : path x y :=
nonempty.some h

@[symm] lemma joined.symm {x y : X} (h : joined x y) : joined y x :=
‚ü®h.some_path.symm‚ü©

@[trans] lemma joined.trans {x y z : X} (hxy : joined x y) (hyz : joined y z) :
  joined x z :=
‚ü®hxy.some_path.trans hyz.some_path‚ü©

variables (X)

/-- The setoid corresponding the equivalence relation of being joined by a continuous path. -/
def path_setoid : setoid X :=
{ r := joined,
  iseqv := mk_equivalence _ joined.refl (Œª x y, joined.symm) (Œª x y z, joined.trans) }

/-- The quotient type of points of a topological space modulo being joined by a continuous path. -/
def zeroth_homotopy := quotient (path_setoid X)

instance : inhabited (zeroth_homotopy ‚Ñù) := ‚ü®@quotient.mk ‚Ñù (path_setoid ‚Ñù) 0‚ü©

variables {X}

/-! ### Being joined by a path inside a set -/

/-- The relation "being joined by a path in `F`". Not quite an equivalence relation since it's not
reflexive for points that do not belong to `F`. -/
def joined_in (F : set X) (x y : X) : Prop :=
‚àÉ Œ≥ : path x y, ‚àÄ t, Œ≥ t ‚àà F

variables {F : set X}

lemma joined_in.mem (h : joined_in F x y) : x ‚àà F ‚àß y ‚àà F :=
begin
  rcases h with ‚ü®Œ≥, Œ≥_in‚ü©,
  have : Œ≥ 0 ‚àà F ‚àß Œ≥ 1 ‚àà F, by { split; apply Œ≥_in },
  simpa using this
end

lemma joined_in.source_mem (h : joined_in F x y) : x ‚àà F :=
h.mem.1

lemma joined_in.target_mem (h : joined_in F x y) : y ‚àà F :=
h.mem.2

/-- When `x` and `y` are joined in `F`, choose a path from `x` to `y` inside `F` -/
def joined_in.some_path (h : joined_in F x y) : path x y :=
classical.some h

lemma joined_in.some_path_mem (h : joined_in F x y) (t : I) : h.some_path t ‚àà F :=
classical.some_spec h t

/-- If `x` and `y` are joined in the set `F`, then they are joined in the subtype `F`. -/
lemma joined_in.joined_subtype (h : joined_in F x y) :
  joined (‚ü®x, h.source_mem‚ü© : F) (‚ü®y, h.target_mem‚ü© : F) :=
‚ü®{ to_fun := Œª t, ‚ü®h.some_path t, h.some_path_mem t‚ü©,
   continuous_to_fun := by continuity,
   source' := by simp,
   target' := by simp }‚ü©

lemma joined_in.of_line {f : ‚Ñù ‚Üí X} (hf : continuous_on f I) (h‚ÇÄ : f 0 = x) (h‚ÇÅ : f 1 = y)
  (hF : f '' I ‚äÜ F) : joined_in F x y :=
‚ü®path.of_line hf h‚ÇÄ h‚ÇÅ, Œª t, hF $ path.of_line_mem hf h‚ÇÄ h‚ÇÅ t‚ü©

lemma joined_in.joined (h : joined_in F x y) : joined x y :=
‚ü®h.some_path‚ü©

lemma joined_in_iff_joined (x_in : x ‚àà F) (y_in : y ‚àà F) :
  joined_in F x y ‚Üî joined (‚ü®x, x_in‚ü© : F) (‚ü®y, y_in‚ü© : F) :=
‚ü®Œª h, h.joined_subtype, Œª h, ‚ü®h.some_path.map continuous_subtype_coe, by simp‚ü©‚ü©

@[simp] lemma joined_in_univ : joined_in univ x y ‚Üî joined x y :=
by simp [joined_in, joined, exists_true_iff_nonempty]

lemma joined_in.mono {U V : set X} (h : joined_in U x y) (hUV : U ‚äÜ V) : joined_in V x y :=
‚ü®h.some_path, Œª t, hUV (h.some_path_mem t)‚ü©

lemma joined_in.refl (h : x ‚àà F) : joined_in F x x :=
‚ü®path.refl x, Œª t, h‚ü©

@[symm] lemma joined_in.symm (h : joined_in F x y) : joined_in F y x :=
begin
  cases h.mem with hx hy,
  simp [joined_in_iff_joined, *] at *,
  exact h.symm
end

lemma joined_in.trans (hxy : joined_in F x y) (hyz : joined_in F y z) : joined_in F x z :=
begin
  cases hxy.mem with hx hy,
  cases hyz.mem with hx hy,
  simp [joined_in_iff_joined, *] at *,
  exact hxy.trans hyz
end

/-! ### Path component -/

/-- The path component of `x` is the set of points that can be joined to `x`. -/
def path_component (x : X) := {y | joined x y}

@[simp] lemma mem_path_component_self (x : X) : x ‚àà path_component x :=
joined.refl x

@[simp] lemma path_component.nonempty (x : X) : (path_component x).nonempty :=
‚ü®x, mem_path_component_self x‚ü©

lemma mem_path_component_of_mem (h : x ‚àà path_component y) : y ‚àà path_component x :=
joined.symm h

lemma path_component_symm : x ‚àà path_component y ‚Üî y ‚àà path_component x :=
‚ü®Œª h, mem_path_component_of_mem h, Œª h, mem_path_component_of_mem h‚ü©

lemma path_component_congr (h : x ‚àà path_component y) : path_component x = path_component y :=
begin
  ext z,
  split,
  { intro h',
    rw path_component_symm,
    exact (h.trans h').symm },
  { intro h',
    rw path_component_symm at h' ‚ä¢,
    exact h'.trans h },
end

lemma path_component_subset_component (x : X) : path_component x ‚äÜ connected_component x :=
Œª y h, (is_connected_range h.some_path.continuous).subset_connected_component
  ‚ü®0, by simp‚ü© ‚ü®1, by simp‚ü©

/-- The path component of `x` in `F` is the set of points that can be joined to `x` in `F`. -/
def path_component_in (x : X) (F : set X) := {y | joined_in F x y}

@[simp] lemma path_component_in_univ (x : X) : path_component_in x univ = path_component x :=
by simp [path_component_in, path_component, joined_in, joined, exists_true_iff_nonempty]

lemma joined.mem_path_component (hyz : joined y z) (hxy : y ‚àà path_component x) :
  z ‚àà path_component x :=
hxy.trans hyz

/-! ### Path connected sets -/

/-- A set `F` is path connected if it contains a point that can be joined to all other in `F`. -/
def is_path_connected (F : set X) : Prop := ‚àÉ x ‚àà F, ‚àÄ {y}, y ‚àà F ‚Üí joined_in F x y

lemma is_path_connected_iff_eq : is_path_connected F ‚Üî ‚àÉ x ‚àà F, path_component_in x F = F :=
begin
  split ; rintros ‚ü®x, x_in, h‚ü© ; use [x, x_in],
  { ext y,
    exact ‚ü®Œª hy, hy.mem.2, h‚ü© },
  { intros y y_in,
    rwa ‚Üê h at y_in },
end

lemma is_path_connected.joined_in (h : is_path_connected F) : ‚àÄ x y ‚àà F, joined_in F x y :=
Œª x x_in x y_in, let ‚ü®b, b_in, hb‚ü© := h in (hb x_in).symm.trans (hb y_in)

lemma is_path_connected_iff : is_path_connected F ‚Üî F.nonempty ‚àß ‚àÄ x y ‚àà F, joined_in F x y :=
‚ü®Œª h, ‚ü®let ‚ü®b, b_in, hb‚ü© := h in ‚ü®b, b_in‚ü©, h.joined_in‚ü©,
 Œª ‚ü®‚ü®b, b_in‚ü©, h‚ü©, ‚ü®b, b_in, Œª x x_in, h b b_in x x_in‚ü©‚ü©

lemma is_path_connected.image {Y : Type*} [topological_space Y] (hF : is_path_connected F)
  {f : X ‚Üí Y} (hf : continuous f) : is_path_connected (f '' F) :=
begin
  rcases hF with ‚ü®x, x_in, hx‚ü©,
  use [f x, mem_image_of_mem f x_in],
  rintros _ ‚ü®y, y_in, rfl‚ü©,
  exact ‚ü®(hx y_in).some_path.map hf, Œª t, ‚ü®_, (hx y_in).some_path_mem t, rfl‚ü©‚ü©,
end

lemma is_path_connected.mem_path_component (h : is_path_connected F) (x_in : x ‚àà F) (y_in : y ‚àà F) :
  y ‚àà path_component x :=
(h.joined_in x x_in y y_in).joined

lemma is_path_connected.subset_path_component (h : is_path_connected F) (x_in : x ‚àà F) :
  F ‚äÜ path_component x :=
Œª y y_in, h.mem_path_component x_in y_in

lemma is_path_connected.union {U V : set X} (hU : is_path_connected U) (hV : is_path_connected V)
  (hUV : (U ‚à© V).nonempty) : is_path_connected (U ‚à™ V) :=
begin
  rcases hUV with ‚ü®x, xU, xV‚ü©,
  use [x, or.inl xU],
  rintros y (yU | yV),
  { exact (hU.joined_in x xU y yU).mono (subset_union_left U V) },
  { exact (hV.joined_in x xV y yV).mono (subset_union_right U V) },
end

/-- If a set `W` is path-connected, then it is also path-connected when seen as a set in a smaller
ambient type `U` (when `U` contains `W`). -/
lemma is_path_connected.preimage_coe {U W : set X} (hW : is_path_connected W) (hWU : W ‚äÜ U) :
  is_path_connected ((coe : U ‚Üí X) ‚Åª¬π' W) :=
begin
  rcases hW with ‚ü®x, x_in, hx‚ü©,
  use [‚ü®x, hWU x_in‚ü©, by simp [x_in]],
  rintros ‚ü®y, hyU‚ü© hyW,
  exact ‚ü®(hx hyW).joined_subtype.some_path.map (continuous_inclusion hWU), by simp‚ü©
end

lemma is_path_connected.exists_path_through_family
  {X : Type*} [topological_space X] {n : ‚Ñï} {s : set X} (h : is_path_connected s)
  (p : fin (n+1) ‚Üí X) (hp : ‚àÄ i, p i ‚àà s) :
  ‚àÉ Œ≥ : path (p 0) (p n), (range Œ≥ ‚äÜ s) ‚àß (‚àÄ i, p i ‚àà range Œ≥) :=
begin
  let p' : ‚Ñï ‚Üí X := Œª k, if h : k < n+1 then p ‚ü®k, h‚ü© else p ‚ü®0, n.zero_lt_succ‚ü©,
  obtain ‚ü®Œ≥, hŒ≥‚ü© : ‚àÉ (Œ≥ : path (p' 0) (p' n)), (‚àÄ i ‚â§ n, p' i ‚àà range Œ≥) ‚àß range Œ≥ ‚äÜ s,
  { have hp' : ‚àÄ i ‚â§ n, p' i ‚àà s,
    { intros i hi,
      simp [p', nat.lt_succ_of_le hi, hp] },
    clear_value p',
    clear hp p,
    induction n with n hn,
    { use path.refl (p' 0),
      { split,
        { rintros i hi, rw nat.le_zero_iff.mp hi, exact ‚ü®0, rfl‚ü© },
        { rw range_subset_iff, rintros x, exact hp' 0 le_rfl } } },
    { rcases hn (Œª i hi, hp' i $ nat.le_succ_of_le hi) with ‚ü®Œ≥‚ÇÄ, hŒ≥‚ÇÄ‚ü©,
      rcases h.joined_in (p' n) (hp' n n.le_succ) (p' $ n+1) (hp' (n+1) $ le_rfl) with ‚ü®Œ≥‚ÇÅ, hŒ≥‚ÇÅ‚ü©,
      let Œ≥ : path (p' 0) (p' $ n+1) := Œ≥‚ÇÄ.trans Œ≥‚ÇÅ,
      use Œ≥,
      have range_eq : range Œ≥ = range Œ≥‚ÇÄ ‚à™ range Œ≥‚ÇÅ := Œ≥‚ÇÄ.trans_range Œ≥‚ÇÅ,
      split,
      { rintros i hi,
        by_cases hi' : i ‚â§ n,
        { rw range_eq,
          left,
          exact hŒ≥‚ÇÄ.1 i hi' },
        { rw [not_le, ‚Üê nat.succ_le_iff] at hi',
          have : i = n.succ := by linarith,
          rw this,
          use 1,
          exact Œ≥.target } },
      { rw range_eq,
        apply union_subset hŒ≥‚ÇÄ.2,
        rw range_subset_iff,
        exact hŒ≥‚ÇÅ } } },
  have hpp' : ‚àÄ k < n+1, p k = p' k,
  { intros k hk, simp only [p', hk, dif_pos], congr, ext, rw fin.coe_coe_of_lt hk, norm_cast },
  use Œ≥.cast (hpp' 0 n.zero_lt_succ) (hpp' n n.lt_succ_self),
  simp only [Œ≥.cast_coe],
  refine and.intro hŒ≥.2 _,
  rintros ‚ü®i, hi‚ü©,
  convert hŒ≥.1 i (nat.le_of_lt_succ hi), rw ‚Üê hpp' i hi,
  congr,
  ext,
  rw fin.coe_coe_of_lt hi,
  norm_cast
end

lemma is_path_connected.exists_path_through_family'
  {X : Type*} [topological_space X] {n : ‚Ñï} {s : set X} (h : is_path_connected s)
  (p : fin (n+1) ‚Üí X) (hp : ‚àÄ i, p i ‚àà s) :
  ‚àÉ (Œ≥ : path (p 0) (p n)) (t : fin (n + 1) ‚Üí I), (‚àÄ t, Œ≥ t ‚àà s) ‚àß ‚àÄ i, Œ≥ (t i) = p i :=
begin
  rcases h.exists_path_through_family p hp with ‚ü®Œ≥, hŒ≥‚ü©,
  rcases hŒ≥ with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  simp only [range, mem_set_of_eq] at h‚ÇÇ,
  rw range_subset_iff at h‚ÇÅ,
  choose! t ht using h‚ÇÇ,
  exact ‚ü®Œ≥, t, h‚ÇÅ, ht‚ü©
end

/-! ### Path connected spaces -/

/-- A topological space is path-connected if it is non-empty and every two points can be
joined by a continuous path. -/
class path_connected_space (X : Type*) [topological_space X] : Prop :=
(nonempty : nonempty X)
(joined : ‚àÄ x y : X, joined x y)

attribute [instance, priority 50] path_connected_space.nonempty

lemma path_connected_space_iff_zeroth_homotopy :
  path_connected_space X ‚Üî nonempty (zeroth_homotopy X) ‚àß subsingleton (zeroth_homotopy X) :=
begin
  letI := path_setoid X,
  split,
  { introI h,
    refine ‚ü®(nonempty_quotient_iff _).mpr h.1, ‚ü®_‚ü©‚ü©,
    rintros ‚ü®x‚ü© ‚ü®y‚ü©,
    exact quotient.sound (path_connected_space.joined x y) },
  { unfold zeroth_homotopy,
    rintros ‚ü®h, h'‚ü©,
    resetI,
    exact ‚ü®(nonempty_quotient_iff _).mp h, Œª x y, quotient.exact $ subsingleton.elim ‚ü¶x‚üß ‚ü¶y‚üß‚ü© },
end

namespace path_connected_space
variables [path_connected_space X]

/-- Use path-connectedness to build a path between two points. -/
def some_path (x y : X) : path x y :=
nonempty.some (joined x y)

end path_connected_space

lemma is_path_connected_iff_path_connected_space : is_path_connected F ‚Üî path_connected_space F :=
begin
  rw is_path_connected_iff,
  split,
  { rintro ‚ü®‚ü®x, x_in‚ü©, h‚ü©,
    refine ‚ü®‚ü®‚ü®x, x_in‚ü©‚ü©, _‚ü©,
    rintros ‚ü®y, y_in‚ü© ‚ü®z, z_in‚ü©,
    have H := h y y_in z z_in,
    rwa joined_in_iff_joined y_in z_in at H },
  { rintros ‚ü®‚ü®x, x_in‚ü©, H‚ü©,
    refine ‚ü®‚ü®x, x_in‚ü©, Œª y y_in z z_in, _‚ü©,
    rw joined_in_iff_joined y_in z_in,
    apply H }
end

lemma path_connected_space_iff_univ : path_connected_space X ‚Üî is_path_connected (univ : set X) :=
begin
  split,
  { introI h,
    inhabit X,
    refine ‚ü®default, mem_univ _, _‚ü©,
    simpa using path_connected_space.joined default },
  { intro h,
    have h' := h.joined_in,
    cases h with x h,
    exact ‚ü®‚ü®x‚ü©, by simpa using h'‚ü© },
end

lemma path_connected_space_iff_eq : path_connected_space X ‚Üî ‚àÉ x : X, path_component x = univ :=
by simp [path_connected_space_iff_univ, is_path_connected_iff_eq]

@[priority 100] -- see Note [lower instance priority]
instance path_connected_space.connected_space [path_connected_space X] : connected_space X :=
begin
  rw connected_space_iff_connected_component,
  rcases is_path_connected_iff_eq.mp (path_connected_space_iff_univ.mp ‚Äπ_‚Ä∫) with ‚ü®x, x_in, hx‚ü©,
  use x,
  rw ‚Üê univ_subset_iff,
  exact (by simpa using hx : path_component x = univ) ‚ñ∏ path_component_subset_component x
end

lemma is_path_connected.is_connected (hF : is_path_connected F) : is_connected F :=
begin
  rw is_connected_iff_connected_space,
  rw is_path_connected_iff_path_connected_space at hF,
  exact @path_connected_space.connected_space _ _ hF
end

namespace path_connected_space
variables [path_connected_space X]

lemma exists_path_through_family {n : ‚Ñï} (p : fin (n+1) ‚Üí X) :
  ‚àÉ Œ≥ : path (p 0) (p n), (‚àÄ i, p i ‚àà range Œ≥) :=
begin
  have : is_path_connected (univ : set X) := path_connected_space_iff_univ.mp (by apply_instance),
  rcases this.exists_path_through_family p (Œª i, true.intro) with ‚ü®Œ≥, -, h‚ü©,
  exact ‚ü®Œ≥, h‚ü©
end

lemma exists_path_through_family' {n : ‚Ñï} (p : fin (n+1) ‚Üí X) :
  ‚àÉ (Œ≥ : path (p 0) (p n)) (t : fin (n + 1) ‚Üí I), ‚àÄ i, Œ≥ (t i) = p i :=
begin
  have : is_path_connected (univ : set X) := path_connected_space_iff_univ.mp (by apply_instance),
  rcases this.exists_path_through_family' p (Œª i, true.intro) with ‚ü®Œ≥, t, -, h‚ü©,
  exact ‚ü®Œ≥, t, h‚ü©
end

end path_connected_space

/-! ### Locally path connected spaces -/

/-- A topological space is locally path connected, at every point, path connected
neighborhoods form a neighborhood basis. -/
class loc_path_connected_space (X : Type*) [topological_space X] : Prop :=
(path_connected_basis : ‚àÄ x : X, (ùìù x).has_basis (Œª s : set X, s ‚àà ùìù x ‚àß is_path_connected s) id)

export loc_path_connected_space (path_connected_basis)

lemma loc_path_connected_of_bases {p : Œπ ‚Üí Prop} {s : X ‚Üí Œπ ‚Üí set X}
  (h : ‚àÄ x, (ùìù x).has_basis p (s x)) (h' : ‚àÄ x i, p i ‚Üí is_path_connected (s x i)) :
  loc_path_connected_space X :=
begin
  constructor,
  intro x,
  apply (h x).to_has_basis,
  { intros i pi,
    exact ‚ü®s x i, ‚ü®(h x).mem_of_mem pi, h' x i pi‚ü©, by refl‚ü© },
  { rintros U ‚ü®U_in, hU‚ü©,
    rcases (h x).mem_iff.mp U_in with ‚ü®i, pi, hi‚ü©,
    tauto }
end

lemma path_connected_space_iff_connected_space [loc_path_connected_space X] :
  path_connected_space X ‚Üî connected_space X :=
begin
  split,
  { introI h,
    apply_instance },
  { introI hX,
    rw path_connected_space_iff_eq,
    use (classical.arbitrary X),
    refine eq_univ_of_nonempty_clopen (by simp) ‚ü®_, _‚ü©,
    { rw is_open_iff_mem_nhds,
      intros y y_in,
      rcases (path_connected_basis y).ex_mem with ‚ü®U, ‚ü®U_in, hU‚ü©‚ü©,
      apply mem_of_superset U_in,
      rw ‚Üê path_component_congr y_in,
      exact hU.subset_path_component (mem_of_mem_nhds U_in) },
    { rw is_closed_iff_nhds,
      intros y H,
      rcases (path_connected_basis y).ex_mem with ‚ü®U, ‚ü®U_in, hU‚ü©‚ü©,
      rcases H U U_in with ‚ü®z, hz, hz'‚ü©,
      exact ((hU.joined_in z hz y $ mem_of_mem_nhds U_in).joined.mem_path_component hz') } },
end

lemma path_connected_subset_basis [loc_path_connected_space X] {U : set X} (h : is_open U)
  (hx : x ‚àà U) : (ùìù x).has_basis (Œª s : set X, s ‚àà ùìù x ‚àß is_path_connected s ‚àß s ‚äÜ U) id :=
(path_connected_basis x).has_basis_self_subset (is_open.mem_nhds h hx)

lemma loc_path_connected_of_is_open [loc_path_connected_space X] {U : set X} (h : is_open U) :
  loc_path_connected_space U :=
‚ü®begin
  rintros ‚ü®x, x_in‚ü©,
  rw nhds_subtype_eq_comap,
  constructor,
  intros V,
  rw (has_basis.comap (coe : U ‚Üí X) (path_connected_subset_basis h x_in)).mem_iff,
  split,
  { rintros ‚ü®W, ‚ü®W_in, hW, hWU‚ü©, hWV‚ü©,
    exact ‚ü®coe ‚Åª¬π' W, ‚ü®‚ü®preimage_mem_comap W_in, hW.preimage_coe hWU‚ü©, hWV‚ü©‚ü© },
  { rintros ‚ü®W, ‚ü®W_in, hW‚ü©, hWV‚ü©,
    refine ‚ü®coe '' W, ‚ü®filter.image_coe_mem_of_mem_comap (is_open.mem_nhds h x_in) W_in,
                       hW.image continuous_subtype_coe, subtype.coe_image_subset U W‚ü©, _‚ü©,
    rintros x ‚ü®y, ‚ü®y_in, hy‚ü©‚ü©,
    rw ‚Üê subtype.coe_injective hy,
    tauto },
end‚ü©

lemma is_open.is_connected_iff_is_path_connected
  [loc_path_connected_space X] {U : set X} (U_op : is_open U) :
  is_path_connected U ‚Üî is_connected U :=
begin
  rw [is_connected_iff_connected_space, is_path_connected_iff_path_connected_space],
  haveI := loc_path_connected_of_is_open U_op,
  exact path_connected_space_iff_connected_space
end
