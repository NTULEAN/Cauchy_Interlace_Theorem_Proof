/-
Copyright (c) 202 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import topology.metric_space.emetric_space
import topology.paracompact
import set_theory.ordinal

/-!
# (Extended) metric spaces are paracompact

In this file we provide two instances:

* `emetric.paracompact_space`: a `pseudo_emetric_space` is paracompact; formalization is based
  on [MR0236876];
* `emetric.normal_of_metric`: an `emetric_space` is a normal topological space.

## Tags

metric space, paracompact space, normal space
-/

variable {Œ± : Type*}

open_locale ennreal topological_space
open set

namespace emetric

/-- A `pseudo_emetric_space` is always a paracompact space. Formalization is based
on [MR0236876]. -/
@[priority 100] -- See note [lower instance priority]
instance [pseudo_emetric_space Œ±] : paracompact_space Œ± :=
begin
  classical,
  /- We start with trivial observations about `1 / 2 ^ k`. Here and below we use `1 / 2 ^ k` in
  the comments and `2‚Åª¬π ^ k` in the code. -/
  have pow_pos : ‚àÄ k : ‚Ñï, (0 : ‚Ñù‚â•0‚àû) < 2‚Åª¬π ^ k,
    from Œª k, ennreal.pow_pos (ennreal.inv_pos.2 ennreal.two_ne_top) _,
  have hpow_le : ‚àÄ {m n : ‚Ñï}, m ‚â§ n ‚Üí (2‚Åª¬π : ‚Ñù‚â•0‚àû) ^ n ‚â§ 2‚Åª¬π ^ m,
    from Œª m n h, ennreal.pow_le_pow_of_le_one (ennreal.inv_le_one.2 ennreal.one_lt_two.le) h,
  have h2pow : ‚àÄ n : ‚Ñï, 2 * (2‚Åª¬π : ‚Ñù‚â•0‚àû) ^ (n + 1) = 2‚Åª¬π ^ n,
    by { intro n, simp [pow_succ, ‚Üê mul_assoc, ennreal.mul_inv_cancel] },
  -- Consider an open covering `S : set (set Œ±)`
  refine ‚ü®Œª Œπ s ho hcov, _‚ü©,
  simp only [Union_eq_univ_iff] at hcov,
  -- choose a well founded order on `S`
  letI : linear_order Œπ := linear_order_of_STO' well_ordering_rel,
  have wf : well_founded ((<) : Œπ ‚Üí Œπ ‚Üí Prop) := @is_well_order.wf Œπ well_ordering_rel _,
  -- Let `ind x` be the minimal index `s : S` such that `x ‚àà s`.
  set ind : Œ± ‚Üí Œπ := Œª x, wf.min {i : Œπ | x ‚àà s i} (hcov x),
  have mem_ind : ‚àÄ x, x ‚àà s (ind x), from Œª x, wf.min_mem _ (hcov x),
  have nmem_of_lt_ind : ‚àÄ {x i}, i < (ind x) ‚Üí x ‚àâ s i,
    from Œª x i hlt hxi, wf.not_lt_min _ (hcov x) hxi hlt,
  /- The refinement `D : ‚Ñï ‚Üí Œπ ‚Üí set Œ±` is defined recursively. For each `n` and `i`, `D n i`
  is the union of balls `ball x (1 / 2 ^ n)` over all points `x` such that

  * `ind x = i`;
  * `x` does not belong to any `D m j`, `m < n`;
  * `ball x (3 / 2 ^ n) ‚äÜ s i`;

  We define this sequence using `nat.strong_rec_on'`, then restate it as `Dn` and `memD`.
  -/
  set D : ‚Ñï ‚Üí Œπ ‚Üí set Œ± :=
    Œª n, nat.strong_rec_on' n (Œª n D' i,
      ‚ãÉ (x : Œ±) (hxs : ind x = i) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s i)
        (hlt : ‚àÄ (m < n) (j : Œπ), x ‚àâ D' m ‚Äπ_‚Ä∫ j), ball x (2‚Åª¬π ^ n)),
  have Dn : ‚àÄ n i, D n i = ‚ãÉ (x : Œ±) (hxs : ind x = i) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s i)
    (hlt : ‚àÄ (m < n) (j : Œπ), x ‚àâ D m j), ball x (2‚Åª¬π ^ n),
    from Œª n s, by { simp only [D], rw nat.strong_rec_on_beta' },
  have memD : ‚àÄ {n i y}, y ‚àà D n i ‚Üî ‚àÉ x (hi : ind x = i) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s i)
    (hlt : ‚àÄ (m < n) (j : Œπ), x ‚àâ D m j), edist y x < 2‚Åª¬π ^ n,
  { intros n i y, rw [Dn n i], simp only [mem_Union, mem_ball] },
  -- The sets `D n i` cover the whole space. Indeed, for each `x` we can choose `n` such that
  -- `ball x (3 / 2 ^ n) ‚äÜ s (ind x)`, then either `x ‚àà D n i`, or `x ‚àà D m i` for some `m < n`.
  have Dcov : ‚àÄ x, ‚àÉ n i, x ‚àà D n i,
  { intro x,
    obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, ball x (3 * 2‚Åª¬π ^ n) ‚äÜ s (ind x),
    { -- This proof takes 5 lines because we can't import `specific_limits` here
      rcases is_open_iff.1 (ho $ ind x) x (mem_ind x) with ‚ü®Œµ, Œµ0, hŒµ‚ü©,
      have : 0 < Œµ / 3 := ennreal.div_pos_iff.2 ‚ü®Œµ0.lt.ne', ennreal.coe_ne_top‚ü©,
      rcases ennreal.exists_inv_two_pow_lt this.ne' with ‚ü®n, hn‚ü©,
      refine ‚ü®n, subset.trans (ball_subset_ball _) hŒµ‚ü©,
      simpa only [div_eq_mul_inv, mul_comm] using (ennreal.mul_lt_of_lt_div hn).le },
    by_contra' h,
    apply h n (ind x),
    exact memD.2 ‚ü®x, rfl, hn, Œª _ _ _, h _ _, mem_ball_self (pow_pos _)‚ü© },
  -- Each `D n i` is a union of open balls, hence it is an open set
  have Dopen : ‚àÄ n i, is_open (D n i),
  { intros n i,
    rw Dn,
    iterate 4 { refine is_open_Union (Œª _, _) },
    exact is_open_ball },
  -- the covering `D n i` is a refinement of the original covering: `D n i ‚äÜ s i`
  have HDS : ‚àÄ n i, D n i ‚äÜ s i,
  { intros n s x,
    rw memD,
    rintro ‚ü®y, rfl, hsub, -, hyx‚ü©,
    refine hsub (lt_of_lt_of_le hyx _),
    calc 2‚Åª¬π ^ n = 1 * 2‚Åª¬π ^ n : (one_mul _).symm
    ... ‚â§ 3 * 2‚Åª¬π ^ n : ennreal.mul_le_mul _ le_rfl,
    -- TODO: use `norm_num`
    have : ((1 : ‚Ñï) : ‚Ñù‚â•0‚àû) ‚â§ (3 : ‚Ñï), from ennreal.coe_nat_le_coe_nat.2 (by norm_num1),
    exact_mod_cast this },
  -- Let us show the rest of the properties. Since the definition expects a family indexed
  -- by a single parameter, we use `‚Ñï √ó Œπ` as the domain.
  refine ‚ü®‚Ñï √ó Œπ, Œª ni, D ni.1 ni.2, Œª _, Dopen _ _, _, _, Œª ni, ‚ü®ni.2, HDS _ _‚ü©‚ü©,
  -- The sets `D n i` cover the whole space as we proved earlier
  { refine Union_eq_univ_iff.2 (Œª x, _),
    rcases Dcov x with ‚ü®n, i, h‚ü©,
    exact ‚ü®‚ü®n, i‚ü©, h‚ü© },
  { /- Let us prove that the covering `D n i` is locally finite. Take a point `x` and choose
    `n`, `i` so that `x ‚àà D n i`. Since `D n i` is an open set, we can choose `k` so that
    `B = ball x (1 / 2 ^ (n + k + 1)) ‚äÜ D n i`. -/
    intro x,
    rcases Dcov x with ‚ü®n, i, hn‚ü©,
    have : D n i ‚àà ùìù x, from is_open.mem_nhds (Dopen _ _) hn,
    rcases (nhds_basis_uniformity uniformity_basis_edist_inv_two_pow).mem_iff.1 this
      with ‚ü®k, -, hsub : ball x (2‚Åª¬π ^ k) ‚äÜ D n i‚ü©,
    set B := ball x (2‚Åª¬π ^ (n + k + 1)),
    refine ‚ü®B, ball_mem_nhds _ (pow_pos _), _‚ü©,
    -- The sets `D m i`, `m > n + k`, are disjoint with `B`
    have Hgt : ‚àÄ (m ‚â• n + k + 1) (i : Œπ), disjoint (D m i) B,
    { rintros m hm i y ‚ü®hym, hyx‚ü©,
      rcases memD.1 hym with ‚ü®z, rfl, hzi, H, hz‚ü©,
      have : z ‚àâ ball x (2‚Åª¬π ^ k), from Œª hz, H n (by linarith) i (hsub hz), apply this,
      calc edist z x ‚â§ edist y z + edist y x : edist_triangle_left _ _ _
      ... < (2‚Åª¬π ^ m) + (2‚Åª¬π ^ (n + k + 1)) : ennreal.add_lt_add hz hyx
      ... ‚â§ (2‚Åª¬π ^ (k + 1)) + (2‚Åª¬π ^ (k + 1)) :
        add_le_add (hpow_le $ by linarith) (hpow_le $ by linarith)
      ... = (2‚Åª¬π ^ k) : by rw [‚Üê two_mul, h2pow] },
    -- For each `m ‚â§ n + k` there is at most one `j` such that `D m j ‚à© B` is nonempty.
    have Hle : ‚àÄ m ‚â§ n + k, set.subsingleton {j | (D m j ‚à© B).nonempty},
    { rintros m hm j‚ÇÅ ‚ü®y, hyD, hyB‚ü© j‚ÇÇ ‚ü®z, hzD, hzB‚ü©,
      by_contra h,
      wlog h : j‚ÇÅ < j‚ÇÇ := ne.lt_or_lt h using [j‚ÇÅ j‚ÇÇ y z, j‚ÇÇ j‚ÇÅ z y],
      rcases memD.1 hyD with ‚ü®y', rfl, hsuby, -, hdisty‚ü©,
      rcases memD.1 hzD with ‚ü®z', rfl, -, -, hdistz‚ü©,
      suffices : edist z' y' < 3 * 2‚Åª¬π ^ m, from nmem_of_lt_ind h (hsuby this),
      calc edist z' y' ‚â§ edist z' x + edist x y' : edist_triangle _ _ _
      ... ‚â§ (edist z z' + edist z x) + (edist y x + edist y y') :
        add_le_add (edist_triangle_left _ _ _) (edist_triangle_left _ _ _)
      ... < (2‚Åª¬π ^ m + 2‚Åª¬π ^ (n + k + 1)) + (2‚Åª¬π ^ (n + k + 1) + 2‚Åª¬π ^ m) :
        by apply_rules [ennreal.add_lt_add]
      ... = 2 * (2‚Åª¬π ^ m + 2‚Åª¬π ^ (n + k + 1)) : by simp only [two_mul, add_comm]
      ... ‚â§ 2 * (2‚Åª¬π ^ m + 2‚Åª¬π ^ (m + 1)) :
        ennreal.mul_le_mul le_rfl $ add_le_add le_rfl $ hpow_le (add_le_add hm le_rfl)
      ... = 3 * 2‚Åª¬π ^ m : by rw [mul_add, h2pow, bit1, add_mul, one_mul] },
    -- Finally, we glue `Hgt` and `Hle`
    have : (‚ãÉ (m ‚â§ n + k) (i ‚àà {i : Œπ | (D m i ‚à© B).nonempty}), {(m, i)}).finite,
      from (finite_le_nat _).bUnion (Œª i hi, (Hle i hi).finite.bUnion (Œª _ _, finite_singleton _)),
    refine this.subset (Œª I hI, _), simp only [mem_Union],
    refine ‚ü®I.1, _, I.2, hI, prod.mk.eta.symm‚ü©,
    exact not_lt.1 (Œª hlt, Hgt I.1 hlt I.2 hI.some_spec) }
end

@[priority 100] -- see Note [lower instance priority]
instance normal_of_emetric [emetric_space Œ±] : normal_space Œ± := normal_of_paracompact_t2

end emetric
