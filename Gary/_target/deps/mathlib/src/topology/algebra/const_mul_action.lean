/-
Copyright (c) 2021 Alex Kontorovich, Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Alex Kontorovich, Heather Macbeth
-/
import topology.homeomorph
import group_theory.group_action.basic
/-!
# Monoid actions continuous in the second variable

In this file we define class `has_continuous_const_smul`. We say `has_continuous_const_smul Œì T` if
`Œì` acts on `T` and for each `Œ≥`, the map `x ‚Ü¶ Œ≥ ‚Ä¢ x` is continuous. (This differs from
`has_continuous_smul`, which requires simultaneous continuity in both variables.)

## Main definitions

* `has_continuous_const_smul Œì T` : typeclass saying that the map `x ‚Ü¶ Œ≥ ‚Ä¢ x` is continuous on `T`;
* `properly_discontinuous_smul`: says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
  is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely
  many `Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
* `homeomorph.smul`: scalar multiplication by an element of a group `Œì` acting on `T`
  is a homeomorphism of `T`.

## Main results

* `is_open_map_quotient_mk_mul` : The quotient map by a group action is open.
* `t2_space_of_properly_discontinuous_smul_of_t2_space` : The quotient by a discontinuous group
  action of a locally compact t2 space is t2.

## Tags

Hausdorff, discrete group, properly discontinuous, quotient space

-/

open_locale topological_space pointwise

open filter set

local attribute [instance] mul_action.orbit_rel

/-- Class `has_continuous_const_smul Œì T` says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
is continuous in the second argument. We use the same class for all kinds of multiplicative
actions, including (semi)modules and algebras.
-/
class has_continuous_const_smul (Œì : Type*) (T : Type*) [topological_space T] [has_scalar Œì T]
 : Prop :=
(continuous_const_smul : ‚àÄ Œ≥ : Œì, continuous (Œª x : T, Œ≥ ‚Ä¢ x))

/-- Class `has_continuous_const_vadd Œì T` says that the additive action `(+·µ•) : Œì ‚Üí T ‚Üí T`
is continuous in the second argument. We use the same class for all kinds of additive actions,
including (semi)modules and algebras.
-/
class has_continuous_const_vadd (Œì : Type*) (T : Type*) [topological_space T]
  [has_vadd Œì T] : Prop :=
(continuous_const_vadd : ‚àÄ Œ≥ : Œì, continuous (Œª x : T, Œ≥ +·µ• x))

attribute [to_additive] has_continuous_const_smul

export has_continuous_const_smul (continuous_const_smul)

export has_continuous_const_vadd (continuous_const_vadd)

variables {M Œ± Œ≤ : Type*}

section has_scalar
variables [topological_space Œ±] [has_scalar M Œ±] [has_continuous_const_smul M Œ±]

@[to_additive]
lemma filter.tendsto.const_smul {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (hf : tendsto f l (ùìù a))
  (c : M) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù (c ‚Ä¢ a)) :=
((continuous_const_smul _).tendsto _).comp hf

variables [topological_space Œ≤] {f : Œ≤ ‚Üí M} {g : Œ≤ ‚Üí Œ±} {b : Œ≤} {s : set Œ≤}

@[to_additive]
lemma continuous_within_at.const_smul (hg : continuous_within_at g s b) (c : M) :
  continuous_within_at (Œª x, c ‚Ä¢ g x) s b :=
hg.const_smul c

@[to_additive]
lemma continuous_at.const_smul (hg : continuous_at g b) (c : M) :
  continuous_at (Œª x, c ‚Ä¢ g x) b :=
hg.const_smul c

@[to_additive]
lemma continuous_on.const_smul (hg : continuous_on g s) (c : M) :
  continuous_on (Œª x, c ‚Ä¢ g x) s :=
Œª x hx, (hg x hx).const_smul c

@[to_additive]
lemma continuous.const_smul (hg : continuous g) (c : M) :
  continuous (Œª x, c ‚Ä¢ g x) :=
(continuous_const_smul _).comp hg

/-- If a scalar is central, then its right action is continuous when its left action is. -/
instance has_continuous_const_smul.op [has_scalar M·µê·µí·µñ Œ±] [is_central_scalar M Œ±] :
  has_continuous_const_smul M·µê·µí·µñ Œ± :=
‚ü® mul_opposite.rec $ Œª c, by simpa only [op_smul_eq_smul] using continuous_const_smul c ‚ü©

@[to_additive]
instance [has_scalar M Œ≤] [has_continuous_const_smul M Œ≤] :
  has_continuous_const_smul M (Œ± √ó Œ≤) :=
‚ü®Œª _, (continuous_fst.const_smul _).prod_mk (continuous_snd.const_smul _)‚ü©

@[to_additive]
instance {Œπ : Type*} {Œ≥ : Œπ ‚Üí Type*} [‚àÄ i, topological_space (Œ≥ i)] [Œ† i, has_scalar M (Œ≥ i)]
  [‚àÄ i, has_continuous_const_smul M (Œ≥ i)] : has_continuous_const_smul M (Œ† i, Œ≥ i) :=
‚ü®Œª _, continuous_pi $ Œª i, (continuous_apply i).const_smul _‚ü©

end has_scalar

section monoid

variables [topological_space Œ±]
variables [monoid M] [mul_action M Œ±] [has_continuous_const_smul M Œ±]

@[to_additive] instance units.has_continuous_const_smul : has_continuous_const_smul MÀ£ Œ± :=
{ continuous_const_smul := Œª m, (continuous_const_smul (m : M) : _) }

@[to_additive]
lemma smul_closure_subset (c : M) (s : set Œ±) : c ‚Ä¢ closure s ‚äÜ closure (c ‚Ä¢ s) :=
((set.maps_to_image _ _).closure $ continuous_id.const_smul c).image_subset

@[to_additive]
lemma smul_closure_orbit_subset (c : M) (x : Œ±) :
  c ‚Ä¢ closure (mul_action.orbit M x) ‚äÜ closure (mul_action.orbit M x) :=
(smul_closure_subset c _).trans $ closure_mono $ mul_action.smul_orbit_subset _ _

end monoid

section group

variables {G : Type*} [topological_space Œ±] [group G] [mul_action G Œ±]
  [has_continuous_const_smul G Œ±]

@[to_additive]
lemma tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} (c : G) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
‚ü®Œª h, by simpa only [inv_smul_smul] using h.const_smul c‚Åª¬π,
  Œª h, h.const_smul _‚ü©

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤}  {s : set Œ≤}

@[to_additive]
lemma continuous_within_at_const_smul_iff (c : G) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
tendsto_const_smul_iff c

@[to_additive]
lemma continuous_on_const_smul_iff (c : G) : continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
forall‚ÇÇ_congr $ Œª b hb, continuous_within_at_const_smul_iff c

@[to_additive]
lemma continuous_at_const_smul_iff (c : G) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
tendsto_const_smul_iff c

@[to_additive]
lemma continuous_const_smul_iff (c : G) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
by simp only [continuous_iff_continuous_at, continuous_at_const_smul_iff]

/-- The homeomorphism given by scalar multiplication by a given element of a group `Œì` acting on
  `T` is a homeomorphism from `T` to itself. -/
@[to_additive] def homeomorph.smul {G : Type*} [group G]
  [mul_action G Œ±] [has_continuous_const_smul G Œ±] (Œ≥ : G) : Œ± ‚âÉ‚Çú Œ± :=
{ to_equiv := mul_action.to_perm Œ≥,
  continuous_to_fun  := continuous_const_smul Œ≥,
  continuous_inv_fun := continuous_const_smul Œ≥‚Åª¬π }

/-- The homeomorphism given by affine-addition by an element of an additive group `Œì` acting on
  `T` is a homeomorphism from `T` to itself. -/
add_decl_doc homeomorph.vadd

@[to_additive]
lemma is_open_map_smul (c : G) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul c).is_open_map

@[to_additive] lemma is_open.smul {s : set Œ±} (hs : is_open s) (c : G) : is_open (c ‚Ä¢ s) :=
is_open_map_smul c s hs

@[to_additive]
lemma is_closed_map_smul (c : G) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul c).is_closed_map

@[to_additive] lemma is_closed.smul {s : set Œ±} (hs : is_closed s) (c : G) : is_closed (c ‚Ä¢ s) :=
is_closed_map_smul c s hs

end group

section group_with_zero

variables {G‚ÇÄ : Type*} [topological_space Œ±] [group_with_zero G‚ÇÄ] [mul_action G‚ÇÄ Œ±]
  [has_continuous_const_smul G‚ÇÄ Œ±]

lemma tendsto_const_smul_iff‚ÇÄ {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} {c : G‚ÇÄ} (hc : c ‚â† 0) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
tendsto_const_smul_iff (units.mk0 c hc)

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : G‚ÇÄ} {s : set Œ≤}

lemma continuous_within_at_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
tendsto_const_smul_iff (units.mk0 c hc)

lemma continuous_on_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
continuous_on_const_smul_iff (units.mk0 c hc)

lemma continuous_at_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
continuous_at_const_smul_iff (units.mk0 c hc)

lemma continuous_const_smul_iff‚ÇÄ (hc : c ‚â† 0) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
continuous_const_smul_iff (units.mk0 c hc)

/-- Scalar multiplication by a non-zero element of a group with zero acting on `Œ±` is a
homeomorphism from `Œ±` onto itself. -/
protected def homeomorph.smul_of_ne_zero (c : G‚ÇÄ) (hc : c ‚â† 0) : Œ± ‚âÉ‚Çú Œ± :=
homeomorph.smul (units.mk0 c hc)

lemma is_open_map_smul‚ÇÄ {c : G‚ÇÄ} (hc : c ‚â† 0) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul_of_ne_zero c hc).is_open_map

lemma is_open.smul‚ÇÄ {c : G‚ÇÄ} {s : set Œ±} (hs : is_open s) (hc : c ‚â† 0) : is_open (c ‚Ä¢ s) :=
is_open_map_smul‚ÇÄ hc s hs

lemma interior_smul‚ÇÄ {c : G‚ÇÄ} (hc : c ‚â† 0) (s : set Œ±) : interior (c ‚Ä¢ s) = c ‚Ä¢ interior s :=
((homeomorph.smul_of_ne_zero c hc).image_interior s).symm

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/
lemma is_closed_map_smul_of_ne_zero {c : G‚ÇÄ} (hc : c ‚â† 0) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
(homeomorph.smul_of_ne_zero c hc).is_closed_map

/-- `smul` is a closed map in the second argument.

The lemma that `smul` is a closed map in the first argument (for a normed space over a complete
normed field) is `is_closed_map_smul_left` in `analysis.normed_space.finite_dimension`. -/
lemma is_closed_map_smul‚ÇÄ {ùïú M : Type*} [division_ring ùïú] [add_comm_monoid M] [topological_space M]
  [t1_space M] [module ùïú M] [has_continuous_const_smul ùïú M] (c : ùïú) :
  is_closed_map (Œª x : M, c ‚Ä¢ x) :=
begin
  rcases eq_or_ne c 0 with (rfl|hne),
  { simp only [zero_smul], exact is_closed_map_const },
  { exact (homeomorph.smul_of_ne_zero c hne).is_closed_map },
end

end group_with_zero

namespace is_unit

variables [monoid M] [topological_space Œ±] [mul_action M Œ±] [has_continuous_const_smul M Œ±]

lemma tendsto_const_smul_iff {f : Œ≤ ‚Üí Œ±} {l : filter Œ≤} {a : Œ±} {c : M} (hc : is_unit c) :
  tendsto (Œª x, c ‚Ä¢ f x) l (ùìù $ c ‚Ä¢ a) ‚Üî tendsto f l (ùìù a) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ tendsto_const_smul_iff u

variables [topological_space Œ≤] {f : Œ≤ ‚Üí Œ±} {b : Œ≤} {c : M} {s : set Œ≤}

lemma continuous_within_at_const_smul_iff (hc : is_unit c) :
  continuous_within_at (Œª x, c ‚Ä¢ f x) s b ‚Üî continuous_within_at f s b :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_within_at_const_smul_iff u

lemma continuous_on_const_smul_iff (hc : is_unit c) :
  continuous_on (Œª x, c ‚Ä¢ f x) s ‚Üî continuous_on f s :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_on_const_smul_iff u

lemma continuous_at_const_smul_iff (hc : is_unit c) :
  continuous_at (Œª x, c ‚Ä¢ f x) b ‚Üî continuous_at f b :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_at_const_smul_iff u

lemma continuous_const_smul_iff (hc : is_unit c) :
  continuous (Œª x, c ‚Ä¢ f x) ‚Üî continuous f :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ continuous_const_smul_iff u

lemma is_open_map_smul (hc : is_unit c) : is_open_map (Œª x : Œ±, c ‚Ä¢ x) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ is_open_map_smul u

lemma is_closed_map_smul (hc : is_unit c) : is_closed_map (Œª x : Œ±, c ‚Ä¢ x) :=
let ‚ü®u, hu‚ü© := hc in hu ‚ñ∏ is_closed_map_smul u

end is_unit

/-- Class `properly_discontinuous_smul Œì T` says that the scalar multiplication `(‚Ä¢) : Œì ‚Üí T ‚Üí T`
is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely many
`Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
-/
class properly_discontinuous_smul (Œì : Type*) (T : Type*) [topological_space T]
  [has_scalar Œì T] : Prop :=
(finite_disjoint_inter_image : ‚àÄ {K L : set T}, is_compact K ‚Üí is_compact L ‚Üí
  set.finite {Œ≥ : Œì | (((‚Ä¢) Œ≥) '' K) ‚à© L ‚â† ‚àÖ })

/-- Class `properly_discontinuous_vadd Œì T` says that the additive action `(+·µ•) : Œì ‚Üí T ‚Üí T`
is properly discontinuous, that is, for any pair of compact sets `K, L` in `T`, only finitely many
`Œ≥:Œì` move `K` to have nontrivial intersection with `L`.
-/
class properly_discontinuous_vadd (Œì : Type*) (T : Type*) [topological_space T]
  [has_vadd Œì T] : Prop :=
(finite_disjoint_inter_image : ‚àÄ {K L : set T}, is_compact K ‚Üí is_compact L ‚Üí
  set.finite {Œ≥ : Œì | (((+·µ•) Œ≥) '' K) ‚à© L ‚â† ‚àÖ })

attribute [to_additive] properly_discontinuous_smul

variables {Œì : Type*} [group Œì] {T : Type*} [topological_space T] [mul_action Œì T]

/-- A finite group action is always properly discontinuous
-/
@[priority 100, to_additive] instance fintype.properly_discontinuous_smul [fintype Œì] :
  properly_discontinuous_smul Œì T :=
{ finite_disjoint_inter_image := Œª _ _ _ _, set.finite.of_fintype _}

export properly_discontinuous_smul (finite_disjoint_inter_image)

export properly_discontinuous_vadd (finite_disjoint_inter_image)

/-- The quotient map by a group action is open. -/
@[to_additive]
lemma is_open_map_quotient_mk_mul [has_continuous_const_smul Œì T] :
  is_open_map (quotient.mk : T ‚Üí quotient (mul_action.orbit_rel Œì T)) :=
begin
  intros U hU,
  rw [is_open_coinduced, mul_action.quotient_preimage_image_eq_union_mul U],
  exact is_open_Union (Œª Œ≥, (homeomorph.smul Œ≥).is_open_map U hU)
end

/-- The quotient by a discontinuous group action of a locally compact t2 space is t2. -/
@[priority 100, to_additive] instance t2_space_of_properly_discontinuous_smul_of_t2_space
  [t2_space T] [locally_compact_space T] [has_continuous_const_smul Œì T]
  [properly_discontinuous_smul Œì T] : t2_space (quotient (mul_action.orbit_rel Œì T)) :=
begin
  set Q := quotient (mul_action.orbit_rel Œì T),
  rw t2_space_iff_nhds,
  let f : T ‚Üí Q := quotient.mk,
  have f_op : is_open_map f := is_open_map_quotient_mk_mul,
  rintros ‚ü®x‚ÇÄ‚ü© ‚ü®y‚ÇÄ‚ü© (hxy : f x‚ÇÄ ‚â† f y‚ÇÄ),
  show ‚àÉ (U ‚àà ùìù (f x‚ÇÄ)) (V ‚àà ùìù (f y‚ÇÄ)), U ‚à© V = ‚àÖ,
  have hx‚ÇÄy‚ÇÄ : x‚ÇÄ ‚â† y‚ÇÄ := ne_of_apply_ne _ hxy,
  have hŒ≥x‚ÇÄy‚ÇÄ : ‚àÄ Œ≥ : Œì, Œ≥ ‚Ä¢ x‚ÇÄ ‚â† y‚ÇÄ := not_exists.mp (mt quotient.sound hxy.symm : _),
  obtain ‚ü®K‚ÇÄ, L‚ÇÄ, K‚ÇÄ_in, L‚ÇÄ_in, hK‚ÇÄ, hL‚ÇÄ, hK‚ÇÄL‚ÇÄ‚ü© := t2_separation_compact_nhds hx‚ÇÄy‚ÇÄ,
  let bad_Œì_set := {Œ≥ : Œì | (((‚Ä¢) Œ≥) '' K‚ÇÄ) ‚à© L‚ÇÄ ‚â† ‚àÖ },
  have bad_Œì_finite : bad_Œì_set.finite := finite_disjoint_inter_image hK‚ÇÄ hL‚ÇÄ,
  choose u v hu hv u_v_disjoint using Œª Œ≥, t2_separation_nhds (hŒ≥x‚ÇÄy‚ÇÄ Œ≥),
  let U‚ÇÄ‚ÇÄ := ‚ãÇ Œ≥ ‚àà bad_Œì_set, ((‚Ä¢) Œ≥) ‚Åª¬π' (u Œ≥),
  let U‚ÇÄ := U‚ÇÄ‚ÇÄ ‚à© K‚ÇÄ,
  let V‚ÇÄ‚ÇÄ := ‚ãÇ Œ≥ ‚àà bad_Œì_set, v Œ≥,
  let V‚ÇÄ := V‚ÇÄ‚ÇÄ ‚à© L‚ÇÄ,
  have U_nhds : f '' U‚ÇÄ ‚àà ùìù (f x‚ÇÄ),
  { apply f_op.image_mem_nhds (inter_mem ((bInter_mem bad_Œì_finite).mpr $ Œª Œ≥ hŒ≥, _) K‚ÇÄ_in),
    exact (continuous_const_smul _).continuous_at (hu Œ≥) },
  have V_nhds : f '' V‚ÇÄ ‚àà ùìù (f y‚ÇÄ),
    from f_op.image_mem_nhds (inter_mem ((bInter_mem bad_Œì_finite).mpr $ Œª Œ≥ hŒ≥, hv Œ≥) L‚ÇÄ_in),
  refine ‚ü®f '' U‚ÇÄ, U_nhds, f '' V‚ÇÄ, V_nhds, _‚ü©,
  rw mul_action.image_inter_image_iff,
  rintros x ‚ü®x_in_U‚ÇÄ‚ÇÄ, x_in_K‚ÇÄ‚ü© Œ≥,
  by_cases H : Œ≥ ‚àà bad_Œì_set,
  { rintros ‚ü®h, -‚ü©,
    exact eq_empty_iff_forall_not_mem.mp (u_v_disjoint Œ≥) (Œ≥ ‚Ä¢ x)
      ‚ü®(mem_Inter‚ÇÇ.mp x_in_U‚ÇÄ‚ÇÄ Œ≥ H : _), mem_Inter‚ÇÇ.mp h Œ≥ H‚ü© },
  { rintros ‚ü®-, h'‚ü©,
    simp only [image_smul, not_not, mem_set_of_eq, ne.def] at H,
    exact eq_empty_iff_forall_not_mem.mp H (Œ≥ ‚Ä¢ x) ‚ü®mem_image_of_mem _ x_in_K‚ÇÄ, h'‚ü© },
end
