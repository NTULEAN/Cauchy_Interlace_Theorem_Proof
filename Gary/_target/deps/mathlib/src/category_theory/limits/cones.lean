/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison, Floris van Doorn
-/
import category_theory.const
import category_theory.discrete_category
import category_theory.yoneda
import category_theory.reflects_isomorphisms

-- morphism levels before object levels. See note [category_theory universes].
universes v‚ÇÅ v‚ÇÇ v‚ÇÉ v‚ÇÑ u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ
open category_theory

variables {J : Type u‚ÇÅ} [category.{v‚ÇÅ} J]
variables {K : Type u‚ÇÇ} [category.{v‚ÇÇ} K]
variables {C : Type u‚ÇÉ} [category.{v‚ÇÉ} C]
variables {D : Type u‚ÇÑ} [category.{v‚ÇÑ} D]

open category_theory
open category_theory.category
open category_theory.functor
open opposite

namespace category_theory

namespace functor
variables {J C} (F : J ‚•§ C)

/--
`F.cones` is the functor assigning to an object `X` the type of
natural transformations from the constant functor with value `X` to `F`.
An object representing this functor is a limit of `F`.
-/
@[simps]
def cones : C·µí·µñ ‚•§ Type (max u‚ÇÅ v‚ÇÉ) := (const J).op ‚ãô yoneda.obj F

/--
`F.cocones` is the functor assigning to an object `X` the type of
natural transformations from `F` to the constant functor with value `X`.
An object corepresenting this functor is a colimit of `F`.
-/
@[simps]
def cocones : C ‚•§ Type (max u‚ÇÅ v‚ÇÉ) := const J ‚ãô coyoneda.obj (op F)

end functor

section
variables (J C)

/--
Functorially associated to each functor `J ‚•§ C`, we have the `C`-presheaf consisting of
cones with a given cone point.
-/
@[simps] def cones : (J ‚•§ C) ‚•§ (C·µí·µñ ‚•§ Type (max u‚ÇÅ v‚ÇÉ)) :=
{ obj := functor.cones,
  map := Œª F G f, whisker_left (const J).op (yoneda.map f) }

/--
Contravariantly associated to each functor `J ‚•§ C`, we have the `C`-copresheaf consisting of
cocones with a given cocone point.
-/
@[simps] def cocones : (J ‚•§ C)·µí·µñ ‚•§ (C ‚•§ Type (max u‚ÇÅ v‚ÇÉ)) :=
{ obj := Œª F, functor.cocones (unop F),
  map := Œª F G f, whisker_left (const J) (coyoneda.map f) }

end

namespace limits

/--
A `c : cone F` is:
* an object `c.X` and
* a natural transformation `c.œÄ : c.X ‚ü∂ F` from the constant `c.X` functor to `F`.

`cone F` is equivalent, via `cone.equiv` below, to `Œ£ X, F.cones.obj X`.
-/
structure cone (F : J ‚•§ C) :=
(X : C)
(œÄ : (const J).obj X ‚ü∂ F)

instance inhabited_cone (F : discrete punit ‚•§ C) : inhabited (cone F) :=
‚ü®{ X := F.obj punit.star,
   œÄ := { app := Œª ‚ü®‚ü©, ùüô _ } }‚ü©

@[simp, reassoc] lemma cone.w {F : J ‚•§ C} (c : cone F) {j j' : J} (f : j ‚ü∂ j') :
  c.œÄ.app j ‚â´ F.map f = c.œÄ.app j' :=
by { rw ‚Üê c.œÄ.naturality f, apply id_comp }

/--
A `c : cocone F` is
* an object `c.X` and
* a natural transformation `c.Œπ : F ‚ü∂ c.X` from `F` to the constant `c.X` functor.

`cocone F` is equivalent, via `cone.equiv` below, to `Œ£ X, F.cocones.obj X`.
-/
structure cocone (F : J ‚•§ C) :=
(X : C)
(Œπ : F ‚ü∂ (const J).obj X)

instance inhabited_cocone (F : discrete punit ‚•§ C) : inhabited (cocone F) :=
‚ü®{ X := F.obj punit.star,
   Œπ := { app := Œª ‚ü®‚ü©, ùüô _ } }‚ü©

@[simp, reassoc] lemma cocone.w {F : J ‚•§ C} (c : cocone F) {j j' : J} (f : j ‚ü∂ j') :
  F.map f ‚â´ c.Œπ.app j' = c.Œπ.app j :=
by { rw c.Œπ.naturality f, apply comp_id }

variables {F : J ‚•§ C}

namespace cone

/-- The isomorphism between a cone on `F` and an element of the functor `F.cones`. -/
@[simps]
def equiv (F : J ‚•§ C) : cone F ‚âÖ Œ£ X, F.cones.obj X :=
{ hom := Œª c, ‚ü®op c.X, c.œÄ‚ü©,
  inv := Œª c, { X := c.1.unop, œÄ := c.2 },
  hom_inv_id' := by { ext1, cases x, refl },
  inv_hom_id' := by { ext1, cases x, refl } }

/-- A map to the vertex of a cone naturally induces a cone by composition. -/
@[simps] def extensions (c : cone F) :
  yoneda.obj c.X ‚ãô ulift_functor.{u‚ÇÅ} ‚ü∂ F.cones :=
{ app := Œª X f, (const J).map f.down ‚â´ c.œÄ }

/-- A map to the vertex of a cone induces a cone by composition. -/
@[simps] def extend (c : cone F) {X : C} (f : X ‚ü∂ c.X) : cone F :=
{ X := X,
  œÄ := c.extensions.app (op X) ‚ü®f‚ü© }

/-- Whisker a cone by precomposition of a functor. -/
@[simps] def whisker (E : K ‚•§ J) (c : cone F) : cone (E ‚ãô F) :=
{ X := c.X,
  œÄ := whisker_left E c.œÄ }

end cone

namespace cocone

/-- The isomorphism between a cocone on `F` and an element of the functor `F.cocones`. -/
def equiv (F : J ‚•§ C) : cocone F ‚âÖ Œ£ X, F.cocones.obj X :=
{ hom := Œª c, ‚ü®c.X, c.Œπ‚ü©,
  inv := Œª c, { X := c.1, Œπ := c.2 },
  hom_inv_id' := by { ext1, cases x, refl },
  inv_hom_id' := by { ext1, cases x, refl } }

/-- A map from the vertex of a cocone naturally induces a cocone by composition. -/
@[simps] def extensions (c : cocone F) : coyoneda.obj (op c.X) ‚ãô ulift_functor.{u‚ÇÅ} ‚ü∂ F.cocones :=
{ app := Œª X f, c.Œπ ‚â´ (const J).map f.down }

/-- A map from the vertex of a cocone induces a cocone by composition. -/
@[simps] def extend (c : cocone F) {X : C} (f : c.X ‚ü∂ X) : cocone F :=
{ X := X,
  Œπ := c.extensions.app X ‚ü®f‚ü© }

/--
Whisker a cocone by precomposition of a functor. See `whiskering` for a functorial
version.
-/
@[simps] def whisker (E : K ‚•§ J) (c : cocone F) : cocone (E ‚ãô F) :=
{ X := c.X,
  Œπ := whisker_left E c.Œπ }

end cocone

/-- A cone morphism between two cones for the same diagram is a morphism of the cone points which
commutes with the cone legs. -/
@[ext] structure cone_morphism (A B : cone F) :=
(hom : A.X ‚ü∂ B.X)
(w'  : ‚àÄ j : J, hom ‚â´ B.œÄ.app j = A.œÄ.app j . obviously)

restate_axiom cone_morphism.w'
attribute [simp, reassoc] cone_morphism.w

instance inhabited_cone_morphism (A : cone F) : inhabited (cone_morphism A A) :=
‚ü®{ hom := ùüô _ }‚ü©

/-- The category of cones on a given diagram. -/
@[simps] instance cone.category : category (cone F) :=
{ hom  := Œª A B, cone_morphism A B,
  comp := Œª X Y Z f g, { hom := f.hom ‚â´ g.hom },
  id   := Œª B, { hom := ùüô B.X } }

namespace cones
/-- To give an isomorphism between cones, it suffices to give an
  isomorphism between their vertices which commutes with the cone
  maps. -/
@[ext, simps] def ext {c c' : cone F}
  (œÜ : c.X ‚âÖ c'.X) (w : ‚àÄ j, c.œÄ.app j = œÜ.hom ‚â´ c'.œÄ.app j) : c ‚âÖ c' :=
{ hom := { hom := œÜ.hom },
  inv := { hom := œÜ.inv, w' := Œª j, œÜ.inv_comp_eq.mpr (w j) } }

/--
Given a cone morphism whose object part is an isomorphism, produce an
isomorphism of cones.
-/
lemma cone_iso_of_hom_iso {K : J ‚•§ C} {c d : cone K} (f : c ‚ü∂ d) [i : is_iso f.hom] :
  is_iso f :=
‚ü®‚ü®{ hom := inv f.hom,
    w' := Œª j, (as_iso f.hom).inv_comp_eq.2 (f.w j).symm }, by tidy‚ü©‚ü©

/--
Functorially postcompose a cone for `F` by a natural transformation `F ‚ü∂ G` to give a cone for `G`.
-/
@[simps] def postcompose {G : J ‚•§ C} (Œ± : F ‚ü∂ G) : cone F ‚•§ cone G :=
{ obj := Œª c, { X := c.X, œÄ := c.œÄ ‚â´ Œ± },
  map := Œª c‚ÇÅ c‚ÇÇ f, { hom := f.hom } }

/-- Postcomposing a cone by the composite natural transformation `Œ± ‚â´ Œ≤` is the same as
postcomposing by `Œ±` and then by `Œ≤`. -/
@[simps]
def postcompose_comp {G H : J ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  postcompose (Œ± ‚â´ Œ≤) ‚âÖ postcompose Œ± ‚ãô postcompose Œ≤ :=
nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy)

/-- Postcomposing by the identity does not change the cone up to isomorphism. -/
@[simps]
def postcompose_id : postcompose (ùüô F) ‚âÖ ùü≠ (cone F) :=
nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy)

/--
If `F` and `G` are naturally isomorphic functors, then they have equivalent categories of
cones.
-/
@[simps]
def postcompose_equivalence {G : J ‚•§ C} (Œ± : F ‚âÖ G) : cone F ‚âå cone G :=
{ functor := postcompose Œ±.hom,
  inverse := postcompose Œ±.inv,
  unit_iso := nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy) }

/--
Whiskering on the left by `E : K ‚•§ J` gives a functor from `cone F` to `cone (E ‚ãô F)`.
-/
@[simps]
def whiskering (E : K ‚•§ J) : cone F ‚•§ cone (E ‚ãô F) :=
{ obj := Œª c, c.whisker E,
  map := Œª c c' f, { hom := f.hom } }

/--
Whiskering by an equivalence gives an equivalence between categories of cones.
-/
@[simps]
def whiskering_equivalence (e : K ‚âå J) :
  cone F ‚âå cone (e.functor ‚ãô F) :=
{ functor := whiskering e.functor,
  inverse := whiskering e.inverse ‚ãô postcompose (e.inv_fun_id_assoc F).hom,
  unit_iso := nat_iso.of_components (Œª s, cones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª s, cones.ext (iso.refl _)
  (begin
    intro k,
    dsimp, -- See library note [dsimp, simp]
    simpa [e.counit_app_functor] using s.w (e.unit_inv.app k),
  end)) (by tidy), }

/--
The categories of cones over `F` and `G` are equivalent if `F` and `G` are naturally isomorphic
(possibly after changing the indexing category by an equivalence).
-/
@[simps functor inverse unit_iso counit_iso]
def equivalence_of_reindexing {G : K ‚•§ C}
  (e : K ‚âå J) (Œ± : e.functor ‚ãô F ‚âÖ G) : cone F ‚âå cone G :=
(whiskering_equivalence e).trans (postcompose_equivalence Œ±)

section
variable (F)

/-- Forget the cone structure and obtain just the cone point. -/
@[simps]
def forget : cone F ‚•§ C :=
{ obj := Œª t, t.X, map := Œª s t f, f.hom }

variables (G : C ‚•§ D)

/-- A functor `G : C ‚•§ D` sends cones over `F` to cones over `F ‚ãô G` functorially. -/
@[simps] def functoriality : cone F ‚•§ cone (F ‚ãô G) :=
{ obj := Œª A,
  { X := G.obj A.X,
    œÄ := { app := Œª j, G.map (A.œÄ.app j), naturality' := by intros; erw ‚ÜêG.map_comp; tidy } },
  map := Œª X Y f,
  { hom := G.map f.hom,
    w' := Œª j, by simp [-cone_morphism.w, ‚Üêf.w j] } }

instance functoriality_full [full G] [faithful G] : full (functoriality F G) :=
{ preimage := Œª X Y t,
  { hom := G.preimage t.hom,
    w' := Œª j, G.map_injective (by simpa using t.w j) } }

instance functoriality_faithful [faithful G] : faithful (cones.functoriality F G) :=
{ map_injective' := Œª X Y f g e, by { ext1, injection e, apply G.map_injective h_1 } }

/--
If `e : C ‚âå D` is an equivalence of categories, then `functoriality F e.functor` induces an
equivalence between cones over `F` and cones over `F ‚ãô e.functor`.
-/
@[simps]
def functoriality_equivalence (e : C ‚âå D) : cone F ‚âå cone (F ‚ãô e.functor) :=
let f : (F ‚ãô e.functor) ‚ãô e.inverse ‚âÖ F :=
  functor.associator _ _ _ ‚â™‚â´ iso_whisker_left _ (e.unit_iso).symm ‚â™‚â´ functor.right_unitor _ in
{ functor := functoriality F e.functor,
  inverse := (functoriality (F ‚ãô e.functor) e.inverse) ‚ãô
    (postcompose_equivalence f).functor,
  unit_iso := nat_iso.of_components (Œª c, cones.ext (e.unit_iso.app _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª c, cones.ext (e.counit_iso.app _) (by tidy)) (by tidy), }

/--
If `F` reflects isomorphisms, then `cones.functoriality F` reflects isomorphisms
as well.
-/
instance reflects_cone_isomorphism (F : C ‚•§ D) [reflects_isomorphisms F] (K : J ‚•§ C) :
  reflects_isomorphisms (cones.functoriality K F) :=
begin
  constructor,
  introsI,
  haveI : is_iso (F.map f.hom) :=
    (cones.forget (K ‚ãô F)).map_is_iso ((cones.functoriality K F).map f),
  haveI := reflects_isomorphisms.reflects F f.hom,
  apply cone_iso_of_hom_iso
end

end

end cones

/-- A cocone morphism between two cocones for the same diagram is a morphism of the cocone points
which commutes with the cocone legs. -/
@[ext] structure cocone_morphism (A B : cocone F) :=
(hom : A.X ‚ü∂ B.X)
(w'  : ‚àÄ j : J, A.Œπ.app j ‚â´ hom = B.Œπ.app j . obviously)

instance inhabited_cocone_morphism (A : cocone F) : inhabited (cocone_morphism A A) :=
‚ü®{ hom := ùüô _ }‚ü©

restate_axiom cocone_morphism.w'
attribute [simp, reassoc] cocone_morphism.w

@[simps] instance cocone.category : category (cocone F) :=
{ hom  := Œª A B, cocone_morphism A B,
  comp := Œª _ _ _ f g,
  { hom := f.hom ‚â´ g.hom },
  id   := Œª B, { hom := ùüô B.X } }

namespace cocones
/-- To give an isomorphism between cocones, it suffices to give an
  isomorphism between their vertices which commutes with the cocone
  maps. -/
@[ext, simps] def ext {c c' : cocone F}
  (œÜ : c.X ‚âÖ c'.X) (w : ‚àÄ j, c.Œπ.app j ‚â´ œÜ.hom = c'.Œπ.app j) : c ‚âÖ c' :=
{ hom := { hom := œÜ.hom },
  inv := { hom := œÜ.inv, w' := Œª j, œÜ.comp_inv_eq.mpr (w j).symm } }

/--
Given a cocone morphism whose object part is an isomorphism, produce an
isomorphism of cocones.
-/
lemma cocone_iso_of_hom_iso {K : J ‚•§ C} {c d : cocone K} (f : c ‚ü∂ d) [i : is_iso f.hom] :
  is_iso f :=
‚ü®‚ü®{ hom := inv f.hom,
    w' := Œª j, (as_iso f.hom).comp_inv_eq.2 (f.w j).symm }, by tidy‚ü©‚ü©

/-- Functorially precompose a cocone for `F` by a natural transformation `G ‚ü∂ F` to give a cocone
for `G`. -/
@[simps] def precompose {G : J ‚•§ C} (Œ± : G ‚ü∂ F) : cocone F ‚•§ cocone G :=
{ obj := Œª c, { X := c.X, Œπ := Œ± ‚â´ c.Œπ },
  map := Œª c‚ÇÅ c‚ÇÇ f, { hom := f.hom } }

/-- Precomposing a cocone by the composite natural transformation `Œ± ‚â´ Œ≤` is the same as
precomposing by `Œ≤` and then by `Œ±`. -/
def precompose_comp {G H : J ‚•§ C} (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  precompose (Œ± ‚â´ Œ≤) ‚âÖ precompose Œ≤ ‚ãô precompose Œ± :=
nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy)

/-- Precomposing by the identity does not change the cocone up to isomorphism. -/
def precompose_id : precompose (ùüô F) ‚âÖ ùü≠ (cocone F) :=
nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy)

/--
If `F` and `G` are naturally isomorphic functors, then they have equivalent categories of
cocones.
-/
@[simps]
def precompose_equivalence {G : J ‚•§ C} (Œ± : G ‚âÖ F) : cocone F ‚âå cocone G :=
{ functor := precompose Œ±.hom,
  inverse := precompose Œ±.inv,
  unit_iso := nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy) }

/--
Whiskering on the left by `E : K ‚•§ J` gives a functor from `cocone F` to `cocone (E ‚ãô F)`.
-/
@[simps]
def whiskering (E : K ‚•§ J) : cocone F ‚•§ cocone (E ‚ãô F) :=
{ obj := Œª c, c.whisker E,
  map := Œª c c' f, { hom := f.hom, } }

/--
Whiskering by an equivalence gives an equivalence between categories of cones.
-/
@[simps]
def whiskering_equivalence (e : K ‚âå J) :
  cocone F ‚âå cocone (e.functor ‚ãô F) :=
{ functor := whiskering e.functor,
  inverse := whiskering e.inverse ‚ãô
    precompose ((functor.left_unitor F).inv ‚â´ (whisker_right (e.counit_iso).inv F) ‚â´
      (functor.associator _ _ _).inv),
  unit_iso := nat_iso.of_components (Œª s, cocones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª s, cocones.ext (iso.refl _)
  (begin
    intro k,
    dsimp,
    simpa [e.counit_inv_app_functor k] using s.w (e.unit.app k),
  end)) (by tidy), }

/--
The categories of cocones over `F` and `G` are equivalent if `F` and `G` are naturally isomorphic
(possibly after changing the indexing category by an equivalence).
-/
@[simps functor_obj]
def equivalence_of_reindexing {G : K ‚•§ C}
  (e : K ‚âå J) (Œ± : e.functor ‚ãô F ‚âÖ G) : cocone F ‚âå cocone G :=
(whiskering_equivalence e).trans (precompose_equivalence Œ±.symm)

section
variable (F)

/-- Forget the cocone structure and obtain just the cocone point. -/
@[simps]
def forget : cocone F ‚•§ C :=
{ obj := Œª t, t.X, map := Œª s t f, f.hom }

variables (G : C ‚•§ D)

/-- A functor `G : C ‚•§ D` sends cocones over `F` to cocones over `F ‚ãô G` functorially. -/
@[simps] def functoriality : cocone F ‚•§ cocone (F ‚ãô G) :=
{ obj := Œª A,
  { X := G.obj A.X,
    Œπ := { app := Œª j, G.map (A.Œπ.app j), naturality' := by intros; erw ‚ÜêG.map_comp; tidy } },
  map := Œª _ _ f,
  { hom := G.map f.hom,
    w'  := by intros; rw [‚Üêfunctor.map_comp, cocone_morphism.w] } }

instance functoriality_full [full G] [faithful G] : full (functoriality F G) :=
{ preimage := Œª X Y t,
  { hom := G.preimage t.hom,
    w' := Œª j, G.map_injective (by simpa using t.w j) } }

instance functoriality_faithful [faithful G] : faithful (functoriality F G) :=
{ map_injective' := Œª X Y f g e, by { ext1, injection e, apply G.map_injective h_1 } }

/--
If `e : C ‚âå D` is an equivalence of categories, then `functoriality F e.functor` induces an
equivalence between cocones over `F` and cocones over `F ‚ãô e.functor`.
-/
@[simps]
def functoriality_equivalence (e : C ‚âå D) : cocone F ‚âå cocone (F ‚ãô e.functor) :=
let f : (F ‚ãô e.functor) ‚ãô e.inverse ‚âÖ F :=
  functor.associator _ _ _ ‚â™‚â´ iso_whisker_left _ (e.unit_iso).symm ‚â™‚â´ functor.right_unitor _ in
{ functor := functoriality F e.functor,
  inverse := (functoriality (F ‚ãô e.functor) e.inverse) ‚ãô
    (precompose_equivalence f.symm).functor,
  unit_iso := nat_iso.of_components (Œª c, cocones.ext (e.unit_iso.app _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª c, cocones.ext (e.counit_iso.app _)
  begin
    -- Unfortunately this doesn't work by `tidy`.
    -- In this configuration `simp` reaches a dead-end and needs help.
    intros j,
    dsimp,
    simp only [‚Üêequivalence.counit_inv_app_functor, iso.inv_hom_id_app, map_comp,
      equivalence.fun_inv_map, assoc, id_comp, iso.inv_hom_id_app_assoc],
    dsimp, simp, -- See note [dsimp, simp].
  end)
  (Œª c c' f, by { ext, dsimp, simp, dsimp, simp, }), }

/--
If `F` reflects isomorphisms, then `cocones.functoriality F` reflects isomorphisms
as well.
-/
instance reflects_cocone_isomorphism (F : C ‚•§ D) [reflects_isomorphisms F] (K : J ‚•§ C) :
  reflects_isomorphisms (cocones.functoriality K F) :=
begin
  constructor,
  introsI,
  haveI : is_iso (F.map f.hom) :=
    (cocones.forget (K ‚ãô F)).map_is_iso ((cocones.functoriality K F).map f),
  haveI := reflects_isomorphisms.reflects F f.hom,
  apply cocone_iso_of_hom_iso
end

end
end cocones

end limits

namespace functor

variables {F : J ‚•§ C} {G : J ‚•§ C} (H : C ‚•§ D)

open category_theory.limits

/-- The image of a cone in C under a functor G : C ‚•§ D is a cone in D. -/
@[simps]
def map_cone   (c : cone F)   : cone (F ‚ãô H)   := (cones.functoriality F H).obj c
/-- The image of a cocone in C under a functor G : C ‚•§ D is a cocone in D. -/
@[simps]
def map_cocone (c : cocone F) : cocone (F ‚ãô H) := (cocones.functoriality F H).obj c

/-- Given a cone morphism `c ‚ü∂ c'`, construct a cone morphism on the mapped cones functorially.  -/
def map_cone_morphism   {c c' : cone F}   (f : c ‚ü∂ c')   :
  H.map_cone c ‚ü∂ H.map_cone c' := (cones.functoriality F H).map f

/-- Given a cocone morphism `c ‚ü∂ c'`, construct a cocone morphism on the mapped cocones
functorially. -/
def map_cocone_morphism {c c' : cocone F} (f : c ‚ü∂ c') :
  H.map_cocone c ‚ü∂ H.map_cocone c' := (cocones.functoriality F H).map f

/-- If `H` is an equivalence, we invert `H.map_cone` and get a cone for `F` from a cone
for `F ‚ãô H`.-/
def map_cone_inv [is_equivalence H]
  (c : cone (F ‚ãô H)) : cone F :=
(limits.cones.functoriality_equivalence F (as_equivalence H)).inverse.obj c

/-- `map_cone` is the left inverse to `map_cone_inv`. -/
def map_cone_map_cone_inv {F : J ‚•§ D} (H : D ‚•§ C) [is_equivalence H] (c : cone (F ‚ãô H)) :
  map_cone H (map_cone_inv H c) ‚âÖ c :=
(limits.cones.functoriality_equivalence F (as_equivalence H)).counit_iso.app c

/-- `map_cone` is the right inverse to `map_cone_inv`. -/
def map_cone_inv_map_cone {F : J ‚•§ D} (H : D ‚•§ C) [is_equivalence H] (c : cone F) :
  map_cone_inv H (map_cone H c) ‚âÖ c :=
(limits.cones.functoriality_equivalence F (as_equivalence H)).unit_iso.symm.app c
/-- If `H` is an equivalence, we invert `H.map_cone` and get a cone for `F` from a cone
for `F ‚ãô H`.-/

def map_cocone_inv [is_equivalence H]
  (c : cocone (F ‚ãô H)) : cocone F :=
(limits.cocones.functoriality_equivalence F (as_equivalence H)).inverse.obj c

/-- `map_cocone` is the left inverse to `map_cocone_inv`. -/
def map_cocone_map_cocone_inv {F : J ‚•§ D} (H : D ‚•§ C) [is_equivalence H] (c : cocone (F ‚ãô H)) :
  map_cocone H (map_cocone_inv H c) ‚âÖ c :=
(limits.cocones.functoriality_equivalence F (as_equivalence H)).counit_iso.app c

/-- `map_cocone` is the right inverse to `map_cocone_inv`. -/
def map_cocone_inv_map_cocone {F : J ‚•§ D} (H : D ‚•§ C) [is_equivalence H] (c : cocone F) :
  map_cocone_inv H (map_cocone H c) ‚âÖ c :=
(limits.cocones.functoriality_equivalence F (as_equivalence H)).unit_iso.symm.app c

/-- `functoriality F _ ‚ãô postcompose (whisker_left F _)` simplifies to `functoriality F _`. -/
@[simps]
def functoriality_comp_postcompose {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') :
  cones.functoriality F H ‚ãô cones.postcompose (whisker_left F Œ±.hom) ‚âÖ cones.functoriality F H' :=
nat_iso.of_components (Œª c, cones.ext (Œ±.app _) (by tidy)) (by tidy)

/--
For `F : J ‚•§ C`, given a cone `c : cone F`, and a natural isomorphism `Œ± : H ‚âÖ H'` for functors
`H H' : C ‚•§ D`, the postcomposition of the cone `H.map_cone` using the isomorphism `Œ±` is
isomorphic to the cone `H'.map_cone`.
-/
@[simps]
def postcompose_whisker_left_map_cone {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') (c : cone F) :
  (cones.postcompose (whisker_left F Œ±.hom : _)).obj (H.map_cone c) ‚âÖ H'.map_cone c :=
(functoriality_comp_postcompose Œ±).app c

/--
`map_cone` commutes with `postcompose`. In particular, for `F : J ‚•§ C`, given a cone `c : cone F`, a
natural transformation `Œ± : F ‚ü∂ G` and a functor `H : C ‚•§ D`, we have two obvious ways of producing
a cone over `G ‚ãô H`, and they are both isomorphic.
-/
@[simps]
def map_cone_postcompose {Œ± : F ‚ü∂ G} {c} :
  H.map_cone ((cones.postcompose Œ±).obj c) ‚âÖ
  (cones.postcompose (whisker_right Œ± H : _)).obj (H.map_cone c) :=
cones.ext (iso.refl _) (by tidy)

/--
`map_cone` commutes with `postcompose_equivalence`
-/
@[simps]
def map_cone_postcompose_equivalence_functor {Œ± : F ‚âÖ G} {c} :
  H.map_cone ((cones.postcompose_equivalence Œ±).functor.obj c) ‚âÖ
    (cones.postcompose_equivalence (iso_whisker_right Œ± H : _)).functor.obj (H.map_cone c) :=
cones.ext (iso.refl _) (by tidy)

/-- `functoriality F _ ‚ãô precompose (whisker_left F _)` simplifies to `functoriality F _`. -/
@[simps]
def functoriality_comp_precompose {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') :
   cocones.functoriality F H ‚ãô cocones.precompose (whisker_left F Œ±.inv)
 ‚âÖ cocones.functoriality F H' :=
nat_iso.of_components (Œª c, cocones.ext (Œ±.app _) (by tidy)) (by tidy)

/--
For `F : J ‚•§ C`, given a cocone `c : cocone F`, and a natural isomorphism `Œ± : H ‚âÖ H'` for functors
`H H' : C ‚•§ D`, the precomposition of the cocone `H.map_cocone` using the isomorphism `Œ±` is
isomorphic to the cocone `H'.map_cocone`.
-/
@[simps]
def precompose_whisker_left_map_cocone {H H' : C ‚•§ D} (Œ± : H ‚âÖ H') (c : cocone F) :
  (cocones.precompose (whisker_left F Œ±.inv : _)).obj (H.map_cocone c) ‚âÖ H'.map_cocone c :=
(functoriality_comp_precompose Œ±).app c

/--
`map_cocone` commutes with `precompose`. In particular, for `F : J ‚•§ C`, given a cocone
`c : cocone F`, a natural transformation `Œ± : F ‚ü∂ G` and a functor `H : C ‚•§ D`, we have two obvious
ways of producing a cocone over `G ‚ãô H`, and they are both isomorphic.
-/
@[simps]
def map_cocone_precompose {Œ± : F ‚ü∂ G} {c} :
  H.map_cocone ((cocones.precompose Œ±).obj c) ‚âÖ
  (cocones.precompose (whisker_right Œ± H : _)).obj (H.map_cocone c) :=
cocones.ext (iso.refl _) (by tidy)

/--
`map_cocone` commutes with `precompose_equivalence`
-/
@[simps]
def map_cocone_precompose_equivalence_functor {Œ± : F ‚âÖ G} {c} :
  H.map_cocone ((cocones.precompose_equivalence Œ±).functor.obj c) ‚âÖ
    (cocones.precompose_equivalence (iso_whisker_right Œ± H : _)).functor.obj (H.map_cocone c) :=
cocones.ext (iso.refl _) (by tidy)

/--
`map_cone` commutes with `whisker`
-/
@[simps]
def map_cone_whisker {E : K ‚•§ J} {c : cone F} :
  H.map_cone (c.whisker E) ‚âÖ (H.map_cone c).whisker E :=
cones.ext (iso.refl _) (by tidy)

/--
`map_cocone` commutes with `whisker`
-/
@[simps]
def map_cocone_whisker {E : K ‚•§ J} {c : cocone F} :
  H.map_cocone (c.whisker E) ‚âÖ (H.map_cocone c).whisker E :=
cocones.ext (iso.refl _) (by tidy)

end functor

end category_theory

namespace category_theory.limits

section
variables {F : J ‚•§ C}

/-- Change a `cocone F` into a `cone F.op`. -/
@[simps] def cocone.op (c : cocone F) : cone F.op :=
{ X := op c.X,
  œÄ :=
  { app := Œª j, (c.Œπ.app (unop j)).op,
    naturality' := Œª j j' f, quiver.hom.unop_inj (by tidy) } }

/-- Change a `cone F` into a `cocone F.op`. -/
@[simps] def cone.op (c : cone F) : cocone F.op :=
{ X := op c.X,
  Œπ :=
  { app := Œª j, (c.œÄ.app (unop j)).op,
    naturality' := Œª j j' f, quiver.hom.unop_inj (by tidy) } }

/-- Change a `cocone F.op` into a `cone F`. -/
@[simps] def cocone.unop (c : cocone F.op) : cone F :=
{ X := unop c.X,
  œÄ :=
  { app := Œª j, (c.Œπ.app (op j)).unop,
    naturality' := Œª j j' f, quiver.hom.op_inj (c.Œπ.naturality f.op).symm } }

/-- Change a `cone F.op` into a `cocone F`. -/
@[simps] def cone.unop (c : cone F.op) : cocone F :=
{ X := unop c.X,
  Œπ :=
  { app := Œª j, (c.œÄ.app (op j)).unop,
    naturality' := Œª j j' f, quiver.hom.op_inj (c.œÄ.naturality f.op).symm } }

variables (F)

/--
The category of cocones on `F`
is equivalent to the opposite category of
the category of cones on the opposite of `F`.
-/
@[simps]
def cocone_equivalence_op_cone_op : cocone F ‚âå (cone F.op)·µí·µñ :=
{ functor :=
  { obj := Œª c, op (cocone.op c),
    map := Œª X Y f, quiver.hom.op
    { hom := f.hom.op,
      w' := Œª j, by { apply quiver.hom.unop_inj, dsimp, simp, }, } },
  inverse :=
  { obj := Œª c, cone.unop (unop c),
    map := Œª X Y f,
    { hom := f.unop.hom.unop,
      w' := Œª j, by { apply quiver.hom.op_inj, dsimp, simp, }, } },
  unit_iso := nat_iso.of_components (Œª c, cocones.ext (iso.refl _) (by tidy)) (by tidy),
  counit_iso := nat_iso.of_components (Œª c,
    by { induction c using opposite.rec,
         dsimp, apply iso.op, exact cones.ext (iso.refl _) (by tidy), })
    begin
      intros,
      have hX : X = op (unop X) := rfl,
      revert hX,
      generalize : unop X = X',
      rintro rfl,
      have hY : Y = op (unop Y) := rfl,
      revert hY,
      generalize : unop Y = Y',
      rintro rfl,
      apply quiver.hom.unop_inj,
      apply cone_morphism.ext,
      dsimp, simp,
    end,
  functor_unit_iso_comp' := Œª c, begin apply quiver.hom.unop_inj, ext, dsimp, simp, end }

end

section
variables {F : J ‚•§ C·µí·µñ}

/-- Change a cocone on `F.left_op : J·µí·µñ ‚•§ C` to a cocone on `F : J ‚•§ C·µí·µñ`. -/
-- Here and below we only automatically generate the `@[simp]` lemma for the `X` field,
-- as we can write a simpler `rfl` lemma for the components of the natural transformation by hand.
@[simps {rhs_md := semireducible, simp_rhs := tt}]
def cone_of_cocone_left_op (c : cocone F.left_op) : cone F :=
{ X := op c.X,
  œÄ := nat_trans.remove_left_op (c.Œπ ‚â´ (const.op_obj_unop (op c.X)).hom) }

/-- Change a cone on `F : J ‚•§ C·µí·µñ` to a cocone on `F.left_op : J·µí·µñ ‚•§ C`. -/
@[simps {rhs_md := semireducible, simp_rhs := tt}]
def cocone_left_op_of_cone (c : cone F) : cocone (F.left_op) :=
{ X := unop c.X,
  Œπ := nat_trans.left_op c.œÄ }

/-- Change a cone on `F.left_op : J·µí·µñ ‚•§ C` to a cocone on `F : J ‚•§ C·µí·µñ`. -/
/- When trying use `@[simps]` to generate the `Œπ_app` field of this definition, `@[simps]` tries to
  reduce the RHS using `expr.dsimp` and `expr.simp`, but for some reason the expression is not
  being simplified properly. -/
@[simps X]
def cocone_of_cone_left_op (c : cone F.left_op) : cocone F :=
{ X := op c.X,
  Œπ := nat_trans.remove_left_op ((const.op_obj_unop (op c.X)).hom ‚â´ c.œÄ) }

@[simp] lemma cocone_of_cone_left_op_Œπ_app (c : cone F.left_op) (j) :
  (cocone_of_cone_left_op c).Œπ.app j = (c.œÄ.app (op j)).op :=
by { dsimp [cocone_of_cone_left_op], simp }

/-- Change a cocone on `F : J ‚•§ C·µí·µñ` to a cone on `F.left_op : J·µí·µñ ‚•§ C`. -/
@[simps {rhs_md := semireducible, simp_rhs := tt}]
def cone_left_op_of_cocone (c : cocone F) : cone (F.left_op) :=
{ X := unop c.X,
  œÄ := nat_trans.left_op c.Œπ }

end

end category_theory.limits

namespace category_theory.functor

open category_theory.limits

variables {F : J ‚•§ C}

section
variables (G : C ‚•§ D)

/-- The opposite cocone of the image of a cone is the image of the opposite cocone. -/
@[simps {rhs_md := semireducible}]
def map_cone_op (t : cone F) : (G.map_cone t).op ‚âÖ (G.op.map_cocone t.op) :=
cocones.ext (iso.refl _) (by tidy)

/-- The opposite cone of the image of a cocone is the image of the opposite cone. -/
@[simps {rhs_md := semireducible}]
def map_cocone_op {t : cocone F} : (G.map_cocone t).op ‚âÖ (G.op.map_cone t.op) :=
cones.ext (iso.refl _) (by tidy)

end

end category_theory.functor
