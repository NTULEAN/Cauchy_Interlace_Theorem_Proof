/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw
-/
import category_theory.preadditive.additive_functor
import category_theory.triangulated.basic

/-!
# Rotate

This file adds the ability to rotate triangles and triangle morphisms.
It also shows that rotation gives an equivalence on the category of triangles.

-/

noncomputable theory

open category_theory
open category_theory.preadditive
open category_theory.limits

universes v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace category_theory.triangulated
open category_theory.category

/--
We work in an preadditive category `C` equipped with an additive shift.
-/
variables {C : Type u} [category.{v} C] [preadditive C]
variables [has_shift C ‚Ñ§]

variables (X : C)

/--
If you rotate a triangle, you get another triangle.
Given a triangle of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
applying `rotate` gives a triangle of the form:
```
      g       h        -f‚ü¶1‚üß'
  Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ>  X‚ü¶1‚üß ‚îÄ‚îÄ‚îÄ> Y‚ü¶1‚üß
```
-/
@[simps]
def triangle.rotate (T : triangle C) : triangle C := triangle.mk _ T.mor‚ÇÇ T.mor‚ÇÉ (-T.mor‚ÇÅ‚ü¶1‚üß')

local attribute [semireducible] shift_shift_neg shift_neg_shift

/--
Given a triangle of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
applying `inv_rotate` gives a triangle that can be thought of as:
```
        -h‚ü¶-1‚üß'     f       g
  Z‚ü¶-1‚üß  ‚îÄ‚îÄ‚îÄ>  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z
```
(note that this diagram doesn't technically fit the definition of triangle, as `Z‚ü¶-1‚üß‚ü¶1‚üß` is
not necessarily equal to `Z`, but it is isomorphic, by the `counit_iso` of `shift C`)
-/
@[simps]
def triangle.inv_rotate (T : triangle C) : triangle C :=
triangle.mk _ (-T.mor‚ÇÉ‚ü¶(-1:‚Ñ§)‚üß' ‚â´ (shift_shift_neg _ _).hom) T.mor‚ÇÅ
  (T.mor‚ÇÇ ‚â´ (shift_neg_shift _ _).inv)

local attribute [reducible] shift_shift_neg shift_neg_shift discrete.add_monoidal

namespace triangle_morphism
variables {T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ: triangle C}
open triangle
/--
You can also rotate a triangle morphism to get a morphism between the two rotated triangles.
Given a triangle morphism of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
  ‚îÇ       ‚îÇ       ‚îÇ        ‚îÇ
  ‚îÇa      ‚îÇb      ‚îÇc       ‚îÇa‚ü¶1‚üß
  V       V       V        V
  X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
      f'      g'      h'
```
applying `rotate` gives a triangle morphism of the form:

```
      g        h       -f‚ü¶1‚üß
  Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ>  X‚ü¶1‚üß ‚îÄ‚îÄ‚îÄ> Y‚ü¶1‚üß
  ‚îÇ       ‚îÇ         ‚îÇ         ‚îÇ
  ‚îÇb      ‚îÇc        ‚îÇa‚ü¶1‚üß     ‚îÇb‚ü¶1‚üß'
  V       V         V         V
  Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß ‚îÄ‚îÄ‚îÄ> Y'‚ü¶1‚üß
      g'      h'       -f'‚ü¶1‚üß
```
-/
@[simps]
def rotate (f : triangle_morphism T‚ÇÅ T‚ÇÇ) :
  triangle_morphism (T‚ÇÅ.rotate) (T‚ÇÇ.rotate):=
{ hom‚ÇÅ := f.hom‚ÇÇ,
  hom‚ÇÇ := f.hom‚ÇÉ,
  hom‚ÇÉ := f.hom‚ÇÅ‚ü¶1‚üß',
  comm‚ÇÉ' := begin
    dsimp,
    simp only [rotate_mor‚ÇÉ, comp_neg, neg_comp, ‚Üê functor.map_comp, f.comm‚ÇÅ]
  end }

/--
Given a triangle morphism of the form:
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
  ‚îÇ       ‚îÇ       ‚îÇ        ‚îÇ
  ‚îÇa      ‚îÇb      ‚îÇc       ‚îÇa‚ü¶1‚üß
  V       V       V        V
  X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
      f'      g'      h'
```
applying `inv_rotate` gives a triangle morphism that can be thought of as:
```
        -h‚ü¶-1‚üß      f         g
  Z‚ü¶-1‚üß  ‚îÄ‚îÄ‚îÄ>  X   ‚îÄ‚îÄ‚îÄ>  Y   ‚îÄ‚îÄ‚îÄ>  Z
    ‚îÇ          ‚îÇ         ‚îÇ         ‚îÇ
    ‚îÇc‚ü¶-1‚üß'    ‚îÇa        ‚îÇb        ‚îÇc
    V          V         V         V
  Z'‚ü¶-1‚üß ‚îÄ‚îÄ‚îÄ>  X'  ‚îÄ‚îÄ‚îÄ>  Y'  ‚îÄ‚îÄ‚îÄ>  Z'
       -h'‚ü¶-1‚üß     f'        g'
```
(note that this diagram doesn't technically fit the definition of triangle morphism,
as `Z‚ü¶-1‚üß‚ü¶1‚üß` is not necessarily equal to `Z`, and `Z'‚ü¶-1‚üß‚ü¶1‚üß` is not necessarily equal to `Z'`,
but they are isomorphic, by the `counit_iso` of `shift C`)
-/
@[simps]
def inv_rotate (f : triangle_morphism T‚ÇÅ T‚ÇÇ) :
  triangle_morphism (T‚ÇÅ.inv_rotate) (T‚ÇÇ.inv_rotate) :=
{ hom‚ÇÅ := f.hom‚ÇÉ‚ü¶-1‚üß',
  hom‚ÇÇ := f.hom‚ÇÅ,
  hom‚ÇÉ := f.hom‚ÇÇ,
  comm‚ÇÅ' := begin
    dsimp [inv_rotate_mor‚ÇÅ],
    simp only [discrete.functor_map_id, id_comp, preadditive.comp_neg, assoc,
      neg_inj, nat_trans.id_app, preadditive.neg_comp],
    rw [‚Üê functor.map_comp_assoc, ‚Üê f.comm‚ÇÉ, functor.map_comp_assoc, Œº_naturality_assoc,
      nat_trans.naturality, functor.id_map],
  end,
  comm‚ÇÉ' := begin
    dsimp,
    simp only [discrete.functor_map_id, id_comp, opaque_eq_to_iso_inv, Œº_inv_naturality,
      category.assoc, nat_trans.id_app, unit_of_tensor_iso_unit_inv_app],
    erw Œµ_naturality_assoc,
    rw comm‚ÇÇ_assoc
  end }

end triangle_morphism

/--
Rotating triangles gives an endofunctor on the category of triangles in `C`.
-/
@[simps]
def rotate : (triangle C) ‚•§ (triangle C) :=
{ obj := triangle.rotate,
  map := Œª _ _ f, f.rotate }

/--
The inverse rotation of triangles gives an endofunctor on the category of triangles in `C`.
-/
@[simps]
def inv_rotate : (triangle C) ‚•§ (triangle C) :=
{ obj := triangle.inv_rotate,
  map := Œª _ _ f, f.inv_rotate }

variables [‚àÄ n : ‚Ñ§, functor.additive (shift_functor C n)]

/-- There is a natural map from a triangle to the `inv_rotate` of its `rotate`. -/
@[simps]
def to_inv_rotate_rotate (T : triangle C) : T ‚ü∂ inv_rotate.obj (rotate.obj T) :=
{ hom‚ÇÅ := (shift_shift_neg _ _).inv,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := ùüô T.obj‚ÇÉ,
    comm‚ÇÉ' := begin
      dsimp,
      simp only [Œµ_app_obj, eq_to_iso.hom, discrete.functor_map_id, id_comp, eq_to_iso.inv,
        opaque_eq_to_iso_inv, category.assoc, obj_Œº_inv_app, functor.map_comp, nat_trans.id_app,
        obj_Œµ_app, unit_of_tensor_iso_unit_inv_app],
      erw Œº_inv_hom_app_assoc,
      refl
    end }

/--
There is a natural transformation between the identity functor on triangles in `C`,
and the composition of a rotation with an inverse rotation.
-/
@[simps]
def rot_comp_inv_rot_hom : ùü≠ (triangle C) ‚ü∂ rotate ‚ãô inv_rotate :=
{ app := to_inv_rotate_rotate,
  naturality' := begin
    introv, ext,
    { dsimp,
      simp only [nat_iso.cancel_nat_iso_inv_right_assoc, discrete.functor_map_id, id_comp,
        opaque_eq_to_iso_inv, Œº_inv_naturality, assoc, nat_trans.id_app,
        unit_of_tensor_iso_unit_inv_app],
      erw Œµ_naturality },
    { dsimp, rw [comp_id, id_comp] },
    { dsimp, rw [comp_id, id_comp] },
  end }

/-- There is a natural map from the `inv_rotate` of the `rotate` of a triangle to itself. -/
@[simps]
def from_inv_rotate_rotate (T : triangle C) : inv_rotate.obj (rotate.obj T) ‚ü∂ T :=
{ hom‚ÇÅ := (shift_equiv C 1).unit_inv.app T.obj‚ÇÅ,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := ùüô T.obj‚ÇÉ,
    comm‚ÇÉ' := begin
      dsimp,
      rw [unit_of_tensor_iso_unit_inv_app, Œµ_app_obj],
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, assoc, functor.map_comp,
        obj_Œº_app, obj_Œµ_inv_app, comp_id, Œº_inv_hom_app_assoc],
      erw [Œº_inv_hom_app, Œº_inv_hom_app_assoc, category.comp_id]
    end }

/--
There is a natural transformation between the composition of a rotation with an inverse rotation
on triangles in `C`, and the identity functor.
-/
@[simps]
def rot_comp_inv_rot_inv : rotate ‚ãô inv_rotate ‚ü∂ ùü≠ (triangle C) :=
{ app := from_inv_rotate_rotate }

/--
The natural transformations between the identity functor on triangles in `C` and the composition
of a rotation with an inverse rotation are natural isomorphisms (they are isomorphisms in the
category of functors).
-/
@[simps]
def rot_comp_inv_rot : ùü≠ (triangle C) ‚âÖ rotate ‚ãô inv_rotate :=
{ hom := rot_comp_inv_rot_hom,
  inv := rot_comp_inv_rot_inv }

/-- There is a natural map from the `rotate` of the `inv_rotate` of a triangle to itself. -/
@[simps]
def from_rotate_inv_rotate (T : triangle C) : rotate.obj (inv_rotate.obj T) ‚ü∂ T :=
{ hom‚ÇÅ := ùüô T.obj‚ÇÅ,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := (shift_equiv C 1).counit.app T.obj‚ÇÉ,
    comm‚ÇÇ' := begin
      dsimp,
      rw unit_of_tensor_iso_unit_inv_app,
      simp only [discrete.functor_map_id, nat_trans.id_app,
        id_comp, add_neg_equiv_counit_iso_hom, eq_to_hom_refl, nat_trans.comp_app, assoc,
        Œº_inv_hom_app_assoc, Œµ_hom_inv_app],
      exact category.comp_id _,
    end,
    comm‚ÇÉ' := begin
      dsimp,
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, functor.map_neg,
        functor.map_comp, obj_Œº_app, obj_Œµ_inv_app, comp_id, assoc, Œº_naturality_assoc, neg_neg,
        category_theory.functor.map_id, add_neg_equiv_counit_iso_hom, eq_to_hom_refl,
        nat_trans.comp_app],
      erw [Œº_inv_hom_app, category.comp_id, obj_zero_map_Œº_app],
      rw [discrete.functor_map_id, nat_trans.id_app, comp_id],
    end }

/--
There is a natural transformation between the composition of an inverse rotation with a rotation
on triangles in `C`, and the identity functor.
-/
@[simps]
def inv_rot_comp_rot_hom : inv_rotate ‚ãô rotate ‚ü∂ ùü≠ (triangle C) :=
{ app := from_rotate_inv_rotate }

/-- There is a natural map from a triangle to the `rotate` of its `inv_rotate`. -/
@[simps]
def to_rotate_inv_rotate (T : triangle C) : T ‚ü∂ rotate.obj (inv_rotate.obj T) :=
{ hom‚ÇÅ := ùüô T.obj‚ÇÅ,
    hom‚ÇÇ := ùüô T.obj‚ÇÇ,
    hom‚ÇÉ := (shift_equiv C 1).counit_inv.app T.obj‚ÇÉ,
    comm‚ÇÉ' := begin
      dsimp,
      rw category_theory.functor.map_id,
      simp only [comp_id, add_neg_equiv_counit_iso_inv, eq_to_hom_refl, id_comp, nat_trans.comp_app,
        discrete.functor_map_id, nat_trans.id_app, functor.map_neg, functor.map_comp, obj_Œº_app,
        obj_Œµ_inv_app, assoc, Œº_naturality_assoc, neg_neg, Œº_inv_hom_app_assoc],
      erw [Œº_inv_hom_app, category.comp_id, obj_zero_map_Œº_app],
      simp only [discrete.functor_map_id, nat_trans.id_app, comp_id, Œµ_hom_inv_app_assoc],
    end }

/--
There is a natural transformation between the identity functor on triangles in `C`,
and the composition of an inverse rotation with a rotation.
-/
@[simps]
def inv_rot_comp_rot_inv : ùü≠ (triangle C) ‚ü∂ inv_rotate ‚ãô rotate :=
{ app := to_rotate_inv_rotate,
  naturality' := begin
    introv, ext,
    { dsimp, rw [comp_id, id_comp] },
    { dsimp, rw [comp_id, id_comp] },
    { dsimp,
      rw [add_neg_equiv_counit_iso_inv, eq_to_hom_refl, id_comp],
      simp only [nat_trans.comp_app, assoc],
      erw [Œº_inv_naturality, Œµ_naturality_assoc] },
  end }

/--
The natural transformations between the composition of a rotation with an inverse rotation
on triangles in `C`, and the identity functor on triangles are natural isomorphisms
(they are isomorphisms in the category of functors).
-/
@[simps]
def inv_rot_comp_rot : inv_rotate ‚ãô rotate ‚âÖ ùü≠ (triangle C) :=
{ hom := inv_rot_comp_rot_hom,
  inv := inv_rot_comp_rot_inv }

/--
Rotating triangles gives an auto-equivalence on the category of triangles in `C`.
-/
@[simps]
def triangle_rotation : equivalence (triangle C) (triangle C) :=
{ functor := rotate,
  inverse := inv_rotate,
  unit_iso := rot_comp_inv_rot,
  counit_iso := inv_rot_comp_rot,
  functor_unit_iso_comp' := begin
    introv, ext,
    { dsimp, rw comp_id },
    { dsimp, rw comp_id },
    { dsimp,
      rw unit_of_tensor_iso_unit_inv_app,
      simp only [discrete.functor_map_id, nat_trans.id_app, id_comp, functor.map_comp, obj_Œµ_app,
        obj_Œº_inv_app, assoc, add_neg_equiv_counit_iso_hom, eq_to_hom_refl, nat_trans.comp_app,
        Œµ_inv_app_obj, comp_id, Œº_inv_hom_app_assoc],
      erw [Œº_inv_hom_app_assoc, Œº_inv_hom_app],
      refl }
  end }

end category_theory.triangulated
