/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/

import category_theory.category.preorder
import category_theory.limits.is_limit

/-!
# The category of "pairwise intersections".

Given `Œπ : Type v`, we build the diagram category `pairwise Œπ`
with objects `single i` and `pair i j`, for `i j : Œπ`,
whose only non-identity morphisms are
`left : pair i j ‚ü∂ single i` and `right : pair i j ‚ü∂ single j`.

We use this later in describing (one formulation of) the sheaf condition.

Given any function `U : Œπ ‚Üí Œ±`, where `Œ±` is some complete lattice (e.g. `(opens X)·µí·µñ`),
we produce a functor `pairwise Œπ ‚•§ Œ±` in the obvious way,
and show that `supr U` provides a colimit cocone over this functor.
-/

noncomputable theory

universes v u

open category_theory
open category_theory.limits

namespace category_theory

/--
An inductive type representing either a single term of a type `Œπ`, or a pair of terms.
We use this as the objects of a category to describe the sheaf condition.
-/
inductive pairwise (Œπ : Type v)
| single : Œπ ‚Üí pairwise
| pair : Œπ ‚Üí Œπ ‚Üí pairwise

variables {Œπ : Type v}

namespace pairwise

instance pairwise_inhabited [inhabited Œπ] : inhabited (pairwise Œπ) := ‚ü®single default‚ü©

/--
Morphisms in the category `pairwise Œπ`. The only non-identity morphisms are
`left i j : single i ‚ü∂ pair i j` and `right i j : single j ‚ü∂ pair i j`.
-/
inductive hom : pairwise Œπ ‚Üí pairwise Œπ ‚Üí Type v
| id_single : Œ† i, hom (single i) (single i)
| id_pair : Œ† i j, hom (pair i j) (pair i j)
| left : Œ† i j, hom (pair i j) (single i)
| right : Œ† i j, hom (pair i j) (single j)

open hom

instance hom_inhabited [inhabited Œπ] : inhabited (hom (single (default : Œπ)) (single default)) :=
‚ü®id_single default‚ü©

/--
The identity morphism in `pairwise Œπ`.
-/
def id : Œ† (o : pairwise Œπ), hom o o
| (single i) := id_single i
| (pair i j) := id_pair i j

/-- Composition of morphisms in `pairwise Œπ`. -/
def comp : Œ† {o‚ÇÅ o‚ÇÇ o‚ÇÉ : pairwise Œπ} (f : hom o‚ÇÅ o‚ÇÇ) (g : hom o‚ÇÇ o‚ÇÉ), hom o‚ÇÅ o‚ÇÉ
| _ _ _ (id_single i) g := g
| _ _ _ (id_pair i j) g := g
| _ _ _ (left i j) (id_single _) := left i j
| _ _ _ (right i j) (id_single _) := right i j

section
local attribute [tidy] tactic.case_bash

instance : category (pairwise Œπ) :=
{ hom := hom,
  id := id,
  comp := Œª X Y Z f g, comp f g, }

end

variables {Œ± : Type v} (U : Œπ ‚Üí Œ±)

section
variables [semilattice_inf Œ±]

/-- Auxiliary definition for `diagram`. -/
@[simp]
def diagram_obj : pairwise Œπ ‚Üí Œ±
| (single i) := U i
| (pair i j) := U i ‚äì U j

/-- Auxiliary definition for `diagram`. -/
@[simp]
def diagram_map : Œ† {o‚ÇÅ o‚ÇÇ : pairwise Œπ} (f : o‚ÇÅ ‚ü∂ o‚ÇÇ), diagram_obj U o‚ÇÅ ‚ü∂ diagram_obj U o‚ÇÇ
| _ _ (id_single i) := ùüô _
| _ _ (id_pair i j) := ùüô _
| _ _ (left i j) := hom_of_le inf_le_left
| _ _ (right i j) := hom_of_le inf_le_right

/--
Given a function `U : Œπ ‚Üí Œ±` for `[semilattice_inf Œ±]`, we obtain a functor `pairwise Œπ ‚•§ Œ±`,
sending `single i` to `U i` and `pair i j` to `U i ‚äì U j`,
and the morphisms to the obvious inequalities.
-/
@[simps]
def diagram : pairwise Œπ ‚•§ Œ± :=
{ obj := diagram_obj U,
  map := Œª X Y f, diagram_map U f, }

end

section
-- `complete_lattice` is not really needed, as we only ever use `inf`,
-- but the appropriate structure has not been defined.
variables [complete_lattice Œ±]

/-- Auxiliary definition for `cocone`. -/
def cocone_Œπ_app : Œ† (o : pairwise Œπ), diagram_obj U o ‚ü∂ supr U
| (single i) := hom_of_le (le_supr U i)
| (pair i j) := hom_of_le inf_le_left ‚â´ hom_of_le (le_supr U i)

/--
Given a function `U : Œπ ‚Üí Œ±` for `[complete_lattice Œ±]`,
`supr U` provides a cocone over `diagram U`.
-/
@[simps]
def cocone : cocone (diagram U) :=
{ X := supr U,
  Œπ := { app := cocone_Œπ_app U, } }

/--
Given a function `U : Œπ ‚Üí Œ±` for `[complete_lattice Œ±]`,
`infi U` provides a limit cone over `diagram U`.
-/
def cocone_is_colimit : is_colimit (cocone U) :=
{ desc := Œª s, hom_of_le
  begin
    apply complete_lattice.Sup_le,
    rintros _ ‚ü®j, rfl‚ü©,
    exact (s.Œπ.app (single j)).le
  end }

end

end pairwise

end category_theory
