/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison, Johannes H√∂lzl, Reid Barton
-/

import category_theory.category.Cat
import order.category.Preorder

/-!

# Preorders as categories

We install a category instance on any preorder. This is not to be confused with the category _of_
preorders, defined in `order/category/Preorder`.

We show that monotone functions between preorders correspond to functors of the associated
categories. Furthermore, galois connections correspond to adjoint functors.

## Main definitions

* `hom_of_le` and `le_of_hom` provide translations between inequalities in the preorder, and
  morphisms in the associated category.
* `monotone.functor` is the functor associated to a monotone function.
* `galois_connection.adjunction` is the adjunction associated to a galois connection.
* `Preorder_to_Cat` is the functor embedding the category of preorders into `Cat`.

-/

universes u v

namespace preorder

open category_theory

/--
The category structure coming from a preorder. There is a morphism `X ‚ü∂ Y` if and only if `X ‚â§ Y`.

Because we don't allow morphisms to live in `Prop`,
we have to define `X ‚ü∂ Y` as `ulift (plift (X ‚â§ Y))`.
See `category_theory.hom_of_le` and `category_theory.le_of_hom`.

See https://stacks.math.columbia.edu/tag/00D3.
-/
@[priority 100] -- see Note [lower instance priority]
instance small_category (Œ± : Type u) [preorder Œ±] : small_category Œ± :=
{ hom  := Œª U V, ulift (plift (U ‚â§ V)),
  id   := Œª X, ‚ü® ‚ü® le_refl X ‚ü© ‚ü©,
  comp := Œª X Y Z f g, ‚ü® ‚ü® le_trans _ _ _ f.down.down g.down.down ‚ü© ‚ü© }

end preorder

namespace category_theory

open opposite

variables {X : Type u} [preorder X]

/--
Express an inequality as a morphism in the corresponding preorder category.
-/
def hom_of_le {x y : X} (h : x ‚â§ y) : x ‚ü∂ y := ulift.up (plift.up h)

alias hom_of_le ‚Üê has_le.le.hom

@[simp] lemma hom_of_le_refl {x : X} : (le_refl x).hom = ùüô x := rfl
@[simp] lemma hom_of_le_comp {x y z : X} (h : x ‚â§ y) (k : y ‚â§ z) :
  h.hom ‚â´ k.hom = (h.trans k).hom := rfl

/--
Extract the underlying inequality from a morphism in a preorder category.
-/
lemma le_of_hom {x y : X} (h : x ‚ü∂ y) : x ‚â§ y := h.down.down

alias le_of_hom ‚Üê quiver.hom.le

@[simp] lemma le_of_hom_hom_of_le {x y : X} (h : x ‚â§ y) : h.hom.le = h := rfl
@[simp] lemma hom_of_le_le_of_hom {x y : X} (h : x ‚ü∂ y) : h.le.hom = h :=
by { cases h, cases h, refl, }

/-- Construct a morphism in the opposite of a preorder category from an inequality. -/
def op_hom_of_le {x y : X·µí·µñ} (h : unop x ‚â§ unop y) : y ‚ü∂ x := h.hom.op

lemma le_of_op_hom {x y : X·µí·µñ} (h : x ‚ü∂ y) : unop y ‚â§ unop x := h.unop.le

instance unique_to_top [order_top X] {x : X} : unique (x ‚ü∂ ‚ä§) := by tidy
instance unique_from_bot [order_bot X] {x : X} : unique (‚ä• ‚ü∂ x) := by tidy

end category_theory

section

variables {X : Type u} {Y : Type v} [preorder X] [preorder Y]

/--
A monotone function between preorders induces a functor between the associated categories.
-/
def monotone.functor {f : X ‚Üí Y} (h : monotone f) : X ‚•§ Y :=
{ obj := f,
  map := Œª x‚ÇÅ x‚ÇÇ g, (h g.le).hom }

@[simp] lemma monotone.functor_obj {f : X ‚Üí Y} (h : monotone f) : h.functor.obj = f := rfl

/--
A galois connection between preorders induces an adjunction between the associated categories.
-/
def galois_connection.adjunction {l : X ‚Üí Y} {u : Y ‚Üí X} (gc : galois_connection l u) :
  gc.monotone_l.functor ‚ä£ gc.monotone_u.functor :=
category_theory.adjunction.mk_of_hom_equiv
{ hom_equiv := Œª X Y, ‚ü®Œª f, (gc.le_u f.le).hom, Œª f, (gc.l_le f.le).hom, by tidy, by tidy‚ü© }

end

namespace category_theory

section preorder

variables {X : Type u} {Y : Type v} [preorder X] [preorder Y]

/--
A functor between preorder categories is monotone.
-/
@[mono] lemma functor.monotone (f : X ‚•§ Y) : monotone f.obj :=
Œª x y hxy, (f.map hxy.hom).le

/--
An adjunction between preorder categories induces a galois connection.
-/
lemma adjunction.gc {L : X ‚•§ Y} {R : Y ‚•§ X} (adj : L ‚ä£ R) :
  galois_connection L.obj R.obj :=
Œª x y, ‚ü®Œª h, ((adj.hom_equiv x y).to_fun h.hom).le, Œª h, ((adj.hom_equiv x y).inv_fun h.hom).le‚ü©

/--
The embedding of `Preorder` into `Cat`.
-/
@[simps]
def Preorder_to_Cat : Preorder.{u} ‚•§ Cat :=
{ obj := Œª X, Cat.of X.1,
  map := Œª X Y f, f.monotone.functor,
  map_id' := Œª X, begin apply category_theory.functor.ext, tidy end,
  map_comp' := Œª X Y Z f g, begin apply category_theory.functor.ext, tidy end }

instance : faithful Preorder_to_Cat.{u} :=
{ map_injective' := Œª X Y f g h, begin ext x, exact functor.congr_obj h x end }

instance : full Preorder_to_Cat.{u} :=
{ preimage := Œª X Y f, ‚ü®f.obj, f.monotone‚ü©,
  witness' := Œª X Y f, begin apply category_theory.functor.ext, tidy end }

end preorder

section partial_order

variables {X : Type u} {Y : Type v} [partial_order X] [partial_order Y]

lemma iso.to_eq {x y : X} (f : x ‚âÖ y) : x = y := le_antisymm f.hom.le f.inv.le

/--
A categorical equivalence between partial orders is just an order isomorphism.
-/
def equivalence.to_order_iso (e : X ‚âå Y) : X ‚âÉo Y :=
{ to_fun := e.functor.obj,
  inv_fun := e.inverse.obj,
  left_inv := Œª a, (e.unit_iso.app a).to_eq.symm,
  right_inv := Œª b, (e.counit_iso.app b).to_eq,
  map_rel_iff' := Œª a a',
    ‚ü®Œª h, ((equivalence.unit e).app a ‚â´ e.inverse.map h.hom ‚â´ (equivalence.unit_inv e).app a').le,
     Œª (h : a ‚â§ a'), (e.functor.map h.hom).le‚ü©, }

-- `@[simps]` on `equivalence.to_order_iso` produces lemmas that fail the `simp_nf` linter,
-- so we provide them by hand:
@[simp]
lemma equivalence.to_order_iso_apply (e : X ‚âå Y) (x : X) :
  e.to_order_iso x = e.functor.obj x := rfl

@[simp]
lemma equivalence.to_order_iso_symm_apply (e : X ‚âå Y) (y : Y) :
  e.to_order_iso.symm y = e.inverse.obj y := rfl

end partial_order

end category_theory
