/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.monoidal.braided
import category_theory.functor_category
import category_theory.const

/-!
# Monoidal structure on `C ‚•§ D` when `D` is monoidal.

When `C` is any category, and `D` is a monoidal category,
there is a natural "pointwise" monoidal structure on `C ‚•§ D`.

The initial intended application is tensor product of presheaves.
-/

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

open category_theory
open category_theory.monoidal_category

namespace category_theory.monoidal

variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C]
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] [monoidal_category.{v‚ÇÇ} D]

namespace functor_category

variables (F G F' G' : C ‚•§ D)

/--
(An auxiliary definition for `functor_category_monoidal`.)
Tensor product of functors `C ‚•§ D`, when `D` is monoidal.
 -/
@[simps]
def tensor_obj : C ‚•§ D :=
{ obj := Œª X, F.obj X ‚äó G.obj X,
  map := Œª X Y f, F.map f ‚äó G.map f,
  map_id' := Œª X, by rw [F.map_id, G.map_id, tensor_id],
  map_comp' := Œª X Y Z f g, by rw [F.map_comp, G.map_comp, tensor_comp], }

variables {F G F' G'}
variables (Œ± : F ‚ü∂ G) (Œ≤ : F' ‚ü∂ G')

/--
(An auxiliary definition for `functor_category_monoidal`.)
Tensor product of natural transformations into `D`, when `D` is monoidal.
-/
@[simps]
def tensor_hom : tensor_obj F F' ‚ü∂ tensor_obj G G' :=
{ app := Œª X, Œ±.app X ‚äó Œ≤.app X,
  naturality' :=
  Œª X Y f, by { dsimp, rw [‚Üêtensor_comp, Œ±.naturality, Œ≤.naturality, tensor_comp], } }

end functor_category

open category_theory.monoidal.functor_category

/--
When `C` is any category, and `D` is a monoidal category,
the functor category `C ‚•§ D` has a natural pointwise monoidal structure,
where `(F ‚äó G).obj X = F.obj X ‚äó G.obj X`.
-/
instance functor_category_monoidal : monoidal_category (C ‚•§ D) :=
{ tensor_obj := Œª F G, tensor_obj F G,
  tensor_hom := Œª F G F' G' Œ± Œ≤, tensor_hom Œ± Œ≤,
  tensor_id' := Œª F G, by { ext, dsimp, rw [tensor_id], },
  tensor_comp' := Œª F G H F' G' H' Œ± Œ≤ Œ≥ Œ¥, by { ext, dsimp, rw [tensor_comp], },
  tensor_unit := (category_theory.functor.const C).obj (ùüô_ D),
  left_unitor :=  Œª F,
    nat_iso.of_components (Œª X, Œª_ (F.obj X)) (Œª X Y f, by { dsimp, rw left_unitor_naturality, }),
  right_unitor := Œª F,
    nat_iso.of_components (Œª X, œÅ_ (F.obj X)) (Œª X Y f, by { dsimp, rw right_unitor_naturality, }),
  associator := Œª F G H,
    nat_iso.of_components
      (Œª X, Œ±_ (F.obj X) (G.obj X) (H.obj X)) (Œª X Y f, by { dsimp, rw associator_naturality, }),
  left_unitor_naturality' := Œª F G Œ±, by { ext X, dsimp, rw left_unitor_naturality, },
  right_unitor_naturality' := Œª F G Œ±, by { ext X, dsimp, rw right_unitor_naturality, },
  associator_naturality' := Œª F G H F' G' H' Œ± Œ≤ Œ≥, by { ext X, dsimp, rw associator_naturality, },
  triangle' := Œª F G, begin ext X, dsimp, rw triangle, end,
  pentagon' := Œª F G H K, begin ext X, dsimp, rw pentagon, end, }

@[simp]
lemma tensor_unit_obj {X} : (ùüô_ (C ‚•§ D)).obj X = ùüô_ D := rfl

@[simp]
lemma tensor_unit_map {X Y} {f : X ‚ü∂ Y} : (ùüô_ (C ‚•§ D)).map f = ùüô (ùüô_ D) := rfl

@[simp]
lemma tensor_obj_obj {F G : C ‚•§ D} {X} : (F ‚äó G).obj X = F.obj X ‚äó G.obj X := rfl

@[simp]
lemma tensor_obj_map {F G : C ‚•§ D} {X Y} {f : X ‚ü∂ Y} : (F ‚äó G).map f = F.map f ‚äó G.map f := rfl

@[simp]
lemma tensor_hom_app {F G F' G' : C ‚•§ D} {Œ± : F ‚ü∂ G} {Œ≤ : F' ‚ü∂ G'} {X} :
  (Œ± ‚äó Œ≤).app X = Œ±.app X ‚äó Œ≤.app X := rfl

@[simp]
lemma left_unitor_hom_app {F : C ‚•§ D} {X} :
  ((Œª_ F).hom : (ùüô_ _) ‚äó F ‚ü∂ F).app X = (Œª_ (F.obj X)).hom := rfl

@[simp]
lemma left_unitor_inv_app {F : C ‚•§ D} {X} :
  ((Œª_ F).inv : F ‚ü∂ (ùüô_ _) ‚äó F).app X = (Œª_ (F.obj X)).inv := rfl

@[simp]
lemma right_unitor_hom_app {F : C ‚•§ D} {X} :
  ((œÅ_ F).hom : F ‚äó (ùüô_ _) ‚ü∂ F).app X = (œÅ_ (F.obj X)).hom := rfl

@[simp]
lemma right_unitor_inv_app {F : C ‚•§ D} {X} :
  ((œÅ_ F).inv : F ‚ü∂ F ‚äó (ùüô_ _)).app X = (œÅ_ (F.obj X)).inv := rfl

@[simp]
lemma associator_hom_app {F G H : C ‚•§ D} {X} :
  ((Œ±_ F G H).hom : (F ‚äó G) ‚äó H ‚ü∂ F ‚äó (G ‚äó H)).app X = (Œ±_ (F.obj X) (G.obj X) (H.obj X)).hom :=
rfl

@[simp]
lemma associator_inv_app {F G H : C ‚•§ D} {X} :
  ((Œ±_ F G H).inv : F ‚äó (G ‚äó H) ‚ü∂ (F ‚äó G) ‚äó H).app X = (Œ±_ (F.obj X) (G.obj X) (H.obj X)).inv :=
rfl

section braided_category

open category_theory.braided_category
variables [braided_category.{v‚ÇÇ} D]

/--
When `C` is any category, and `D` is a braided monoidal category,
the natural pointwise monoidal structure on the functor category `C ‚•§ D`
is also braided.
-/
instance functor_category_braided : braided_category (C ‚•§ D) :=
{ braiding := Œª F G, nat_iso.of_components (Œª X, Œ≤_ _ _) (by tidy),
  hexagon_forward' := Œª F G H, by { ext X, apply hexagon_forward, },
  hexagon_reverse' := Œª F G H, by { ext X, apply hexagon_reverse, }, }

example : braided_category (C ‚•§ D) := category_theory.monoidal.functor_category_braided

end braided_category

section symmetric_category

open category_theory.symmetric_category
variables [symmetric_category.{v‚ÇÇ} D]

/--
When `C` is any category, and `D` is a symmetric monoidal category,
the natural pointwise monoidal structure on the functor category `C ‚•§ D`
is also symmetric.
-/
instance functor_category_symmetric : symmetric_category (C ‚•§ D) :=
{ symmetry' := Œª F G, by { ext X, apply symmetry, },}

end symmetric_category

end category_theory.monoidal
