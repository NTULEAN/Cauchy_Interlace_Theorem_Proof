/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.monoidal.category

/-!
# Monoidal opposites

We write `C·µê·µí·µñ` for the monoidal opposite of a monoidal category `C`.
-/


universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables {C : Type u‚ÇÅ}

namespace category_theory

open category_theory.monoidal_category

/-- A type synonym for the monoidal opposite. Use the notation `C·¥π·µí·µñ`. -/
@[nolint has_inhabited_instance]
def monoidal_opposite (C : Type u‚ÇÅ) := C

namespace monoidal_opposite

notation C `·¥π·µí·µñ`:std.prec.max_plus := monoidal_opposite C

/-- Think of an object of `C` as an object of `C·¥π·µí·µñ`. -/
@[pp_nodot]
def mop (X : C) : C·¥π·µí·µñ := X

/-- Think of an object of `C·¥π·µí·µñ` as an object of `C`. -/
@[pp_nodot]
def unmop (X : C·¥π·µí·µñ) : C := X

lemma op_injective : function.injective (mop : C ‚Üí C·¥π·µí·µñ) := Œª _ _, id
lemma unop_injective : function.injective (unmop : C·¥π·µí·µñ ‚Üí C) := Œª _ _, id

@[simp] lemma op_inj_iff (x y : C) : mop x = mop y ‚Üî x = y := iff.rfl
@[simp] lemma unop_inj_iff (x y : C·¥π·µí·µñ) : unmop x = unmop y ‚Üî x = y := iff.rfl

attribute [irreducible] monoidal_opposite

@[simp] lemma mop_unmop (X : C·¥π·µí·µñ) : mop (unmop X) = X := rfl
@[simp] lemma unmop_mop (X : C) : unmop (mop X) = X := rfl

instance monoidal_opposite_category [I : category.{v‚ÇÅ} C] : category C·¥π·µí·µñ :=
{ hom := Œª X Y, unmop X ‚ü∂ unmop Y,
  id := Œª X, ùüô (unmop X),
  comp := Œª X Y Z f g, f ‚â´ g, }

end monoidal_opposite

end category_theory

open category_theory
open category_theory.monoidal_opposite

variables [category.{v‚ÇÅ} C]

/-- The monoidal opposite of a morphism `f : X ‚ü∂ Y` is just `f`, thought of as `mop X ‚ü∂ mop Y`. -/
def quiver.hom.mop {X Y : C} (f : X ‚ü∂ Y) : @quiver.hom C·¥π·µí·µñ _ (mop X) (mop Y) := f
/-- We can think of a morphism `f : mop X ‚ü∂ mop Y` as a morphism `X ‚ü∂ Y`. -/
def quiver.hom.unmop {X Y : C·¥π·µí·µñ} (f : X ‚ü∂ Y) : unmop X ‚ü∂ unmop Y := f

namespace category_theory

lemma mop_inj {X Y : C} :
  function.injective (quiver.hom.mop : (X ‚ü∂ Y) ‚Üí (mop X ‚ü∂ mop Y)) :=
Œª _ _ H, congr_arg quiver.hom.unmop H

lemma unmop_inj {X Y : C·¥π·µí·µñ} :
  function.injective (quiver.hom.unmop : (X ‚ü∂ Y) ‚Üí (unmop X ‚ü∂ unmop Y)) :=
Œª _ _ H, congr_arg quiver.hom.mop H

@[simp] lemma unmop_mop {X Y : C} {f : X ‚ü∂ Y} : f.mop.unmop = f := rfl
@[simp] lemma mop_unmop {X Y : C·¥π·µí·µñ} {f : X ‚ü∂ Y} : f.unmop.mop = f := rfl

@[simp] lemma mop_comp {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
  (f ‚â´ g).mop = f.mop ‚â´ g.mop := rfl
@[simp] lemma mop_id {X : C} : (ùüô X).mop = ùüô (mop X) := rfl

@[simp] lemma unmop_comp {X Y Z : C·¥π·µí·µñ} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
  (f ‚â´ g).unmop = f.unmop ‚â´ g.unmop := rfl
@[simp] lemma unmop_id {X : C·¥π·µí·µñ} : (ùüô X).unmop = ùüô (unmop X) := rfl

@[simp] lemma unmop_id_mop {X : C} : (ùüô (mop X)).unmop = ùüô X := rfl
@[simp] lemma mop_id_unmop {X : C·¥π·µí·µñ} : (ùüô (unmop X)).mop = ùüô X := rfl

namespace iso

variables {X Y : C}

/-- An isomorphism in `C` gives an isomorphism in `C·¥π·µí·µñ`. -/
@[simps]
def mop (f : X ‚âÖ Y) : mop X ‚âÖ mop Y :=
{ hom := f.hom.mop,
  inv := f.inv.mop,
  hom_inv_id' := unmop_inj f.hom_inv_id,
  inv_hom_id' := unmop_inj f.inv_hom_id }

end iso

variables [monoidal_category.{v‚ÇÅ} C]

open opposite monoidal_category

instance monoidal_category_op : monoidal_category C·µí·µñ :=
{ tensor_obj := Œª X Y, op (unop X ‚äó unop Y),
  tensor_hom := Œª X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ f g, (f.unop ‚äó g.unop).op,
  tensor_unit := op (ùüô_ C),
  associator := Œª X Y Z, (Œ±_ (unop X) (unop Y) (unop Z)).symm.op,
  left_unitor := Œª X, (Œª_ (unop X)).symm.op,
  right_unitor := Œª X, (œÅ_ (unop X)).symm.op,
  associator_naturality' :=
  begin
    intros,
    apply quiver.hom.unop_inj,
    simp [associator_inv_naturality],
  end,
  left_unitor_naturality' :=
  begin
    intros,
    apply quiver.hom.unop_inj,
    simp [left_unitor_inv_naturality],
  end,
  right_unitor_naturality' :=
  begin
    intros,
    apply quiver.hom.unop_inj,
    simp [right_unitor_inv_naturality],
  end,
  triangle' :=
  begin
    intros,
    apply quiver.hom.unop_inj,
    dsimp,
    simp,
  end,
  pentagon' :=
  begin
    intros,
    apply quiver.hom.unop_inj,
    dsimp,
    simp [pentagon_inv],
  end }

lemma op_tensor_obj (X Y : C·µí·µñ) : X ‚äó Y = op (unop X ‚äó unop Y) := rfl
lemma op_tensor_unit : (ùüô_ C·µí·µñ) = op (ùüô_ C) := rfl

instance monoidal_category_mop : monoidal_category C·¥π·µí·µñ :=
{ tensor_obj := Œª X Y, mop (unmop Y ‚äó unmop X),
  tensor_hom := Œª X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ f g, (g.unmop ‚äó f.unmop).mop,
  tensor_unit := mop (ùüô_ C),
  associator := Œª X Y Z, (Œ±_ (unmop Z) (unmop Y) (unmop X)).symm.mop,
  left_unitor := Œª X, (œÅ_ (unmop X)).mop,
  right_unitor := Œª X, (Œª_ (unmop X)).mop,
  associator_naturality' :=
  begin
    intros,
    apply unmop_inj,
    simp [associator_inv_naturality],
  end,
  left_unitor_naturality' :=
  begin
    intros,
    apply unmop_inj,
    simp [right_unitor_naturality],
  end,
  right_unitor_naturality' :=
  begin
    intros,
    apply unmop_inj,
    simp [left_unitor_naturality],
  end,
  triangle' :=
  begin
    intros,
    apply unmop_inj,
    dsimp,
    simp,
  end,
  pentagon' :=
  begin
    intros,
    apply unmop_inj,
    dsimp,
    simp [pentagon_inv],
  end }

lemma mop_tensor_obj (X Y : C·¥π·µí·µñ) : X ‚äó Y = mop (unmop Y ‚äó unmop X) := rfl
lemma mop_tensor_unit : (ùüô_ C·¥π·µí·µñ) = mop (ùüô_ C) := rfl

end category_theory
