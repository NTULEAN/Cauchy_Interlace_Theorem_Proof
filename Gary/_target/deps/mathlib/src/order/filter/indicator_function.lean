/-
Copyright (c) 2020 Zhouhang Zhou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Zhouhang Zhou, Yury Kudryashov
-/
import algebra.indicator_function
import order.filter.at_top_bot

/-!
# Indicator function and filters

Properties of indicator functions involving `=·∂†` and `‚â§·∂†`.

## Tags
indicator, characteristic, filter
-/


variables {Œ± Œ≤ M E : Type*}

open set filter classical
open_locale filter classical

section has_zero
variables [has_zero M] {s t : set Œ±} {f g : Œ± ‚Üí M} {a : Œ±} {l : filter Œ±}

lemma indicator_eventually_eq (hf : f =·∂†[l ‚äì ùìü s] g) (hs : s =·∂†[l] t) :
  indicator s f =·∂†[l] indicator t g :=
(eventually_inf_principal.1 hf).mp $ hs.mem_iff.mono $ Œª x hst hfg,
by_cases (Œª hxs : x ‚àà s, by simp only [*, hst.1 hxs, indicator_of_mem])
  (Œª hxs, by simp only [indicator_of_not_mem hxs, indicator_of_not_mem (mt hst.2 hxs)])

end has_zero

section add_monoid
variables [add_monoid M] {s t : set Œ±} {f g : Œ± ‚Üí M} {a : Œ±} {l : filter Œ±}

lemma indicator_union_eventually_eq (h : ‚àÄ·∂† a in l, a ‚àâ s ‚à© t) :
  indicator (s ‚à™ t) f =·∂†[l] indicator s f + indicator t f :=
h.mono $ Œª a ha, indicator_union_of_not_mem_inter ha _

end add_monoid

section order
variables [has_zero Œ≤] [preorder Œ≤] {s t : set Œ±} {f g : Œ± ‚Üí Œ≤} {a : Œ±} {l : filter Œ±}

lemma indicator_eventually_le_indicator (h : f ‚â§·∂†[l ‚äì ùìü s] g) :
  indicator s f ‚â§·∂†[l] indicator s g :=
(eventually_inf_principal.1 h).mono $ assume a h,
indicator_rel_indicator le_rfl h

end order

lemma monotone.tendsto_indicator {Œπ} [preorder Œπ] [has_zero Œ≤]
  (s : Œπ ‚Üí set Œ±) (hs : monotone s) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
  tendsto (Œªi, indicator (s i) f a) at_top (pure $ indicator (‚ãÉ i, s i) f a) :=
begin
  by_cases h : ‚àÉi, a ‚àà s i,
  { rcases h with ‚ü®i, hi‚ü©,
    refine tendsto_pure.2 ((eventually_ge_at_top i).mono $ assume n hn, _),
    rw [indicator_of_mem (hs hn hi) _, indicator_of_mem ((subset_Union _ _) hi) _] },
  { rw [not_exists] at h,
    simp only [indicator_of_not_mem (h _)],
    convert tendsto_const_pure,
    apply indicator_of_not_mem, simpa only [not_exists, mem_Union] }
end

lemma antitone.tendsto_indicator {Œπ} [preorder Œπ] [has_zero Œ≤]
  (s : Œπ ‚Üí set Œ±) (hs : antitone s) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
  tendsto (Œªi, indicator (s i) f a) at_top (pure $ indicator (‚ãÇ i, s i) f a) :=
begin
  by_cases h : ‚àÉi, a ‚àâ s i,
  { rcases h with ‚ü®i, hi‚ü©,
    refine tendsto_pure.2 ((eventually_ge_at_top i).mono $ assume n hn, _),
    rw [indicator_of_not_mem _ _, indicator_of_not_mem _ _],
    { simp only [mem_Inter, not_forall], exact ‚ü®i, hi‚ü© },
    { assume h, have := hs hn h, contradiction } },
  { push_neg at h,
    simp only [indicator_of_mem, h, (mem_Inter.2 h), tendsto_const_pure] }
end

lemma tendsto_indicator_bUnion_finset {Œπ} [has_zero Œ≤] (s : Œπ ‚Üí set Œ±) (f : Œ± ‚Üí Œ≤) (a : Œ±) :
  tendsto (Œª (n : finset Œπ), indicator (‚ãÉi‚ààn, s i) f a) at_top (pure $ indicator (Union s) f a) :=
begin
  rw Union_eq_Union_finset s,
  refine monotone.tendsto_indicator (Œª n : finset Œπ, ‚ãÉ i ‚àà n, s i) _ f a,
  exact Œª t‚ÇÅ t‚ÇÇ, bUnion_subset_bUnion_left
end
