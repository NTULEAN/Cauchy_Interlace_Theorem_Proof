/-
Copyright (c) 2020 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau
-/

import category_theory.sites.canonical

/-!
# Grothendieck Topology and Sheaves on the Category of Types

In this file we define a Grothendieck topology on the category of types,
and construct the canonical functor that sends a type to a sheaf over
the category of types, and make this an equivalence of categories.

Then we prove that the topology defined is the canonical topology.
-/

universe u

namespace category_theory
open_locale category_theory.Type

/-- A Grothendieck topology associated to the category of all types.
A sieve is a covering iff it is jointly surjective. -/
def types_grothendieck_topology : grothendieck_topology (Type u) :=
{ sieves := Œª Œ± S, ‚àÄ x : Œ±, S (Œª _ : punit, x),
  top_mem' := Œª Œ± x, trivial,
  pullback_stable' := Œª Œ± Œ≤ S f hs x, hs (f x),
  transitive' := Œª Œ± S hs R hr x, hr (hs x) punit.star }

/-- The discrete sieve on a type, which only includes arrows whose image is a subsingleton. -/
@[simps] def discrete_sieve (Œ± : Type u) : sieve Œ± :=
{ arrows := Œª Œ≤ f, ‚àÉ x, ‚àÄ y, f y = x,
  downward_closed' := Œª Œ≤ Œ≥ f ‚ü®x, hx‚ü© g, ‚ü®x, Œª y, hx $ g y‚ü© }

lemma discrete_sieve_mem (Œ± : Type u) : discrete_sieve Œ± ‚àà types_grothendieck_topology Œ± :=
Œª x, ‚ü®x, Œª y, rfl‚ü©

/-- The discrete presieve on a type, which only includes arrows whose domain is a singleton. -/
def discrete_presieve (Œ± : Type u) : presieve Œ± :=
Œª Œ≤ f, ‚àÉ x : Œ≤, ‚àÄ y : Œ≤, y = x

lemma generate_discrete_presieve_mem (Œ± : Type u) :
  sieve.generate (discrete_presieve Œ±) ‚àà types_grothendieck_topology Œ± :=
Œª x, ‚ü®punit, id, Œª _, x, ‚ü®punit.star, Œª _, subsingleton.elim _ _‚ü©, rfl‚ü©

open presieve

theorem is_sheaf_yoneda' {Œ± : Type u} : is_sheaf types_grothendieck_topology (yoneda.obj Œ±) :=
Œª Œ≤ S hs x hx, ‚ü®Œª y, x _ (hs y) punit.star,
Œª Œ≥ f h, funext $ Œª z,
  have _ := congr_fun (hx (ùüô _) (Œª _, z) (hs $ f z) h rfl) punit.star,
  by { convert this, exact rfl },
Œª f hf, funext $ Œª y, by convert congr_fun (hf _ (hs y)) punit.star‚ü©

/-- The yoneda functor that sends a type to a sheaf over the category of types -/
@[simps] def yoneda' : Type u ‚•§ SheafOfTypes types_grothendieck_topology :=
{ obj := Œª Œ±, ‚ü®yoneda.obj Œ±, is_sheaf_yoneda'‚ü©,
  map := Œª Œ± Œ≤ f, ‚ü®yoneda.map f‚ü© }

@[simp] lemma yoneda'_comp : yoneda'.{u} ‚ãô SheafOfTypes_to_presheaf _ = yoneda := rfl

open opposite

/-- Given a presheaf `P` on the category of types, construct
a map `P(Œ±) ‚Üí (Œ± ‚Üí P(*))` for all type `Œ±`. -/
def eval (P : (Type u)·µí·µñ ‚•§ Type u) (Œ± : Type u) (s : P.obj (op Œ±)) (x : Œ±) : P.obj (op punit) :=
P.map (‚ÜæŒª _, x).op s

/-- Given a sheaf `S` on the category of types, construct a map
`(Œ± ‚Üí S(*)) ‚Üí S(Œ±)` that is inverse to `eval`. -/
noncomputable def types_glue (S : (Type u)·µí·µñ ‚•§ Type u)
  (hs : is_sheaf types_grothendieck_topology S)
  (Œ± : Type u) (f : Œ± ‚Üí S.obj (op punit)) : S.obj (op Œ±) :=
(hs.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ±)).amalgamate
  (Œª Œ≤ g hg, S.map (‚ÜæŒª x, punit.star).op $ f $ g $ classical.some hg)
  (Œª Œ≤ Œ≥ Œ¥ g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ h,
    (hs.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ¥)).is_separated_for.ext $
    Œª Œµ g ‚ü®x, hx‚ü©, have f‚ÇÅ (classical.some hf‚ÇÅ) = f‚ÇÇ (classical.some hf‚ÇÇ),
      from classical.some_spec hf‚ÇÅ (g‚ÇÅ $ g x) ‚ñ∏ classical.some_spec hf‚ÇÇ (g‚ÇÇ $ g x) ‚ñ∏ congr_fun h _,
      by { simp_rw [‚Üê functor_to_types.map_comp_apply, this, ‚Üê op_comp], refl })

lemma eval_types_glue {S hs Œ±} (f) : eval.{u} S Œ± (types_glue S hs Œ± f) = f :=
funext $ Œª x, (is_sheaf_for.valid_glue _ _ _ $
  by exact ‚ü®punit.star, Œª _, subsingleton.elim _ _‚ü©).trans $
by { convert functor_to_types.map_id_apply _ _, rw ‚Üê op_id, congr }

lemma types_glue_eval {S hs Œ±} (s) : types_glue.{u} S hs Œ± (eval S Œ± s) = s :=
(hs.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ±)).is_separated_for.ext $ Œª Œ≤ f hf,
(is_sheaf_for.valid_glue _ _ _ hf).trans $ (functor_to_types.map_comp_apply _ _ _ _).symm.trans $
by { rw ‚Üê op_comp, congr' 2, exact funext (Œª x, congr_arg f (classical.some_spec hf x).symm) }

/-- Given a sheaf `S`, construct an equivalence `S(Œ±) ‚âÉ (Œ± ‚Üí S(*))`. -/
@[simps] noncomputable def eval_equiv (S : (Type u)·µí·µñ ‚•§ Type u)
  (hs : is_sheaf types_grothendieck_topology S)
  (Œ± : Type u) : S.obj (op Œ±) ‚âÉ (Œ± ‚Üí S.obj (op punit)) :=
{ to_fun := eval S Œ±,
  inv_fun := types_glue S hs Œ±,
  left_inv := types_glue_eval,
  right_inv := eval_types_glue }

lemma eval_map (S : (Type u)·µí·µñ ‚•§ Type u) (Œ± Œ≤) (f : Œ≤ ‚ü∂ Œ±) (s x) :
  eval S Œ≤ (S.map f.op s) x = eval S Œ± s (f x) :=
by { simp_rw [eval, ‚Üê functor_to_types.map_comp_apply, ‚Üê op_comp], refl }

/-- Given a sheaf `S`, construct an isomorphism `S ‚âÖ [-, S(*)]`. -/
@[simps] noncomputable def equiv_yoneda (S : (Type u)·µí·µñ ‚•§ Type u)
  (hs : is_sheaf types_grothendieck_topology S) :
  S ‚âÖ yoneda.obj (S.obj (op punit)) :=
nat_iso.of_components (Œª Œ±, equiv.to_iso $ eval_equiv S hs $ unop Œ±) $ Œª Œ± Œ≤ f,
funext $ Œª s, funext $ Œª x, eval_map S (unop Œ±) (unop Œ≤) f.unop _ _

/-- Given a sheaf `S`, construct an isomorphism `S ‚âÖ [-, S(*)]`. -/
@[simps] noncomputable def equiv_yoneda'
  (S : SheafOfTypes types_grothendieck_topology) :
  S ‚âÖ yoneda'.obj (S.1.obj (op punit)) :=
{ hom := ‚ü®(equiv_yoneda S.1 S.2).hom‚ü©,
  inv := ‚ü®(equiv_yoneda S.1 S.2).inv‚ü©,
  hom_inv_id' := by { ext1, apply (equiv_yoneda S.1 S.2).hom_inv_id },
  inv_hom_id' := by { ext1, apply (equiv_yoneda S.1 S.2).inv_hom_id } }

lemma eval_app (S‚ÇÅ S‚ÇÇ : SheafOfTypes.{u} types_grothendieck_topology)
  (f : S‚ÇÅ ‚ü∂ S‚ÇÇ) (Œ± : Type u) (s : S‚ÇÅ.1.obj (op Œ±)) (x : Œ±) :
  eval S‚ÇÇ.1 Œ± (f.val.app (op Œ±) s) x = f.val.app (op punit) (eval S‚ÇÅ.1 Œ± s x) :=
(congr_fun (f.val.naturality (‚ÜæŒª _ : punit, x).op) s).symm

/-- `yoneda'` induces an equivalence of category between `Type u` and
`Sheaf types_grothendieck_topology`. -/
@[simps] noncomputable def type_equiv :
  Type u ‚âå SheafOfTypes types_grothendieck_topology :=
equivalence.mk
  yoneda'
  (SheafOfTypes_to_presheaf _ ‚ãô (evaluation _ _).obj (op punit))
  (nat_iso.of_components
    (Œª Œ±, /- Œ± ‚âÖ punit ‚ü∂ Œ± -/
      { hom := Œª x _, x,
        inv := Œª f, f punit.star,
        hom_inv_id' := funext $ Œª x, rfl,
        inv_hom_id' := funext $ Œª f, funext $ Œª y, punit.cases_on y rfl })
    (Œª Œ± Œ≤ f, rfl))
  (iso.symm $ nat_iso.of_components
    (Œª S, equiv_yoneda' S)
    (Œª S‚ÇÅ S‚ÇÇ f, SheafOfTypes.hom.ext _ _ $
      nat_trans.ext _ _ $ funext $ Œª Œ±, funext $ Œª s, funext $ Œª x,
      eval_app S‚ÇÅ S‚ÇÇ f (unop Œ±) s x))

lemma subcanonical_types_grothendieck_topology :
  sheaf.subcanonical types_grothendieck_topology.{u} :=
sheaf.subcanonical.of_yoneda_is_sheaf _ (Œª X, is_sheaf_yoneda')

lemma types_grothendieck_topology_eq_canonical :
  types_grothendieck_topology.{u} = sheaf.canonical_topology (Type u) :=
le_antisymm subcanonical_types_grothendieck_topology $ Inf_le ‚ü®yoneda.obj (ulift bool), ‚ü®_, rfl‚ü©,
grothendieck_topology.ext $ funext $ Œª Œ±, set.ext $ Œª S,
‚ü®Œª hs x, classical.by_contradiction $ Œª hsx,
  have (Œª _, ulift.up tt : (yoneda.obj (ulift bool)).obj (op punit)) = Œª _, ulift.up ff :=
    (hs punit (Œª _, x)).is_separated_for.ext $ Œª Œ≤ f hf, funext $ Œª y, hsx.elim $ S.2 hf $ Œª _, y,
  bool.no_confusion $ ulift.up.inj $ (congr_fun this punit.star : _),
Œª hs Œ≤ f, is_sheaf_yoneda' _ $ Œª y, hs _‚ü©‚ü©

end category_theory
