/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou
-/

import category_theory.idempotents.basic
import category_theory.preadditive.additive_functor
import category_theory.equivalence

/-!
# The Karoubi envelope of a category

In this file, we define the Karoubi envelope `karoubi C` of a category `C`.

## Main constructions and definitions

- `karoubi C` is the Karoubi envelope of a category `C`: it is an idempotent
complete category. It is also preadditive when `C` is preadditive.
- `to_karoubi C : C ‚•§ karoubi C` is a fully faithful functor, which is an equivalence
(`to_karoubi_is_equivalence`) when `C` is idempotent complete.

-/

noncomputable theory

open category_theory.category
open category_theory.preadditive
open category_theory.limits
open_locale big_operators

namespace category_theory

variables (C : Type*) [category C]

namespace idempotents

/-- In a preadditive category `C`, when an object `X` decomposes as `X ‚âÖ P ‚®ø Q`, one may
consider `P` as a direct factor of `X` and up to unique isomorphism, it is determined by the
obvious idempotent `X ‚ü∂ P ‚ü∂ X` which is the projector on `P` with kernel `Q`. More generally,
one may define a formal direct factor of an object `X : C` : it consists of an idempotent
`p : X ‚ü∂ X` which is thought as the "formal image" of `p`. The type `karoubi C` shall be the
type of the objects of the karoubi enveloppe of `C`. It makes sense for any category `C`. -/
@[nolint has_inhabited_instance]
structure karoubi := (X : C) (p : X ‚ü∂ X) (idempotence : p ‚â´ p = p)

namespace karoubi

variables {C}

@[ext]
lemma ext {P Q : karoubi C} (h_X : P.X = Q.X)
  (h_p : P.p ‚â´ eq_to_hom h_X = eq_to_hom h_X ‚â´ Q.p) : P = Q :=
begin
  cases P,
  cases Q,
  dsimp at h_X h_p,
  subst h_X,
  simpa only [true_and, eq_self_iff_true, id_comp, eq_to_hom_refl,
    heq_iff_eq, comp_id] using h_p,
end

/-- A morphism `P ‚ü∂ Q` in the category `karoubi C` is a morphism in the underlying category
`C` which satisfies a relation, which in the preadditive case, expresses that it induces a
map between the corresponding "formal direct factors" and that it vanishes on the complement
formal direct factor. -/
@[ext]
structure hom (P Q : karoubi C) := (f : P.X ‚ü∂ Q.X) (comm : f = P.p ‚â´ f ‚â´ Q.p)

instance [preadditive C] (P Q : karoubi C) : inhabited (hom P Q) :=
‚ü®‚ü®0, by rw [zero_comp, comp_zero]‚ü©‚ü©

@[simp]
lemma hom_ext {P Q : karoubi C} {f g : hom P Q} : f = g ‚Üî f.f = g.f :=
begin
  split,
  { intro h, rw h, },
  { ext, }
end

@[simp, reassoc]
lemma p_comp {P Q : karoubi C} (f : hom P Q) : P.p ‚â´ f.f = f.f :=
by rw [f.comm, ‚Üê assoc, P.idempotence]

@[simp, reassoc]
lemma comp_p {P Q : karoubi C} (f : hom P Q) : f.f ‚â´ Q.p = f.f :=
by rw [f.comm, assoc, assoc, Q.idempotence]

lemma p_comm {P Q : karoubi C} (f : hom P Q) : P.p ‚â´ f.f = f.f ‚â´ Q.p :=
by rw [p_comp, comp_p]

lemma comp_proof {P Q R : karoubi C} (g : hom Q R) (f : hom P Q) :
  f.f ‚â´ g.f = P.p ‚â´ (f.f ‚â´ g.f) ‚â´ R.p :=
by rw [assoc, comp_p, ‚Üê assoc, p_comp]

/-- The category structure on the karoubi envelope of a category. -/
instance : category (karoubi C) :=
{ hom      := karoubi.hom,
  id       := Œª P, ‚ü®P.p, by { repeat { rw P.idempotence, }, }‚ü©,
  comp     := Œª P Q R f g, ‚ü®f.f ‚â´ g.f, karoubi.comp_proof g f‚ü©,
  id_comp' := Œª P Q f, by { ext, simp only [karoubi.p_comp], },
  comp_id' := Œª P Q f, by { ext, simp only [karoubi.comp_p], },
  assoc'   := Œª P Q R S f g h, by { ext, simp only [category.assoc], }, }

@[simp]
lemma comp {P Q R : karoubi C} (f : P ‚ü∂ Q) (g : Q ‚ü∂ R) :
  f ‚â´ g = ‚ü®f.f ‚â´ g.f, comp_proof g f‚ü© := by refl

@[simp]
lemma id_eq {P : karoubi C} : ùüô P = ‚ü®P.p, by repeat { rw P.idempotence, }‚ü© := by refl

/-- It is possible to coerce an object of `C` into an object of `karoubi C`.
See also the functor `to_karoubi`. -/
instance coe : has_coe_t C (karoubi C) := ‚ü®Œª X, ‚ü®X, ùüô X, by rw comp_id‚ü©‚ü©

@[simp]
lemma coe_X (X : C) : (X : karoubi C).X = X := by refl

@[simp]
lemma coe_p (X : C) : (X : karoubi C).p = ùüô X := by refl

@[simp]
lemma eq_to_hom_f {P Q : karoubi C} (h : P = Q) :
  karoubi.hom.f (eq_to_hom h) = P.p ‚â´ eq_to_hom (congr_arg karoubi.X h) :=
by { subst h, simp only [eq_to_hom_refl, karoubi.id_eq, comp_id], }

end karoubi

/-- The obvious fully faithful functor `to_karoubi` sends an object `X : C` to the obvious
formal direct factor of `X` given by `ùüô X`. -/
@[simps]
def to_karoubi : C ‚•§ karoubi C :=
{ obj := Œª X, ‚ü®X, ùüô X, by rw comp_id‚ü©,
  map := Œª X Y f, ‚ü®f, by simp only [comp_id, id_comp]‚ü© }

instance : full (to_karoubi C) :=
{ preimage := Œª X Y f, f.f,
  witness' := Œª X Y f, by { ext, simp only [to_karoubi_map_f], }, }

instance : faithful (to_karoubi C) := { }

variables {C}

@[simps]
instance [preadditive C] {P Q : karoubi C} : add_comm_group (P ‚ü∂ Q) :=
{ add := Œª f g, ‚ü®f.f+g.f, begin
    rw [add_comp, comp_add],
    congr',
    exacts [f.comm, g.comm],
  end‚ü©,
  zero := ‚ü®0, by simp only [comp_zero, zero_comp]‚ü©,
  zero_add := Œª f, by { ext, simp only [zero_add], },
  add_zero := Œª f, by { ext, simp only [add_zero], },
  add_assoc := Œª f g h', by simp only [add_assoc],
  add_comm := Œª f g, by { ext, apply_rules [add_comm], },
  neg := Œª f, ‚ü®-f.f, by simpa only [neg_comp, comp_neg, neg_inj] using f.comm‚ü©,
  add_left_neg := Œª f, by { ext, apply_rules [add_left_neg], }, }

namespace karoubi

lemma hom_eq_zero_iff [preadditive C] {P Q : karoubi C} {f : hom P Q} : f = 0 ‚Üî f.f = 0 := hom_ext

/-- The map sending `f : P ‚ü∂ Q` to `f.f : P.X ‚ü∂ Q.X` is additive. -/
@[simps]
def inclusion_hom [preadditive C] (P Q : karoubi C) : add_monoid_hom (P ‚ü∂ Q) (P.X ‚ü∂ Q.X) :=
{ to_fun    := Œª f, f.f,
  map_zero' := rfl,
  map_add'  := Œª f g, rfl }

@[simp]
lemma sum_hom [preadditive C] {P Q : karoubi C} {Œ± : Type*} (s : finset Œ±) (f : Œ± ‚Üí (P ‚ü∂ Q)) :
  (‚àë x in s, f x).f = ‚àë x in s, (f x).f  :=
add_monoid_hom.map_sum (inclusion_hom P Q) f s

end karoubi

/-- The category `karoubi C` is preadditive if `C` is. -/
instance [preadditive C] : preadditive (karoubi C) :=
{ hom_group := Œª P Q, by apply_instance,
  add_comp' := Œª P Q R f g h,
    by { ext, simp only [add_comp, quiver.hom.add_comm_group_add_f, karoubi.comp], },
  comp_add' := Œª P Q R f g h,
    by { ext, simp only [comp_add, quiver.hom.add_comm_group_add_f, karoubi.comp], }, }

instance [preadditive C] : functor.additive (to_karoubi C) := { }

open karoubi

variables (C)

instance : is_idempotent_complete (karoubi C) :=
begin
  refine ‚ü®_‚ü©,
  intros P p hp,
  have hp' := hom_ext.mp hp,
  simp only [comp] at hp',
  use ‚ü®P.X, p.f, hp'‚ü©,
  use ‚ü®p.f, by rw [comp_p p, hp']‚ü©,
  use ‚ü®p.f, by rw [hp', p_comp p]‚ü©,
  split; simpa only [hom_ext] using hp',
end

instance [is_idempotent_complete C] : ess_surj (to_karoubi C) := ‚ü®Œª P, begin
  have h : is_idempotent_complete C := infer_instance,
  rcases is_idempotent_complete.idempotents_split P.X P.p P.idempotence
    with ‚ü®Y,i,e,‚ü®h‚ÇÅ,h‚ÇÇ‚ü©‚ü©,
  use Y,
  exact nonempty.intro
    { hom := ‚ü®i, by erw [id_comp, ‚Üê h‚ÇÇ, ‚Üê assoc, h‚ÇÅ, id_comp]‚ü©,
      inv := ‚ü®e, by erw [comp_id, ‚Üê h‚ÇÇ, assoc, h‚ÇÅ, comp_id]‚ü©,
      hom_inv_id' := by { ext, simpa only [comp, h‚ÇÅ], },
      inv_hom_id' := by { ext, simp only [comp, ‚Üê h‚ÇÇ, id_eq], }, },
end‚ü©

/-- If `C` is idempotent complete, the functor `to_karoubi : C ‚•§ karoubi C` is an equivalence. -/
def to_karoubi_is_equivalence [is_idempotent_complete C] :
  is_equivalence (to_karoubi C) :=
equivalence.of_fully_faithfully_ess_surj (to_karoubi C)

namespace karoubi

variables {C}

/-- The split mono which appears in the factorisation `decomp_id P`. -/
@[simps]
def decomp_id_i (P : karoubi C) : P ‚ü∂ P.X := ‚ü®P.p, by erw [coe_p, comp_id, P.idempotence]‚ü©

/-- The split epi which appears in the factorisation `decomp_id P`. -/
@[simps]
def decomp_id_p (P : karoubi C) : (P.X : karoubi C) ‚ü∂ P :=
‚ü®P.p, by erw [coe_p, id_comp, P.idempotence]‚ü©

/-- The formal direct factor of `P.X` given by the idempotent `P.p` in the category `C`
is actually a direct factor in the category `karoubi C`. -/
lemma decomp_id (P : karoubi C) :
  ùüô P = (decomp_id_i P) ‚â´ (decomp_id_p P) :=
by { ext, simp only [comp, id_eq, P.idempotence, decomp_id_i, decomp_id_p], }

lemma decomp_p (P : karoubi C) :
  (to_karoubi C).map P.p = (decomp_id_p P) ‚â´ (decomp_id_i P) :=
by { ext, simp only [comp, decomp_id_p_f, decomp_id_i_f, P.idempotence, to_karoubi_map_f], }

lemma decomp_id_i_to_karoubi (X : C) : decomp_id_i ((to_karoubi C).obj X) = ùüô _ :=
by { ext, refl, }

lemma decomp_id_p_to_karoubi (X : C) : decomp_id_p ((to_karoubi C).obj X) = ùüô _ :=
by { ext, refl, }

lemma decomp_id_i_naturality {P Q : karoubi C} (f : P ‚ü∂ Q) : f ‚â´ decomp_id_i _ =
  decomp_id_i _ ‚â´ ‚ü®f.f, by erw [comp_id, id_comp]‚ü© :=
by { ext, simp only [comp, decomp_id_i_f, karoubi.comp_p, karoubi.p_comp], }

lemma decomp_id_p_naturality {P Q : karoubi C} (f : P ‚ü∂ Q) : decomp_id_p P ‚â´ f =
  (‚ü®f.f, by erw [comp_id, id_comp]‚ü© : (P.X : karoubi C) ‚ü∂ Q.X) ‚â´ decomp_id_p Q :=
by { ext, simp only [comp, decomp_id_p_f, karoubi.comp_p, karoubi.p_comp], }

end karoubi

end idempotents

end category_theory
