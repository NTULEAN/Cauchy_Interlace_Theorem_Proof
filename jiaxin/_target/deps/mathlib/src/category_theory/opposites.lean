/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Stephen Morgan, Scott Morrison
-/
import category_theory.equivalence

/-!
# Opposite categories

We provide a category instance on `C·µí·µñ`.
The morphisms `X ‚ü∂ Y` are defined to be the morphisms `unop Y ‚ü∂ unop X` in `C`.

Here `C·µí·µñ` is an irreducible typeclass synonym for `C`
(it is the same one used in the algebra library).

We also provide various mechanisms for constructing opposite morphisms, functors,
and natural transformations.

Unfortunately, because we do not have a definitional equality `op (op X) = X`,
there are quite a few variations that are needed in practice.
-/

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ -- morphism levels before object levels. See note [category_theory universes].

open opposite

variables {C : Type u‚ÇÅ}

section quiver

variables [quiver.{v‚ÇÅ} C]

lemma quiver.hom.op_inj {X Y : C} :
  function.injective (quiver.hom.op : (X ‚ü∂ Y) ‚Üí (op Y ‚ü∂ op X)) :=
Œª _ _ H, congr_arg quiver.hom.unop H

lemma quiver.hom.unop_inj {X Y : C·µí·µñ} :
  function.injective (quiver.hom.unop : (X ‚ü∂ Y) ‚Üí (unop Y ‚ü∂ unop X)) :=
Œª _ _ H, congr_arg quiver.hom.op H

@[simp] lemma quiver.hom.unop_op {X Y : C} (f : X ‚ü∂ Y) : f.op.unop = f := rfl
@[simp] lemma quiver.hom.op_unop {X Y : C·µí·µñ} (f : X ‚ü∂ Y) : f.unop.op = f := rfl

end quiver

namespace category_theory

variables [category.{v‚ÇÅ} C]

/--
The opposite category.

See https://stacks.math.columbia.edu/tag/001M.
-/
instance category.opposite : category.{v‚ÇÅ} C·µí·µñ :=
{ comp := Œª _ _ _ f g, (g.unop ‚â´ f.unop).op,
  id   := Œª X, (ùüô (unop X)).op }

@[simp] lemma op_comp {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
  (f ‚â´ g).op = g.op ‚â´ f.op := rfl
@[simp] lemma op_id {X : C} : (ùüô X).op = ùüô (op X) := rfl

@[simp] lemma unop_comp {X Y Z : C·µí·µñ} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z} :
  (f ‚â´ g).unop = g.unop ‚â´ f.unop := rfl
@[simp] lemma unop_id {X : C·µí·µñ} : (ùüô X).unop = ùüô (unop X) := rfl

@[simp] lemma unop_id_op {X : C} : (ùüô (op X)).unop = ùüô X := rfl
@[simp] lemma op_id_unop {X : C·µí·µñ} : (ùüô (unop X)).op = ùüô X := rfl

section
variables (C)

/-- The functor from the double-opposite of a category to the underlying category. -/
@[simps]
def op_op : (C·µí·µñ)·µí·µñ ‚•§ C :=
{ obj := Œª X, unop (unop X),
  map := Œª X Y f, f.unop.unop }

/-- The functor from a category to its double-opposite.  -/
@[simps]
def unop_unop : C ‚•§ C·µí·µñ·µí·µñ :=
{ obj := Œª X, op (op X),
  map := Œª X Y f, f.op.op }

/-- The double opposite category is equivalent to the original. -/
@[simps]
def op_op_equivalence : C·µí·µñ·µí·µñ ‚âå C :=
{ functor := op_op C,
  inverse := unop_unop C,
  unit_iso := iso.refl (ùü≠ C·µí·µñ·µí·µñ),
  counit_iso := iso.refl (unop_unop C ‚ãô op_op C) }

end

/-- If `f` is an isomorphism, so is `f.op` -/
instance is_iso_op {X Y : C} (f : X ‚ü∂ Y) [is_iso f] : is_iso f.op :=
‚ü®‚ü®(inv f).op,
  ‚ü®quiver.hom.unop_inj (by tidy), quiver.hom.unop_inj (by tidy)‚ü©‚ü©‚ü©

/--
If `f.op` is an isomorphism `f` must be too.
(This cannot be an instance as it would immediately loop!)
-/
lemma is_iso_of_op {X Y : C} (f : X ‚ü∂ Y) [is_iso f.op] : is_iso f :=
‚ü®‚ü®(inv (f.op)).unop,
  ‚ü®quiver.hom.op_inj (by simp), quiver.hom.op_inj (by simp)‚ü©‚ü©‚ü©

@[simp] lemma op_inv {X Y : C} (f : X ‚ü∂ Y) [f_iso : is_iso f] : (inv f).op = inv f.op :=
by { ext, rw [‚Üê op_comp, is_iso.inv_hom_id, op_id] }

namespace functor

section

variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

variables {C D}

/--
The opposite of a functor, i.e. considering a functor `F : C ‚•§ D` as a functor `C·µí·µñ ‚•§ D·µí·µñ`.
In informal mathematics no distinction is made between these.
-/
@[simps]
protected def op (F : C ‚•§ D) : C·µí·µñ ‚•§ D·µí·µñ :=
{ obj := Œª X, op (F.obj (unop X)),
  map := Œª X Y f, (F.map f.unop).op }

/--
Given a functor `F : C·µí·µñ ‚•§ D·µí·µñ` we can take the "unopposite" functor `F : C ‚•§ D`.
In informal mathematics no distinction is made between these.
-/
@[simps]
protected def unop (F : C·µí·µñ ‚•§ D·µí·µñ) : C ‚•§ D :=
{ obj := Œª X, unop (F.obj (op X)),
  map := Œª X Y f, (F.map f.op).unop }

/-- The isomorphism between `F.op.unop` and `F`. -/
@[simps] def op_unop_iso (F : C ‚•§ D) : F.op.unop ‚âÖ F :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

/-- The isomorphism between `F.unop.op` and `F`. -/
@[simps] def unop_op_iso (F : C·µí·µñ ‚•§ D·µí·µñ) : F.unop.op ‚âÖ F :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

variables (C D)

/--
Taking the opposite of a functor is functorial.
-/
@[simps]
def op_hom : (C ‚•§ D)·µí·µñ ‚•§ (C·µí·µñ ‚•§ D·µí·µñ) :=
{ obj := Œª F, (unop F).op,
  map := Œª F G Œ±,
  { app := Œª X, (Œ±.unop.app (unop X)).op,
    naturality' := Œª X Y f, quiver.hom.unop_inj (Œ±.unop.naturality f.unop).symm } }

/--
Take the "unopposite" of a functor is functorial.
-/
@[simps]
def op_inv : (C·µí·µñ ‚•§ D·µí·µñ) ‚•§ (C ‚•§ D)·µí·µñ :=
{ obj := Œª F, op F.unop,
  map := Œª F G Œ±, quiver.hom.op
  { app := Œª X, (Œ±.app (op X)).unop,
    naturality' := Œª X Y f, quiver.hom.op_inj $ (Œ±.naturality f.op).symm } }

variables {C D}

/--
Another variant of the opposite of functor, turning a functor `C ‚•§ D·µí·µñ` into a functor `C·µí·µñ ‚•§ D`.
In informal mathematics no distinction is made.
-/
@[simps]
protected def left_op (F : C ‚•§ D·µí·µñ) : C·µí·µñ ‚•§ D :=
{ obj := Œª X, unop (F.obj (unop X)),
  map := Œª X Y f, (F.map f.unop).unop }

/--
Another variant of the opposite of functor, turning a functor `C·µí·µñ ‚•§ D` into a functor `C ‚•§ D·µí·µñ`.
In informal mathematics no distinction is made.
-/
@[simps]
protected def right_op (F : C·µí·µñ ‚•§ D) : C ‚•§ D·µí·µñ :=
{ obj := Œª X, op (F.obj (op X)),
  map := Œª X Y f, (F.map f.op).op }

instance {F : C ‚•§ D} [full F] : full F.op :=
{ preimage := Œª X Y f, (F.preimage f.unop).op }

instance {F : C ‚•§ D} [faithful F] : faithful F.op :=
{ map_injective' := Œª X Y f g h,
    quiver.hom.unop_inj $ by simpa using map_injective F (quiver.hom.op_inj h) }

/-- If F is faithful then the right_op of F is also faithful. -/
instance right_op_faithful {F : C·µí·µñ ‚•§ D} [faithful F] : faithful F.right_op :=
{ map_injective' := Œª X Y f g h, quiver.hom.op_inj (map_injective F (quiver.hom.op_inj h)) }

/-- If F is faithful then the left_op of F is also faithful. -/
instance left_op_faithful {F : C ‚•§ D·µí·µñ} [faithful F] : faithful F.left_op :=
{ map_injective' := Œª X Y f g h, quiver.hom.unop_inj (map_injective F (quiver.hom.unop_inj h)) }

/-- The isomorphism between `F.left_op.right_op` and `F`. -/
@[simps]
def left_op_right_op_iso (F : C ‚•§ D·µí·µñ) : F.left_op.right_op ‚âÖ F :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

/-- The isomorphism between `F.right_op.left_op` and `F`. -/
@[simps]
def right_op_left_op_iso (F : C·µí·µñ ‚•§ D) : F.right_op.left_op ‚âÖ F :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

end

end functor

namespace nat_trans

variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

section
variables {F G : C ‚•§ D}

/-- The opposite of a natural transformation. -/
@[simps] protected def op (Œ± : F ‚ü∂ G) : G.op ‚ü∂ F.op :=
{ app         := Œª X, (Œ±.app (unop X)).op,
  naturality' := begin tidy, simp_rw [‚Üê op_comp, Œ±.naturality] end }

@[simp] lemma op_id (F : C ‚•§ D) : nat_trans.op (ùüô F) = ùüô (F.op) := rfl

/-- The "unopposite" of a natural transformation. -/
@[simps] protected def unop {F G : C·µí·µñ ‚•§ D·µí·µñ} (Œ± : F ‚ü∂ G) : G.unop ‚ü∂ F.unop :=
{ app         := Œª X, (Œ±.app (op X)).unop,
  naturality' := begin tidy, simp_rw [‚Üê unop_comp, Œ±.naturality] end }

@[simp] lemma unop_id (F : C·µí·µñ ‚•§ D·µí·µñ) : nat_trans.unop (ùüô F) = ùüô (F.unop) := rfl

/--
Given a natural transformation `Œ± : F.op ‚ü∂ G.op`,
we can take the "unopposite" of each component obtaining a natural transformation `G ‚ü∂ F`.
-/
@[simps] protected def remove_op (Œ± : F.op ‚ü∂ G.op) : G ‚ü∂ F :=
{ app         := Œª X, (Œ±.app (op X)).unop,
  naturality' :=
  begin
    intros X Y f,
    have := congr_arg quiver.hom.unop (Œ±.naturality f.op),
    dsimp at this,
    rw this,
  end }

@[simp] lemma remove_op_id (F : C ‚•§ D) : nat_trans.remove_op (ùüô F.op) = ùüô F := rfl

end

section
variables {F G H : C ‚•§ D·µí·µñ}

/--
Given a natural transformation `Œ± : F ‚ü∂ G`, for `F G : C ‚•§ D·µí·µñ`,
taking `unop` of each component gives a natural transformation `G.left_op ‚ü∂ F.left_op`.
-/
@[simps] protected def left_op (Œ± : F ‚ü∂ G) : G.left_op ‚ü∂ F.left_op :=
{ app         := Œª X, (Œ±.app (unop X)).unop,
  naturality' := begin
    intros X Y f,
    dsimp,
    simp_rw [‚Üê unop_comp, Œ±.naturality]
  end }

@[simp] lemma left_op_id : (ùüô F : F ‚ü∂ F).left_op = ùüô F.left_op := rfl

@[simp] lemma left_op_comp (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  (Œ± ‚â´ Œ≤).left_op = Œ≤.left_op ‚â´ Œ±.left_op := rfl

/--
Given a natural transformation `Œ± : F.left_op ‚ü∂ G.left_op`, for `F G : C ‚•§ D·µí·µñ`,
taking `op` of each component gives a natural transformation `G ‚ü∂ F`.
-/
@[simps] protected def remove_left_op (Œ± : F.left_op ‚ü∂ G.left_op) : G ‚ü∂ F :=
{ app         := Œª X, (Œ±.app (op X)).op,
  naturality' :=
  begin
    intros X Y f,
    have := congr_arg quiver.hom.op (Œ±.naturality f.op),
    dsimp at this,
    erw this
  end }

end

section
variables {F G H : C·µí·µñ ‚•§ D}

/--
Given a natural transformation `Œ± : F ‚ü∂ G`, for `F G : C·µí·µñ ‚•§ D`,
taking `op` of each component gives a natural transformation `G.right_op ‚ü∂ F.right_op`.
-/
@[simps] protected def right_op (Œ± : F ‚ü∂ G) : G.right_op ‚ü∂ F.right_op :=
{ app := Œª X, (Œ±.app _).op,
  naturality' := begin
    intros X Y f,
    dsimp,
    simp_rw [‚Üê op_comp, Œ±.naturality]
  end }

@[simp] lemma right_op_id : (ùüô F : F ‚ü∂ F).right_op = ùüô F.right_op := rfl

@[simp] lemma right_op_comp (Œ± : F ‚ü∂ G) (Œ≤ : G ‚ü∂ H) :
  (Œ± ‚â´ Œ≤).right_op = Œ≤.right_op ‚â´ Œ±.right_op := rfl

/--
Given a natural transformation `Œ± : F.right_op ‚ü∂ G.right_op`, for `F G : C·µí·µñ ‚•§ D`,
taking `unop` of each component gives a natural transformation `G ‚ü∂ F`.
-/
@[simps] protected def remove_right_op (Œ± : F.right_op ‚ü∂ G.right_op) : G ‚ü∂ F :=
{ app := Œª X, (Œ±.app X.unop).unop,
  naturality' := begin
    intros X Y f,
    have := congr_arg quiver.hom.unop (Œ±.naturality f.unop),
    dsimp at this,
    erw this,
  end }

end
end nat_trans

namespace iso

variables {X Y : C}

/--
The opposite isomorphism.
-/
@[simps]
protected def op (Œ± : X ‚âÖ Y) : op Y ‚âÖ op X :=
{ hom := Œ±.hom.op,
  inv := Œ±.inv.op,
  hom_inv_id' := quiver.hom.unop_inj Œ±.inv_hom_id,
  inv_hom_id' := quiver.hom.unop_inj Œ±.hom_inv_id }

/-- The isomorphism obtained from an isomorphism in the opposite category. -/
@[simps] def unop {X Y : C·µí·µñ} (f : X ‚âÖ Y) : Y.unop ‚âÖ X.unop :=
{ hom := f.hom.unop,
  inv := f.inv.unop,
  hom_inv_id' := by simp only [‚Üê unop_comp, f.inv_hom_id, unop_id],
  inv_hom_id' := by simp only [‚Üê unop_comp, f.hom_inv_id, unop_id] }

@[simp] lemma unop_op {X Y : C·µí·µñ} (f : X ‚âÖ Y) : f.unop.op = f :=
by ext; refl

@[simp] lemma op_unop {X Y : C} (f : X ‚âÖ Y) : f.op.unop = f :=
by ext; refl

end iso

namespace nat_iso

variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
variables {F G : C ‚•§ D}

/-- The natural isomorphism between opposite functors `G.op ‚âÖ F.op` induced by a natural
isomorphism between the original functors `F ‚âÖ G`. -/
@[simps] protected def op (Œ± : F ‚âÖ G) : G.op ‚âÖ F.op :=
{ hom := nat_trans.op Œ±.hom,
  inv := nat_trans.op Œ±.inv,
  hom_inv_id' := begin ext, dsimp, rw ‚Üêop_comp, rw Œ±.inv_hom_id_app, refl, end,
  inv_hom_id' := begin ext, dsimp, rw ‚Üêop_comp, rw Œ±.hom_inv_id_app, refl, end }

/-- The natural isomorphism between functors `G ‚âÖ F` induced by a natural isomorphism
between the opposite functors `F.op ‚âÖ G.op`. -/
@[simps] protected def remove_op (Œ± : F.op ‚âÖ G.op) : G ‚âÖ F :=
{ hom := nat_trans.remove_op Œ±.hom,
  inv := nat_trans.remove_op Œ±.inv,
  hom_inv_id' := begin ext, dsimp, rw ‚Üêunop_comp, rw Œ±.inv_hom_id_app, refl, end,
  inv_hom_id' := begin ext, dsimp, rw ‚Üêunop_comp, rw Œ±.hom_inv_id_app, refl, end }

/-- The natural isomorphism between functors `G.unop ‚âÖ F.unop` induced by a natural isomorphism
between the original functors `F ‚âÖ G`. -/
@[simps] protected def unop {F G : C·µí·µñ ‚•§ D·µí·µñ} (Œ± : F ‚âÖ G) : G.unop ‚âÖ F.unop :=
{ hom := nat_trans.unop Œ±.hom,
  inv := nat_trans.unop Œ±.inv,
  hom_inv_id' := begin ext, dsimp, rw ‚Üêunop_comp, rw Œ±.inv_hom_id_app, refl, end,
  inv_hom_id' := begin ext, dsimp, rw ‚Üêunop_comp, rw Œ±.hom_inv_id_app, refl, end }

end nat_iso

namespace equivalence

variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]

/--
An equivalence between categories gives an equivalence between the opposite categories.
-/
@[simps]
def op (e : C ‚âå D) : C·µí·µñ ‚âå D·µí·µñ :=
{ functor := e.functor.op,
  inverse := e.inverse.op,
  unit_iso := (nat_iso.op e.unit_iso).symm,
  counit_iso := (nat_iso.op e.counit_iso).symm,
  functor_unit_iso_comp' := Œª X, by { apply quiver.hom.unop_inj, dsimp, simp, }, }

/--
An equivalence between opposite categories gives an equivalence between the original categories.
-/
@[simps]
def unop (e : C·µí·µñ ‚âå D·µí·µñ) : C ‚âå D :=
{ functor := e.functor.unop,
  inverse := e.inverse.unop,
  unit_iso := (nat_iso.unop e.unit_iso).symm,
  counit_iso := (nat_iso.unop e.counit_iso).symm,
  functor_unit_iso_comp' := Œª X, by { apply quiver.hom.op_inj, dsimp, simp, }, }

end equivalence

/-- The equivalence between arrows of the form `A ‚ü∂ B` and `B.unop ‚ü∂ A.unop`. Useful for building
adjunctions.
Note that this (definitionally) gives variants
```
def op_equiv' (A : C) (B : C·µí·µñ) : (opposite.op A ‚ü∂ B) ‚âÉ (B.unop ‚ü∂ A) :=
op_equiv _ _

def op_equiv'' (A : C·µí·µñ) (B : C) : (A ‚ü∂ opposite.op B) ‚âÉ (B ‚ü∂ A.unop) :=
op_equiv _ _

def op_equiv''' (A B : C) : (opposite.op A ‚ü∂ opposite.op B) ‚âÉ (B ‚ü∂ A) :=
op_equiv _ _
```
-/
@[simps] def op_equiv (A B : C·µí·µñ) : (A ‚ü∂ B) ‚âÉ (B.unop ‚ü∂ A.unop) :=
{ to_fun := Œª f, f.unop,
  inv_fun := Œª g, g.op,
  left_inv := Œª _, rfl,
  right_inv := Œª _, rfl }

instance subsingleton_of_unop (A B : C·µí·µñ) [subsingleton (unop B ‚ü∂ unop A)] : subsingleton (A ‚ü∂ B) :=
(op_equiv A B).subsingleton

instance decidable_eq_of_unop (A B : C·µí·µñ) [decidable_eq (unop B ‚ü∂ unop A)] : decidable_eq (A ‚ü∂ B) :=
(op_equiv A B).decidable_eq

namespace functor

variables (C)
variables (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]

/--
The equivalence of functor categories induced by `op` and `unop`.
-/
@[simps]
def op_unop_equiv : (C ‚•§ D)·µí·µñ ‚âå C·µí·µñ ‚•§ D·µí·µñ :=
{ functor := op_hom _ _,
  inverse := op_inv _ _,
  unit_iso := nat_iso.of_components (Œª F, F.unop.op_unop_iso.op) begin
    intros F G f,
    dsimp [op_unop_iso],
    rw [(show f = f.unop.op, by simp), ‚Üê op_comp, ‚Üê op_comp],
    congr' 1,
    tidy,
  end,
  counit_iso := nat_iso.of_components (Œª F, F.unop_op_iso) (by tidy) }.

/--
The equivalence of functor categories induced by `left_op` and `right_op`.
-/
@[simps]
def left_op_right_op_equiv : (C·µí·µñ ‚•§ D)·µí·µñ ‚âå (C ‚•§ D·µí·µñ) :=
{ functor :=
  { obj := Œª F, F.unop.right_op,
    map := Œª F G Œ∑, Œ∑.unop.right_op },
  inverse :=
  { obj := Œª F, op F.left_op,
    map := Œª F G Œ∑, Œ∑.left_op.op },
  unit_iso := nat_iso.of_components (Œª F, F.unop.right_op_left_op_iso.op) begin
    intros F G Œ∑,
    dsimp,
    rw [(show Œ∑ = Œ∑.unop.op, by simp), ‚Üê op_comp, ‚Üê op_comp],
    congr' 1,
    tidy,
  end,
  counit_iso := nat_iso.of_components (Œª F, F.left_op_right_op_iso) (by tidy) }

end functor

end category_theory
