/-
Copyright (c) 2021 Jakob Scholbach. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jakob Scholbach
-/
import category_theory.limits.shapes.terminal
import category_theory.arrow

/-!
# Lifting properties

This file defines the lifting property of two arrows in a category and shows basic properties of
this notion.
We also construct the subcategory consisting of those morphisms which have the right lifting
property with respect to arrows in a given diagram.

## Main results
- `has_lifting_property`: the definition of the lifting property
- `iso_has_right_lifting_property`: any isomorphism satisfies the right lifting property (rlp)
- `id_has_right_lifting_property`: any identity has the rlp
- `right_lifting_property_initial_iff`: spells out the rlp with respect to a map whose source is an
  initial object
- `right_lifting_subcat`: given a set of arrows `F : D ‚Üí arrow C`, we construct the subcategory
  of those morphisms `p` in `C` that satisfy the rlp w.r.t. `F i`, for any element `i` of `D`.

## Tags
lifting property
-/

open category_theory.limits

namespace category_theory

universes v u v‚ÇÅ
variables {C : Type u} [category.{v} C]
variables {D : Type v‚ÇÅ}

variables {X Y Z : C}

/-- The lifting property of a morphism `i` with respect to a morphism `p`.
This can be interpreted as the right lifting property of `i` with respect to `p`,
or the left lifting property of `p` with respect to `i`. -/
class has_lifting_property (i p : arrow C) : Prop :=
(sq_has_lift : ‚àÄ (sq : i ‚ü∂ p), arrow.has_lift sq)

@[priority 100] -- see Note [lower instance priority]
instance has_lifting_property' {i p : arrow C} [has_lifting_property i p] (sq : i ‚ü∂ p) :
  arrow.has_lift sq :=
has_lifting_property.sq_has_lift sq

/-- Any isomorphism has the right lifting property with respect to any map.
A    ‚Üí X
‚Üìi    ‚Üìp‚âÖ
B    ‚Üí Y
-/
lemma iso_has_right_lifting_property (i : arrow C) (p : X ‚âÖ Y) :
  has_lifting_property i (arrow.mk p.hom) :=
‚ü®Œª sq, ‚ü®‚ü®{ lift := sq.right ‚â´ p.inv, }‚ü©‚ü©‚ü© -- the lift is obtained by p‚Åª¬π ‚àò (B ‚Üí Y)

/-- Any identity has the right lifting property with respect to any map. -/
lemma id_has_right_lifting_property (i : arrow C) : has_lifting_property i (arrow.mk (ùüô X)) :=
iso_has_right_lifting_property i (iso.refl _)

/-- An equivalent characterization for right lifting with respect to a map `i` whose source is
initial.
‚àÖ ‚Üí X
‚Üì   ‚Üì
B ‚Üí Y has a lifting iff there is a map B ‚Üí X making the right part commute.
-/
lemma right_lifting_property_initial_iff (i p : arrow C) (h : is_initial i.left) :
  has_lifting_property i p ‚Üî ‚àÄ {e : i.right ‚ü∂ p.right}, ‚àÉ l : i.right ‚ü∂ p.left, l ‚â´ p.hom = e :=
begin
  fsplit,
  { introsI hlift e,
    have comm : (is_initial.to h p.left) ‚â´ p.hom = i.hom ‚â´ e :=
      is_initial.hom_ext h _ _,
    use arrow.lift (arrow.hom_mk comm),
    simp },
  { refine Œª hlift, ‚ü®Œª sq, _‚ü©,
    obtain ‚ü®l, hl‚ü© : ‚àÉ (l : i.right ‚ü∂ p.left), l ‚â´ p.hom = sq.right := hlift,
    exact arrow.has_lift.mk ‚ü®l, is_initial.hom_ext h _ _‚ü©, }
end

/-- The condition of having the rlp with respect to a morphism `i` is stable under composition. -/
lemma has_right_lifting_property_comp {i : arrow C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}
  (hf : has_lifting_property i (arrow.mk f))
  (hg : has_lifting_property i (arrow.mk g)) :
  has_lifting_property i (arrow.mk (f ‚â´ g)) :=
{ sq_has_lift := Œª sq1,
    -- construct a square i ‚ü∂ f
    let sq2 : i ‚ü∂ (arrow.mk f) := ‚ü®sq1.left, arrow.lift (arrow.square_to_snd sq1)‚ü© in
    -- show that the lift of this square is a lift of i with respect to g ‚àò f
    ‚ü®‚ü®‚ü®(arrow.lift sq2 : _ ‚ü∂ _), by simp‚ü©‚ü©‚ü© }

/-- The objects of the subcategory `right_lifting_subcategory` are the ones in the
underlying category. -/
def right_lifting_subcat (R : Type u) := R

instance right_lifting_subcat.inhabited  (R : Type u) [inhabited R] :
  inhabited (right_lifting_subcat R) :=
{ default := (default : R) }

/-- The objects of the subcategory `right_lifting_subcategory` are the ones in the
underlying category. -/
def right_lifting_subcat.X {R : Type u} (x : right_lifting_subcat R) : R := x

lemma id_has_right_lifting_property' {F : D ‚Üí arrow C} (X : C) :
  ‚àÄ i : D, has_lifting_property (F i) (arrow.mk (ùüô X)) :=
Œª i, id_has_right_lifting_property (F i)

lemma has_right_lifting_property_comp'
  {F : D ‚Üí arrow C} {f : X ‚ü∂ Y} (hf : ‚àÄ i : D, has_lifting_property (F i) (arrow.mk f))
  {g : Y ‚ü∂ Z} (hg : ‚àÄ i : D, has_lifting_property (F i) (arrow.mk g)) :
  ‚àÄ i : D,  has_lifting_property (F i) (arrow.mk (f ‚â´ g)) :=
Œª i, has_right_lifting_property_comp (hf i) (hg i)

/-- Given a set of arrows in C, indexed by `F : D ‚Üí arrow C`,
we construct the (non-full) subcategory of `C`
spanned by those morphisms that have the right lifting property relative to all maps
of the form `F i`, where `i` is any element in `D`. -/
def right_lifting_subcategory (F : D ‚Üí arrow C) : category (right_lifting_subcat C) :=
{ hom := Œª X Y, { p : X ‚ü∂ Y // ‚àÄ {i : D}, has_lifting_property (F i) (arrow.mk p) },
  id := Œª X, ‚ü®ùüô X, id_has_right_lifting_property' X‚ü©,
  comp := Œª X Y Z f g, ‚ü®f.val ‚â´ g.val, has_right_lifting_property_comp' f.property g.property‚ü© }

end category_theory
