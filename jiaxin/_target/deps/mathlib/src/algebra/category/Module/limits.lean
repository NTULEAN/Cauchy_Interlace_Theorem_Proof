/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import algebra.category.Module.basic
import algebra.category.Group.limits
import algebra.direct_limit

/-!
# The category of R-modules has all limits

Further, these limits are preserved by the forgetful functor --- that is,
the underlying types are just the limits in the category of types.
-/

open category_theory
open category_theory.limits

universes u v

noncomputable theory

namespace Module

variables {R : Type u} [ring R]
variables {J : Type v} [small_category J]

instance add_comm_group_obj (F : J ‚•§ Module.{v} R) (j) :
  add_comm_group ((F ‚ãô forget (Module R)).obj j) :=
by { change add_comm_group (F.obj j), apply_instance }

instance module_obj (F : J ‚•§ Module.{v} R) (j) :
  module R ((F ‚ãô forget (Module R)).obj j) :=
by { change module R (F.obj j), apply_instance }

/--
The flat sections of a functor into `Module R` form a submodule of all sections.
-/
def sections_submodule (F : J ‚•§ Module R) :
  submodule R (Œ† j, F.obj j) :=
{ carrier := (F ‚ãô forget (Module R)).sections,
  smul_mem' := Œª r s sh j j' f,
  begin
    simp only [forget_map_eq_coe, functor.comp_map, pi.smul_apply, linear_map.map_smul],
    dsimp [functor.sections] at sh,
    rw sh f,
  end,
  ..(AddGroup.sections_add_subgroup
          (F ‚ãô forget‚ÇÇ (Module R) AddCommGroup.{v} ‚ãô forget‚ÇÇ AddCommGroup AddGroup.{v})) }

-- Adding the following instance speeds up `limit_module` noticeably,
-- by preventing a bad unfold of `limit_add_comm_group`.
instance limit_add_comm_monoid (F : J ‚•§ Module R) :
  add_comm_monoid (types.limit_cone (F ‚ãô forget (Module.{v} R))).X :=
show add_comm_monoid (sections_submodule F), by apply_instance

instance limit_add_comm_group (F : J ‚•§ Module R) :
  add_comm_group (types.limit_cone (F ‚ãô forget (Module.{v} R))).X :=
show add_comm_group (sections_submodule F), by apply_instance

instance limit_module (F : J ‚•§ Module R) :
  module R (types.limit_cone (F ‚ãô forget (Module.{v} R))).X :=
show module R (sections_submodule F), by apply_instance

/-- `limit.œÄ (F ‚ãô forget Ring) j` as a `ring_hom`. -/
def limit_œÄ_linear_map (F : J ‚•§ Module R) (j) :
  (types.limit_cone (F ‚ãô forget (Module.{v} R))).X ‚Üí‚Çó[R] (F ‚ãô forget (Module R)).obj j :=
{ to_fun := (types.limit_cone (F ‚ãô forget (Module R))).œÄ.app j,
  map_smul' := Œª x y, rfl,
  map_add' := Œª x y, rfl }

namespace has_limits
-- The next two definitions are used in the construction of `has_limits (Module R)`.
-- After that, the limits should be constructed using the generic limits API,
-- e.g. `limit F`, `limit.cone F`, and `limit.is_limit F`.

/--
Construction of a limit cone in `Module R`.
(Internal use only; use the limits API.)
-/
def limit_cone (F : J ‚•§ Module.{v} R) : cone F :=
{ X := Module.of R (types.limit_cone (F ‚ãô forget _)).X,
  œÄ :=
  { app := limit_œÄ_linear_map F,
    naturality' := Œª j j' f,
      linear_map.coe_injective ((types.limit_cone (F ‚ãô forget _)).œÄ.naturality f) } }

/--
Witness that the limit cone in `Module R` is a limit cone.
(Internal use only; use the limits API.)
-/
def limit_cone_is_limit (F : J ‚•§ Module R) : is_limit (limit_cone F) :=
by refine is_limit.of_faithful
      (forget (Module R)) (types.limit_cone_is_limit _)
      (Œª s, ‚ü®_, _, _‚ü©) (Œª s, rfl);
    intros;
    ext j;
    simp only [subtype.coe_mk, functor.map_cone_œÄ_app, forget_map_eq_coe,
         linear_map.map_add, linear_map.map_smul];
    refl

end has_limits

open has_limits

/-- The category of R-modules has all limits. -/
@[irreducible]
instance has_limits : has_limits (Module.{v} R) :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit.mk
    { cone     := limit_cone F,
      is_limit := limit_cone_is_limit F } } }

/--
An auxiliary declaration to speed up typechecking.
-/
def forget‚ÇÇ_AddCommGroup_preserves_limits_aux (F : J ‚•§ Module R) :
  is_limit ((forget‚ÇÇ (Module R) AddCommGroup).map_cone (limit_cone F)) :=
AddCommGroup.limit_cone_is_limit (F ‚ãô forget‚ÇÇ (Module R) AddCommGroup)

/--
The forgetful functor from R-modules to abelian groups preserves all limits.
-/
instance forget‚ÇÇ_AddCommGroup_preserves_limits :
  preserves_limits (forget‚ÇÇ (Module R) AddCommGroup.{v}) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª F, preserves_limit_of_preserves_limit_cone
      (limit_cone_is_limit F) (forget‚ÇÇ_AddCommGroup_preserves_limits_aux F) } }

/--
The forgetful functor from R-modules to types preserves all limits.
-/
instance forget_preserves_limits : preserves_limits (forget (Module R)) :=
{ preserves_limits_of_shape := Œª J ùí•, by exactI
  { preserves_limit := Œª F, preserves_limit_of_preserves_limit_cone
    (limit_cone_is_limit F) (types.limit_cone_is_limit (F ‚ãô forget _)) } }

section direct_limit
open module

variables {Œπ : Type v}
variables [dec_Œπ : decidable_eq Œπ] [preorder Œπ]
variables (G : Œπ ‚Üí Type v)
variables [Œ† i, add_comm_group (G i)] [Œ† i, module R (G i)]
variables (f : Œ† i j, i ‚â§ j ‚Üí G i ‚Üí‚Çó[R] G j) [directed_system G (Œª i j h, f i j h)]

/-- The diagram (in the sense of `category_theory`)
 of an unbundled `direct_limit` of modules. -/
@[simps]
def direct_limit_diagram : Œπ ‚•§ Module R :=
{ obj := Œª i, Module.of R (G i),
  map := Œª i j hij, f i j hij.le,
  map_id' := Œª i, by { apply linear_map.ext, intro x, apply module.directed_system.map_self },
  map_comp' := Œª i j k hij hjk,
  begin
    apply linear_map.ext,
    intro x,
    symmetry,
    apply module.directed_system.map_map
  end }

variables [decidable_eq Œπ]

/-- The `cocone` on `direct_limit_diagram` corresponding to
the unbundled `direct_limit` of modules.

In `direct_limit_is_colimit` we show that it is a colimit cocone. -/
@[simps]
def direct_limit_cocone : cocone (direct_limit_diagram G f) :=
{ X := Module.of R $ direct_limit G f,
  Œπ := { app := module.direct_limit.of R Œπ G f,
         naturality' := Œª i j hij, by { apply linear_map.ext, intro x, exact direct_limit.of_f } } }

/-- The unbundled `direct_limit` of modules is a colimit
in the sense of `category_theory`. -/
@[simps]
def direct_limit_is_colimit [nonempty Œπ] [is_directed Œπ (‚â§)] :
  is_colimit (direct_limit_cocone G f) :=
{ desc := Œª s, direct_limit.lift R Œπ G f s.Œπ.app $ Œª i j h x, by { rw [‚Üês.w (hom_of_le h)], refl },
  fac' := Œª s i,
  begin
    apply linear_map.ext,
    intro x,
    dsimp,
    exact direct_limit.lift_of s.Œπ.app _ x,
  end,
  uniq' := Œª s m h,
  begin
    have : s.Œπ.app = Œª i, linear_map.comp m (direct_limit.of R Œπ (Œª i, G i) (Œª i j H, f i j H) i),
    { funext i, rw ‚Üê h, refl },
    apply linear_map.ext,
    intro x,
    simp only [this],
    apply module.direct_limit.lift_unique
  end }

end direct_limit

end Module
