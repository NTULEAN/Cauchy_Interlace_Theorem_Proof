/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl
-/
import algebra.ring.prod
import ring_theory.ideal.quotient
import ring_theory.subring.basic
import topology.algebra.group

/-!

# Topological (semi)rings

A topological (semi)ring is a (semi)ring equipped with a topology such that all operations are
continuous. Besides this definition, this file proves that the topological closure of a subring
(resp. an ideal) is a subring (resp. an ideal) and defines products and quotients
of topological (semi)rings.

## Main Results

- `subring.topological_closure`/`subsemiring.topological_closure`: the topological closure of a
  `subring`/`subsemiring` is itself a `sub(semi)ring`.
- `prod.topological_ring`/`prod.topological_ring`: The product of two topological (semi)rings.
- `pi.topological_ring`/`pi.topological_ring`: The arbitrary product of topological (semi)rings.
- `ideal.closure`: The closure of an ideal is an ideal.
- `topological_ring_quotient`: The quotient of a topological ring by an ideal is a topological ring.

-/

open classical set filter topological_space function
open_locale classical topological_space filter

section topological_ring
variables (Œ± : Type*)

/-- A topological (semi)ring is a (semi)ring `R` where addition and multiplication are continuous.
If `R` is a ring, then negation is automatically continuous, as it is multiplication with `-1`. -/
class topological_ring [topological_space Œ±] [semiring Œ±]
  extends has_continuous_add Œ±, has_continuous_mul Œ± : Prop

@[priority 50]
instance discrete_topology.topological_ring {Œ±} [topological_space Œ±] [semiring Œ±]
  [discrete_topology Œ±] : topological_ring Œ± := ‚ü®‚ü©

section
variables {Œ±} [topological_space Œ±] [semiring Œ±] [topological_ring Œ±]

namespace subsemiring

instance (S : subsemiring Œ±) :
  topological_ring S :=
{ ..S.to_submonoid.has_continuous_mul,
  ..S.to_add_submonoid.has_continuous_add }

end subsemiring

/-- The (topological-space) closure of a subsemiring of a topological semiring is
itself a subsemiring. -/
def subsemiring.topological_closure (s : subsemiring Œ±) : subsemiring Œ± :=
{ carrier := closure (s : set Œ±),
  ..(s.to_submonoid.topological_closure),
  ..(s.to_add_submonoid.topological_closure ) }

@[simp] lemma subsemiring.topological_closure_coe (s : subsemiring Œ±) :
  (s.topological_closure : set Œ±) = closure (s : set Œ±) :=
rfl

instance subsemiring.topological_closure_topological_ring (s : subsemiring Œ±) :
  topological_ring (s.topological_closure) :=
{ ..s.to_add_submonoid.topological_closure_has_continuous_add,
  ..s.to_submonoid.topological_closure_has_continuous_mul }

lemma subsemiring.subring_topological_closure (s : subsemiring Œ±) :
  s ‚â§ s.topological_closure :=
subset_closure

lemma subsemiring.is_closed_topological_closure (s : subsemiring Œ±) :
  is_closed (s.topological_closure : set Œ±) :=
by convert is_closed_closure

lemma subsemiring.topological_closure_minimal
  (s : subsemiring Œ±) {t : subsemiring Œ±} (h : s ‚â§ t) (ht : is_closed (t : set Œ±)) :
  s.topological_closure ‚â§ t :=
closure_minimal h ht

/-- The product topology on the cartesian product of two topological semirings
  makes the product into a topological semiring. -/
instance {Œ≤ : Type*} [semiring Œ≤] [topological_space Œ≤] [topological_ring Œ≤] :
  topological_ring (Œ± √ó Œ≤) := {}

instance {Œ≤ : Type*} {C : Œ≤ ‚Üí Type*} [‚àÄ b, topological_space (C b)]
  [Œ† b, semiring (C b)] [Œ† b, topological_ring (C b)] : topological_ring (Œ† b, C b) := {}
end

section
variables {R : Type*} [ring R] [topological_space R]

lemma topological_ring.of_add_group_of_nhds_zero [topological_add_group R]
  (hmul : tendsto (uncurry ((*) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) $ ùìù 0)
  (hmul_left : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x‚ÇÄ * x) (ùìù 0) $ ùìù 0)
  (hmul_right : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x * x‚ÇÄ) (ùìù 0) $ ùìù 0) : topological_ring R :=
begin
  refine {..‚Äπtopological_add_group R‚Ä∫, ..},
  have hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (Œª x, x‚ÇÄ + x) (ùìù 0), by simp,
  have hadd : tendsto (uncurry ((+) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) (ùìù 0),
  { rw ‚Üê nhds_prod_eq,
    convert continuous_add.tendsto ((0 : R), (0 : R)),
    rw zero_add },
  rw continuous_iff_continuous_at,
  rintro ‚ü®x‚ÇÄ, y‚ÇÄ‚ü©,
  rw [continuous_at, nhds_prod_eq, hleft x‚ÇÄ, hleft y‚ÇÄ, hleft (x‚ÇÄ*y‚ÇÄ), filter.prod_map_map_eq,
      tendsto_map'_iff],
  suffices :
    tendsto ((Œª (x : R), x + x‚ÇÄ * y‚ÇÄ) ‚àò (Œª (p : R √ó R), p.1 + p.2) ‚àò
              (Œª (p : R √ó R), (p.1*y‚ÇÄ + x‚ÇÄ*p.2, p.1*p.2)))
            ((ùìù 0) √ó·∂† (ùìù 0)) (map (Œª (x : R), x + x‚ÇÄ * y‚ÇÄ) $ ùìù 0),
  { convert this using 1,
    { ext, simp only [comp_app, mul_add, add_mul], abel },
    { simp only [add_comm] } },
  refine tendsto_map.comp (hadd.comp (tendsto.prod_mk _ hmul)),
  exact hadd.comp (((hmul_right y‚ÇÄ).comp tendsto_fst).prod_mk ((hmul_left  x‚ÇÄ).comp tendsto_snd))
end

lemma topological_ring.of_nhds_zero
  (hadd : tendsto (uncurry ((+) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) $ ùìù 0)
  (hneg : tendsto (Œª x, -x : R ‚Üí R) (ùìù 0) (ùìù 0))
  (hmul : tendsto (uncurry ((*) : R ‚Üí R ‚Üí R)) ((ùìù 0) √ó·∂† (ùìù 0)) $ ùìù 0)
  (hmul_left : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x‚ÇÄ * x) (ùìù 0) $ ùìù 0)
  (hmul_right : ‚àÄ (x‚ÇÄ : R), tendsto (Œª x : R, x * x‚ÇÄ) (ùìù 0) $ ùìù 0)
  (hleft : ‚àÄ x‚ÇÄ : R, ùìù x‚ÇÄ = map (Œª x, x‚ÇÄ + x) (ùìù 0)) : topological_ring R :=
begin
  haveI := topological_add_group.of_comm_of_nhds_zero hadd hneg hleft,
  exact topological_ring.of_add_group_of_nhds_zero hmul hmul_left hmul_right
end

end

variables {Œ±} [ring Œ±] [topological_space Œ±] [topological_ring Œ±]

@[priority 100] -- See note [lower instance priority]
instance topological_ring.to_topological_add_group : topological_add_group Œ± :=
{ continuous_add := continuous_add,
  continuous_neg := by simpa only [neg_one_mul, id.def] using
    (@continuous_const Œ± Œ± _ _ (-1)).mul continuous_id }

/-- In a topological ring, the left-multiplication `add_monoid_hom` is continuous. -/
lemma mul_left_continuous (x : Œ±) : continuous (add_monoid_hom.mul_left x) :=
continuous_const.mul continuous_id

/-- In a topological ring, the right-multiplication `add_monoid_hom` is continuous. -/
lemma mul_right_continuous (x : Œ±) : continuous (add_monoid_hom.mul_right x) :=
continuous_id.mul continuous_const

namespace subring

instance (S : subring Œ±) :
  topological_ring S :=
S.to_subsemiring.topological_ring

end subring

/-- The (topological-space) closure of a subring of a topological semiring is
itself a subring. -/
def subring.topological_closure (S : subring Œ±) : subring Œ± :=
{ carrier := closure (S : set Œ±),
  ..S.to_submonoid.topological_closure,
  ..S.to_add_subgroup.topological_closure }

instance subring.topological_closure_topological_ring (s : subring Œ±) :
  topological_ring (s.topological_closure) :=
{ ..s.to_add_subgroup.topological_closure_topological_add_group,
  ..s.to_submonoid.topological_closure_has_continuous_mul }

lemma subring.subring_topological_closure (s : subring Œ±) :
  s ‚â§ s.topological_closure := subset_closure

lemma subring.is_closed_topological_closure (s : subring Œ±) :
  is_closed (s.topological_closure : set Œ±) := by convert is_closed_closure

lemma subring.topological_closure_minimal
  (s : subring Œ±) {t : subring Œ±} (h : s ‚â§ t) (ht : is_closed (t : set Œ±)) :
  s.topological_closure ‚â§ t := closure_minimal h ht

end topological_ring

section topological_comm_ring
variables {Œ± : Type*} [topological_space Œ±] [comm_ring Œ±] [topological_ring Œ±]

/-- The closure of an ideal in a topological ring as an ideal. -/
def ideal.closure (S : ideal Œ±) : ideal Œ± :=
{ carrier   := closure S,
  smul_mem' := Œª c x hx, map_mem_closure (mul_left_continuous _) hx $ Œª a, S.mul_mem_left c,
  ..(add_submonoid.topological_closure S.to_add_submonoid) }

@[simp] lemma ideal.coe_closure (S : ideal Œ±) : (S.closure : set Œ±) = closure S := rfl

end topological_comm_ring

section topological_ring
variables {Œ± : Type*} [topological_space Œ±] [comm_ring Œ±] (N : ideal Œ±)
open ideal.quotient

instance topological_ring_quotient_topology : topological_space (Œ± ‚ß∏ N) :=
show topological_space (quotient _), by apply_instance

-- note for the reader: in the following, `mk` is `ideal.quotient.mk`, the canonical map `R ‚Üí R/I`.

variable [topological_ring Œ±]

lemma quotient_ring.is_open_map_coe : is_open_map (mk N) :=
begin
  intros s s_op,
  change is_open (mk N ‚Åª¬π' (mk N '' s)),
  rw quotient_ring_saturate,
  exact is_open_Union (Œª ‚ü®n, _‚ü©, is_open_map_add_left n s s_op)
end

lemma quotient_ring.quotient_map_coe_coe : quotient_map (Œª p : Œ± √ó Œ±, (mk N p.1, mk N p.2)) :=
is_open_map.to_quotient_map
((quotient_ring.is_open_map_coe N).prod (quotient_ring.is_open_map_coe N))
((continuous_quot_mk.comp continuous_fst).prod_mk (continuous_quot_mk.comp continuous_snd))
(by rintro ‚ü®‚ü®x‚ü©, ‚ü®y‚ü©‚ü©; exact ‚ü®(x, y), rfl‚ü©)

instance topological_ring_quotient : topological_ring (Œ± ‚ß∏ N) :=
{ continuous_add :=
    have cont : continuous (mk N ‚àò (Œª (p : Œ± √ó Œ±), p.fst + p.snd)) :=
      continuous_quot_mk.comp continuous_add,
    (quotient_map.continuous_iff (quotient_ring.quotient_map_coe_coe N)).mpr cont,
  continuous_mul :=
    have cont : continuous (mk N ‚àò (Œª (p : Œ± √ó Œ±), p.fst * p.snd)) :=
      continuous_quot_mk.comp continuous_mul,
    (quotient_map.continuous_iff (quotient_ring.quotient_map_coe_coe N)).mpr cont }

end topological_ring

/-!
### Lattice of ring topologies
We define a type class `ring_topology Œ±` which endows a ring `Œ±` with a topology such that all ring
operations are continuous.

Ring topologies on a fixed ring `Œ±` are ordered, by reverse inclusion. They form a complete lattice,
with `‚ä•` the discrete topology and `‚ä§` the indiscrete topology.

Any function `f : Œ± ‚Üí Œ≤` induces `coinduced f : topological_space Œ± ‚Üí ring_topology Œ≤`. -/

universes u v

/-- A ring topology on a ring `Œ±` is a topology for which addition, negation and multiplication
are continuous. -/
@[ext]
structure ring_topology (Œ± : Type u) [ring Œ±]
  extends topological_space Œ±, topological_ring Œ± : Type u

namespace ring_topology
variables {Œ± : Type*} [ring Œ±]

instance inhabited {Œ± : Type u} [ring Œ±] : inhabited (ring_topology Œ±) :=
‚ü®{to_topological_space := ‚ä§,
  continuous_add       := continuous_top,
  continuous_mul       := continuous_top}‚ü©

@[ext]
lemma ext' {f g : ring_topology Œ±} (h : f.is_open = g.is_open) : f = g :=
by { ext, rw h }

/-- The ordering on ring topologies on the ring `Œ±`.
  `t ‚â§ s` if every set open in `s` is also open in `t` (`t` is finer than `s`). -/
instance : partial_order (ring_topology Œ±) :=
partial_order.lift ring_topology.to_topological_space $ ext

local notation `cont` := @continuous _ _

private def def_Inf (S : set (ring_topology Œ±)) : ring_topology Œ± :=
let Inf_S' := Inf (to_topological_space '' S) in
{ to_topological_space := Inf_S',
  continuous_add       :=
  begin
    apply continuous_Inf_rng,
    rintros _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©, resetI,
    have h := continuous_Inf_dom (set.mem_image_of_mem to_topological_space haS) continuous_id,
    have h_continuous_id := @continuous.prod_map _ _ _ _ t t Inf_S' Inf_S' _ _ h h,
    have h_continuous_add : cont (id _) t (Œª (p : Œ± √ó Œ±), p.fst + p.snd) := continuous_add,
    exact @continuous.comp _ _ _ (id _) (id _) t _ _ h_continuous_add h_continuous_id,
  end,
  continuous_mul       :=
  begin
    apply continuous_Inf_rng,
    rintros _ ‚ü®‚ü®t, tr‚ü©, haS, rfl‚ü©, resetI,
    have h := continuous_Inf_dom (set.mem_image_of_mem to_topological_space haS) continuous_id,
    have h_continuous_id := @continuous.prod_map _ _ _ _ t t Inf_S' Inf_S' _ _ h h,
    have h_continuous_mul : cont (id _) t (Œª (p : Œ± √ó Œ±), p.fst * p.snd) := continuous_mul,
    exact @continuous.comp _ _ _ (id _) (id _) t _ _ h_continuous_mul h_continuous_id,
  end }

/-- Ring topologies on `Œ±` form a complete lattice, with `‚ä•` the discrete topology and `‚ä§` the
indiscrete topology.

The infimum of a collection of ring topologies is the topology generated by all their open sets
(which is a ring topology).

The supremum of two ring topologies `s` and `t` is the infimum of the family of all ring topologies
contained in the intersection of `s` and `t`. -/
instance : complete_semilattice_Inf (ring_topology Œ±) :=
{ Inf    := def_Inf,
  Inf_le := Œª S a haS, by { apply topological_space.complete_lattice.Inf_le, use [a, ‚ü® haS, rfl‚ü©] },
  le_Inf :=
  begin
    intros S a hab,
    apply topological_space.complete_lattice.le_Inf,
    rintros _ ‚ü®b, hbS, rfl‚ü©,
    exact hab b hbS,
  end,
  ..ring_topology.partial_order }

instance : complete_lattice (ring_topology Œ±) :=
complete_lattice_of_complete_semilattice_Inf _

/--  Given `f : Œ± ‚Üí Œ≤` and a topology on `Œ±`, the coinduced ring topology on `Œ≤` is the finest
topology such that `f` is continuous and `Œ≤` is a topological ring. -/
def coinduced {Œ± Œ≤ : Type*} [t : topological_space Œ±] [ring Œ≤] (f : Œ± ‚Üí Œ≤) :
  ring_topology Œ≤ :=
Inf {b : ring_topology Œ≤ | (topological_space.coinduced f t) ‚â§ b.to_topological_space}

lemma coinduced_continuous {Œ± Œ≤ : Type*} [t : topological_space Œ±] [ring Œ≤] (f : Œ± ‚Üí Œ≤) :
  cont t (coinduced f).to_topological_space f :=
begin
  rw continuous_iff_coinduced_le,
  refine le_Inf _,
  rintros _ ‚ü®t', ht', rfl‚ü©,
  exact ht',
end

/-- The forgetful functor from ring topologies on `a` to additive group topologies on `a`. -/
def to_add_group_topology (t : ring_topology Œ±) : add_group_topology Œ± :=
{ to_topological_space     := t.to_topological_space,
  to_topological_add_group := @topological_ring.to_topological_add_group _ _ t.to_topological_space
    t.to_topological_ring }

/-- The order embedding from ring topologies on `a` to additive group topologies on `a`. -/
def to_add_group_topology.order_embedding : order_embedding (ring_topology Œ±)
  (add_group_topology Œ±) :=
{ to_fun       := Œª t, t.to_add_group_topology,
  inj'         :=
  begin
    intros t‚ÇÅ t‚ÇÇ h_eq,
    dsimp only at h_eq,
    ext,
    have h_t‚ÇÅ : t‚ÇÅ.to_topological_space = t‚ÇÅ.to_add_group_topology.to_topological_space := rfl,
    rw [h_t‚ÇÅ, h_eq],
    refl,
  end,
  map_rel_iff' :=
  begin
    intros t‚ÇÅ t‚ÇÇ,
    rw [embedding.coe_fn_mk],
    have h_le : t‚ÇÅ ‚â§ t‚ÇÇ ‚Üî t‚ÇÅ.to_topological_space ‚â§ t‚ÇÇ.to_topological_space := by refl,
    rw h_le,
    refl,
  end }

end ring_topology
