/-
Copyright (c) 2021 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import topology.continuous_function.bounded
import topology.uniform_space.compact_separated

/-!
# Continuous functions on a compact space

Continuous functions `C(Œ±, Œ≤)` from a compact space `Œ±` to a metric space `Œ≤`
are automatically bounded, and so acquire various structures inherited from `Œ± ‚Üí·µá Œ≤`.

This file transfers these structures, and restates some lemmas
characterising these structures.

If you need a lemma which is proved about `Œ± ‚Üí·µá Œ≤` but not for `C(Œ±, Œ≤)` when `Œ±` is compact,
you should restate it here. You can also use
`bounded_continuous_function.equiv_continuous_map_of_compact` to move functions back and forth.

-/

noncomputable theory
open_locale topological_space classical nnreal bounded_continuous_function

open set filter metric

open bounded_continuous_function

namespace continuous_map

variables {Œ± Œ≤ E : Type*} [topological_space Œ±] [compact_space Œ±] [metric_space Œ≤] [normed_group E]

section

variables (Œ± Œ≤)

/--
When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
equivalent to `C(Œ±, Œ≤)`.
-/
@[simps { fully_applied := ff }]
def equiv_bounded_of_compact : C(Œ±, Œ≤) ‚âÉ (Œ± ‚Üí·µá Œ≤) :=
‚ü®mk_of_compact, to_continuous_map, Œª f, by { ext, refl, }, Œª f, by { ext, refl, }‚ü©

lemma uniform_inducing_equiv_bounded_of_compact :
  uniform_inducing (equiv_bounded_of_compact Œ± Œ≤) :=
uniform_inducing.mk'
begin
  simp only [has_basis_compact_convergence_uniformity.mem_iff, uniformity_basis_dist_le.mem_iff],
  exact Œª s, ‚ü®Œª ‚ü®‚ü®a, b‚ü©, ‚ü®ha, ‚ü®Œµ, hŒµ, hb‚ü©‚ü©, hs‚ü©, ‚ü®{p | ‚àÄ x, (p.1 x, p.2 x) ‚àà b},
    ‚ü®Œµ, hŒµ, Œª _ h x, hb (by exact (dist_le hŒµ.le).mp h x)‚ü©, Œª f g h, hs (by exact Œª x hx, h x)‚ü©,
    Œª ‚ü®t, ‚ü®Œµ, hŒµ, ht‚ü©, hs‚ü©, ‚ü®‚ü®set.univ, {p | dist p.1 p.2 ‚â§ Œµ}‚ü©, ‚ü®compact_univ, ‚ü®Œµ, hŒµ, Œª _ h, h‚ü©‚ü©,
    Œª ‚ü®f, g‚ü© h, hs _ _ (ht (by exact (dist_le hŒµ.le).mpr (Œª x, h x (mem_univ x))))‚ü©‚ü©,
end

lemma uniform_embedding_equiv_bounded_of_compact :
  uniform_embedding (equiv_bounded_of_compact Œ± Œ≤) :=
{ inj := (equiv_bounded_of_compact Œ± Œ≤).injective,
  .. uniform_inducing_equiv_bounded_of_compact Œ± Œ≤ }

/--
When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá ùïú` are
additively equivalent to `C(Œ±, ùïú)`.
-/
@[simps apply symm_apply { fully_applied := ff }]
def add_equiv_bounded_of_compact [add_monoid Œ≤] [has_lipschitz_add Œ≤] :
  C(Œ±, Œ≤) ‚âÉ+ (Œ± ‚Üí·µá Œ≤) :=
({ .. to_continuous_map_add_hom Œ± Œ≤,
   .. (equiv_bounded_of_compact Œ± Œ≤).symm, } : (Œ± ‚Üí·µá Œ≤) ‚âÉ+ C(Œ±, Œ≤)).symm

instance : metric_space C(Œ±, Œ≤) :=
(uniform_embedding_equiv_bounded_of_compact Œ± Œ≤).comap_metric_space _

/--
When `Œ±` is compact, and `Œ≤` is a metric space, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
isometric to `C(Œ±, Œ≤)`.
-/
@[simps to_equiv apply symm_apply { fully_applied := ff }]
def isometric_bounded_of_compact :
  C(Œ±, Œ≤) ‚âÉ·µ¢ (Œ± ‚Üí·µá Œ≤) :=
{ isometry_to_fun := Œª x y, rfl,
  to_equiv := equiv_bounded_of_compact Œ± Œ≤ }

end

@[simp] lemma _root_.bounded_continuous_function.dist_mk_of_compact (f g : C(Œ±, Œ≤)) :
  dist (mk_of_compact f) (mk_of_compact g) = dist f g := rfl

@[simp] lemma _root_.bounded_continuous_function.dist_to_continuous_map (f g : Œ± ‚Üí·µá Œ≤) :
  dist (f.to_continuous_map) (g.to_continuous_map) = dist f g := rfl

open bounded_continuous_function

section
variables {Œ± Œ≤} {f g : C(Œ±, Œ≤)} {C : ‚Ñù}

/-- The pointwise distance is controlled by the distance between functions, by definition. -/
lemma dist_apply_le_dist (x : Œ±) : dist (f x) (g x) ‚â§ dist f g :=
by simp only [‚Üê dist_mk_of_compact, dist_coe_le_dist, ‚Üê mk_of_compact_apply]

/-- The distance between two functions is controlled by the supremum of the pointwise distances -/
lemma dist_le (C0 : (0 : ‚Ñù) ‚â§ C) : dist f g ‚â§ C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) ‚â§ C :=
by simp only [‚Üê dist_mk_of_compact, dist_le C0, mk_of_compact_apply]

lemma dist_le_iff_of_nonempty [nonempty Œ±] :
  dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C :=
by simp only [‚Üê dist_mk_of_compact, dist_le_iff_of_nonempty, mk_of_compact_apply]

lemma dist_lt_iff_of_nonempty [nonempty Œ±] :
  dist f g < C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) < C :=
by simp only [‚Üê dist_mk_of_compact, dist_lt_iff_of_nonempty_compact, mk_of_compact_apply]

lemma dist_lt_of_nonempty [nonempty Œ±] (w : ‚àÄx:Œ±, dist (f x) (g x) < C) : dist f g < C :=
(dist_lt_iff_of_nonempty).2 w

lemma dist_lt_iff (C0 : (0 : ‚Ñù) < C) :
  dist f g < C ‚Üî ‚àÄx:Œ±, dist (f x) (g x) < C :=
by simp only [‚Üê dist_mk_of_compact, dist_lt_iff_of_compact C0, mk_of_compact_apply]

end

instance [complete_space Œ≤] : complete_space (C(Œ±, Œ≤)) :=
(isometric_bounded_of_compact Œ± Œ≤).complete_space

@[continuity] lemma continuous_eval : continuous (Œª p : C(Œ±, Œ≤) √ó Œ±, p.1 p.2) :=
continuous_eval.comp ((isometric_bounded_of_compact Œ± Œ≤).continuous.prod_map continuous_id)

@[continuity] lemma continuous_evalx (x : Œ±) : continuous (Œª f : C(Œ±, Œ≤), f x) :=
continuous_eval.comp (continuous_id.prod_mk continuous_const)

lemma continuous_coe : @continuous (C(Œ±, Œ≤)) (Œ± ‚Üí Œ≤) _ _ coe_fn :=
continuous_pi continuous_evalx

-- TODO at some point we will need lemmas characterising this norm!
-- At the moment the only way to reason about it is to transfer `f : C(Œ±,E)` back to `Œ± ‚Üí·µá E`.
instance : has_norm C(Œ±, E) :=
{ norm := Œª x, dist x 0 }

@[simp] lemma _root_.bounded_continuous_function.norm_mk_of_compact (f : C(Œ±, E)) :
  ‚à•mk_of_compact f‚à• = ‚à•f‚à• := rfl

@[simp] lemma _root_.bounded_continuous_function.norm_to_continuous_map_eq (f : Œ± ‚Üí·µá E) :
  ‚à•f.to_continuous_map‚à• = ‚à•f‚à• :=
rfl

open bounded_continuous_function

instance : normed_group C(Œ±, E) :=
{ dist_eq := Œª x y,
  begin
    rw [‚Üê norm_mk_of_compact, ‚Üê dist_mk_of_compact, dist_eq_norm],
    congr' 1,
    exact ((add_equiv_bounded_of_compact Œ± E).map_sub _ _).symm
  end, }

section
variables (f : C(Œ±, E))
-- The corresponding lemmas for `bounded_continuous_function` are stated with `{f}`,
-- and so can not be used in dot notation.

lemma norm_coe_le_norm (x : Œ±) : ‚à•f x‚à• ‚â§ ‚à•f‚à• :=
(mk_of_compact f).norm_coe_le_norm x

/-- Distance between the images of any two points is at most twice the norm of the function. -/
lemma dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2 * ‚à•f‚à• :=
(mk_of_compact f).dist_le_two_norm x y

/-- The norm of a function is controlled by the supremum of the pointwise norms -/
lemma norm_le {C : ‚Ñù} (C0 : (0 : ‚Ñù) ‚â§ C) : ‚à•f‚à• ‚â§ C ‚Üî ‚àÄx:Œ±, ‚à•f x‚à• ‚â§ C :=
@bounded_continuous_function.norm_le _ _ _ _
  (mk_of_compact f) _ C0

lemma norm_le_of_nonempty [nonempty Œ±] {M : ‚Ñù} : ‚à•f‚à• ‚â§ M ‚Üî ‚àÄ x, ‚à•f x‚à• ‚â§ M :=
@bounded_continuous_function.norm_le_of_nonempty _ _ _ _ _ (mk_of_compact f) _

lemma norm_lt_iff {M : ‚Ñù} (M0 : 0 < M) : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
@bounded_continuous_function.norm_lt_iff_of_compact _ _ _ _ _ (mk_of_compact f) _ M0

lemma norm_lt_iff_of_nonempty [nonempty Œ±] {M : ‚Ñù} :
  ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
@bounded_continuous_function.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _ (mk_of_compact f) _

lemma apply_le_norm (f : C(Œ±, ‚Ñù)) (x : Œ±) : f x ‚â§ ‚à•f‚à• :=
le_trans (le_abs.mpr (or.inl (le_refl (f x)))) (f.norm_coe_le_norm x)

lemma neg_norm_le_apply (f : C(Œ±, ‚Ñù)) (x : Œ±) : -‚à•f‚à• ‚â§ f x :=
le_trans (neg_le_neg (f.norm_coe_le_norm x)) (neg_le.mp (neg_le_abs_self (f x)))

lemma norm_eq_supr_norm : ‚à•f‚à• = ‚®Ü x : Œ±, ‚à•f x‚à• :=
(mk_of_compact f).norm_eq_supr_norm

end

section
variables {R : Type*} [normed_ring R]

instance : normed_ring C(Œ±,R) :=
{ norm_mul := Œª f g, norm_mul_le (mk_of_compact f) (mk_of_compact g),
  ..(infer_instance : normed_group C(Œ±,R)) }

end

section
variables {ùïú : Type*} [normed_field ùïú] [normed_space ùïú E]

instance : normed_space ùïú C(Œ±,E) :=
{ norm_smul_le := Œª c f, le_of_eq (norm_smul c (mk_of_compact f)) }

section
variables (Œ± ùïú E)

/--
When `Œ±` is compact and `ùïú` is a normed field,
the `ùïú`-algebra of bounded continuous maps `Œ± ‚Üí·µá Œ≤` is
`ùïú`-linearly isometric to `C(Œ±, Œ≤)`.
-/
def linear_isometry_bounded_of_compact :
  C(Œ±, E) ‚âÉ‚Çó·µ¢[ùïú] (Œ± ‚Üí·µá E) :=
{ map_smul' := Œª c f, by { ext, simp, },
  norm_map' := Œª f, rfl,
  .. add_equiv_bounded_of_compact Œ± E }

end

-- this lemma and the next are the analogues of those autogenerated by `@[simps]` for
-- `equiv_bounded_of_compact`, `add_equiv_bounded_of_compact`
@[simp] lemma linear_isometry_bounded_of_compact_symm_apply (f : Œ± ‚Üí·µá E) :
  (linear_isometry_bounded_of_compact Œ± E ùïú).symm f = f.to_continuous_map :=
rfl

@[simp] lemma linear_isometry_bounded_of_compact_apply_apply (f : C(Œ±, E)) (a : Œ±) :
  (linear_isometry_bounded_of_compact Œ± E ùïú f) a = f a :=
rfl


@[simp]
lemma linear_isometry_bounded_of_compact_to_isometric :
  (linear_isometry_bounded_of_compact Œ± E ùïú).to_isometric = (isometric_bounded_of_compact Œ± E) :=
rfl

@[simp]
lemma linear_isometry_bounded_of_compact_to_add_equiv :
  (linear_isometry_bounded_of_compact Œ± E ùïú).to_linear_equiv.to_add_equiv =
    (add_equiv_bounded_of_compact Œ± E) :=
rfl

@[simp]
lemma linear_isometry_bounded_of_compact_of_compact_to_equiv :
  (linear_isometry_bounded_of_compact Œ± E ùïú).to_linear_equiv.to_equiv =
    (equiv_bounded_of_compact Œ± E) :=
rfl

end

section
variables {ùïú : Type*} {Œ≥ : Type*} [normed_field ùïú] [normed_ring Œ≥] [normed_algebra ùïú Œ≥]

instance [nonempty Œ±] : normed_algebra ùïú C(Œ±, Œ≥) :=
{ norm_algebra_map_eq := Œª c, (norm_algebra_map_eq (Œ± ‚Üí·µá Œ≥) c : _), }

end

end continuous_map

namespace continuous_map

section uniform_continuity
variables {Œ± Œ≤ : Type*}
variables [metric_space Œ±] [compact_space Œ±] [metric_space Œ≤]

/-!
We now set up some declarations making it convenient to use uniform continuity.
-/

lemma uniform_continuity
  (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) :
  ‚àÉ Œ¥ > 0, ‚àÄ {x y}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ :=
metric.uniform_continuous_iff.mp
  (compact_space.uniform_continuous_of_continuous f.continuous) Œµ h

/--
An arbitrarily chosen modulus of uniform continuity for a given function `f` and `Œµ > 0`.
-/
-- This definition allows us to separate the choice of some `Œ¥`,
-- and the corresponding use of `dist a b < Œ¥ ‚Üí dist (f a) (f b) < Œµ`,
-- even across different declarations.
def modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) : ‚Ñù :=
classical.some (uniform_continuity f Œµ h)

lemma modulus_pos (f : C(Œ±, Œ≤)) {Œµ : ‚Ñù} {h : 0 < Œµ} : 0 < f.modulus Œµ h :=
(classical.some_spec (uniform_continuity f Œµ h)).fst

lemma dist_lt_of_dist_lt_modulus
  (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) {a b : Œ±} (w : dist a b < f.modulus Œµ h) :
  dist (f a) (f b) < Œµ :=
(classical.some_spec (uniform_continuity f Œµ h)).snd w

end uniform_continuity

end continuous_map

section comp_left
variables (X : Type*) {ùïú Œ≤ Œ≥ : Type*} [topological_space X] [compact_space X]
  [nondiscrete_normed_field ùïú]
variables [normed_group Œ≤] [normed_space ùïú Œ≤] [normed_group Œ≥] [normed_space ùïú Œ≥]

open continuous_map

/--
Postcomposition of continuous functions into a normed module by a continuous linear map is a
continuous linear map.
Transferred version of `continuous_linear_map.comp_left_continuous_bounded`,
upgraded version of `continuous_linear_map.comp_left_continuous`,
similar to `linear_map.comp_left`. -/
protected def continuous_linear_map.comp_left_continuous_compact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
  C(X, Œ≤) ‚ÜíL[ùïú] C(X, Œ≥) :=
(linear_isometry_bounded_of_compact X Œ≥ ùïú).symm.to_linear_isometry.to_continuous_linear_map.comp $
(g.comp_left_continuous_bounded X).comp $
(linear_isometry_bounded_of_compact X Œ≤ ùïú).to_linear_isometry.to_continuous_linear_map

@[simp] lemma continuous_linear_map.to_linear_comp_left_continuous_compact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
  (g.comp_left_continuous_compact X : C(X, Œ≤) ‚Üí‚Çó[ùïú] C(X, Œ≥)) = g.comp_left_continuous ùïú X :=
by { ext f, refl }

@[simp] lemma continuous_linear_map.comp_left_continuous_compact_apply (g : Œ≤ ‚ÜíL[ùïú] Œ≥)
  (f : C(X, Œ≤)) (x : X) :
  g.comp_left_continuous_compact X f x = g (f x) :=
rfl

end comp_left

namespace continuous_map
/-!
We now setup variations on `comp_right_* f`, where `f : C(X, Y)`
(that is, precomposition by a continuous map),
as a morphism `C(Y, T) ‚Üí C(X, T)`, respecting various types of structure.

In particular:
* `comp_right_continuous_map`, the bundled continuous map (for this we need `X Y` compact).
* `comp_right_homeomorph`, when we precompose by a homeomorphism.
* `comp_right_alg_hom`, when `T = R` is a topological ring.
-/
section comp_right

/--
Precomposition by a continuous map is itself a continuous map between spaces of continuous maps.
-/
def comp_right_continuous_map {X Y : Type*} (T : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y] [normed_group T]
  (f : C(X, Y)) : C(C(Y, T), C(X, T)) :=
{ to_fun := Œª g, g.comp f,
  continuous_to_fun :=
  begin
    refine metric.continuous_iff.mpr _,
    intros g Œµ Œµ_pos,
    refine ‚ü®Œµ, Œµ_pos, Œª g' h, _‚ü©,
    rw continuous_map.dist_lt_iff Œµ_pos at h ‚ä¢,
    { exact Œª x, h (f x), },
  end }

@[simp] lemma comp_right_continuous_map_apply {X Y : Type*} (T : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y] [normed_group T]
  (f : C(X, Y)) (g : C(Y, T)) :
  (comp_right_continuous_map T f) g = g.comp f :=
rfl

/--
Precomposition by a homeomorphism is itself a homeomorphism between spaces of continuous maps.
-/
def comp_right_homeomorph {X Y : Type*} (T : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y] [normed_group T]
  (f : X ‚âÉ‚Çú Y) : C(Y, T) ‚âÉ‚Çú C(X, T) :=
{ to_fun := comp_right_continuous_map T f.to_continuous_map,
  inv_fun := comp_right_continuous_map T f.symm.to_continuous_map,
  left_inv := by tidy,
  right_inv := by tidy, }

/--
Precomposition of functions into a normed ring by continuous map is an algebra homomorphism.
-/
def comp_right_alg_hom {X Y : Type*} (R : Type*)
  [topological_space X] [topological_space Y] [normed_comm_ring R] (f : C(X, Y)) :
  C(Y, R) ‚Üí‚Çê[R] C(X, R) :=
{ to_fun := Œª g, g.comp f,
  map_zero' := by { ext, simp, },
  map_add' := Œª g‚ÇÅ g‚ÇÇ, by { ext, simp, },
  map_one' := by { ext, simp, },
  map_mul' := Œª g‚ÇÅ g‚ÇÇ, by { ext, simp, },
  commutes' := Œª r, by { ext, simp, }, }

@[simp] lemma comp_right_alg_hom_apply {X Y : Type*} (R : Type*)
  [topological_space X] [topological_space Y] [normed_comm_ring R] (f : C(X, Y)) (g : C(Y, R)) :
  (comp_right_alg_hom R f) g = g.comp f :=
rfl

lemma comp_right_alg_hom_continuous {X Y : Type*} (R : Type*)
  [topological_space X] [compact_space X] [topological_space Y] [compact_space Y]
  [normed_comm_ring R] (f : C(X, Y)) :
  continuous (comp_right_alg_hom R f) :=
begin
  change continuous (comp_right_continuous_map R f),
  continuity,
end

end comp_right

end continuous_map
