/-
Copyright (c) 2020 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/

import category_theory.monad.types
import category_theory.monad.limits
import category_theory.equivalence
import topology.category.CompHaus
import topology.category.Profinite
import data.set.constructions

/-!

# Compacta and Compact Hausdorff Spaces

Recall that, given a monad `M` on `Type*`, an *algebra* for `M` consists of the following data:
- A type `X : Type*`
- A "structure" map `M X ‚Üí X`.
This data must also satisfy a distributivity and unit axiom, and algebras for `M` form a category
in an evident way.

See the file `category_theory.monad.algebra` for a general version, as well as the following link.
https://ncatlab.org/nlab/show/monad

This file proves the equivalence between the category of *compact Hausdorff topological spaces*
and the category of algebras for the *ultrafilter monad*.

## Notation:

Here are the main objects introduced in this file.
- `Compactum` is the type of compacta, which we define as algebras for the ultrafilter monad.
- `Compactum_to_CompHaus` is the functor `Compactum ‚•§ CompHaus`. Here `CompHaus` is the usual
  category of compact Hausdorff spaces.
- `Compactum_to_CompHaus.is_equivalence` is a term of type `is_equivalence Compactum_to_CompHaus`.

The proof of this equivalence is a bit technical. But the idea is quite simply that the structure
map `ultrafilter X ‚Üí X` for an algebra `X` of the ultrafilter monad should be considered as the map
sending an ultrafilter to its limit in `X`. The topology on `X` is then defined by mimicking the
characterization of open sets in terms of ultrafilters.

Any `X : Compactum` is endowed with a coercion to `Type*`, as well as the following instances:
- `topological_space X`.
- `compact_space X`.
- `t2_space X`.

Any morphism `f : X ‚ü∂ Y` of is endowed with a coercion to a function `X ‚Üí Y`, which is shown to
be continuous in `continuous_of_hom`.

The function `Compactum.of_topological_space` can be used to construct a `Compactum` from a
topological space which satisfies `compact_space` and `t2_space`.

We also add wrappers around structures which already exist. Here are the main ones, all in the
`Compactum` namespace:

- `forget : Compactum ‚•§ Type*` is the forgetful functor, which induces a `concrete_category`
  instance for `Compactum`.
- `free : Type* ‚•§ Compactum` is the left adjoint to `forget`, and the adjunction is in `adj`.
- `str : ultrafilter X ‚Üí X` is the structure map for `X : Compactum`.
  The notation `X.str` is preferred.
- `join : ultrafilter (ultrafilter X) ‚Üí ultrafilter X` is the monadic join for `X : Compactum`.
  Again, the notation `X.join` is preferred.
- `incl : X ‚Üí ultrafilter X` is the unit for `X : Compactum`. The notation `X.incl` is preferred.

## References

- E. Manes, Algebraic Theories, Graduate Texts in Mathematics 26, Springer-Verlag, 1976.
- https://ncatlab.org/nlab/show/ultrafilter

-/

universe u
open category_theory filter ultrafilter topological_space category_theory.limits has_finite_inter
open_locale classical topological_space

local notation `Œ≤` := of_type_monad ultrafilter

/-- The type `Compactum` of Compacta, defined as algebras for the ultrafilter monad. -/
@[derive [category, inhabited]]
def Compactum := monad.algebra Œ≤

namespace Compactum

/-- The forgetful functor to Type* -/
@[derive [creates_limits,faithful]]
def forget : Compactum ‚•§ Type* := monad.forget _

/-- The "free" Compactum functor. -/
def free : Type* ‚•§ Compactum := monad.free _

/-- The adjunction between `free` and `forget`. -/
def adj : free ‚ä£ forget := monad.adj _

-- Basic instances
instance : concrete_category Compactum := { forget := forget }
instance : has_coe_to_sort Compactum Type* := ‚ü®forget.obj‚ü©
instance {X Y : Compactum} : has_coe_to_fun (X ‚ü∂ Y) (Œª f, X ‚Üí Y) := ‚ü®Œª f, f.f‚ü©
instance : has_limits Compactum := has_limits_of_has_limits_creates_limits forget

/-- The structure map for a compactum, essentially sending an ultrafilter to its limit. -/
def str (X : Compactum) : ultrafilter X ‚Üí X := X.a

/-- The monadic join. -/
def join (X : Compactum) : ultrafilter (ultrafilter X) ‚Üí ultrafilter X := Œ≤ .Œº.app _

/-- The inclusion of `X` into `ultrafilter X`. -/
def incl (X : Compactum) : X ‚Üí ultrafilter X := Œ≤ .Œ∑.app _

@[simp] lemma str_incl (X : Compactum) (x : X) : X.str (X.incl x) = x :=
begin
  change (Œ≤ .Œ∑.app _ ‚â´ X.a) _ = _,
  rw monad.algebra.unit,
  refl,
end

@[simp] lemma str_hom_commute (X Y : Compactum) (f : X ‚ü∂ Y) (xs : ultrafilter X) :
  f (X.str xs) = Y.str (map f xs) :=
begin
  change (X.a ‚â´ f.f) _ = _,
  rw ‚Üêf.h,
  refl,
end

@[simp] lemma join_distrib (X : Compactum) (uux : ultrafilter (ultrafilter X)) :
  X.str (X.join uux) = X.str (map X.str uux) :=
begin
  change (Œ≤ .Œº.app _ ‚â´ X.a) _ = _,
  rw monad.algebra.assoc,
  refl,
end

instance {X : Compactum} : topological_space X :=
{ is_open := Œª U, ‚àÄ (F : ultrafilter X), X.str F ‚àà U ‚Üí U ‚àà F,
  is_open_univ := Œª _ _, filter.univ_sets _,
  is_open_inter := Œª S T h3 h4 h5 h6,
    filter.inter_sets _ (h3 _ h6.1) (h4 _ h6.2),
  is_open_sUnion := Œª S h1 F ‚ü®T,hT,h2‚ü©,
    mem_of_superset (h1 T hT _ h2) (set.subset_sUnion_of_mem hT) }

theorem is_closed_iff {X : Compactum} (S : set X) : is_closed S ‚Üî
  (‚àÄ F : ultrafilter X, S ‚àà F ‚Üí X.str F ‚àà S) :=
begin
  rw ‚Üê is_open_compl_iff,
  split,
  { intros cond F h,
    by_contradiction c,
    specialize cond F c,
    rw compl_mem_iff_not_mem at cond,
    contradiction },
  { intros h1 F h2,
    specialize h1 F,
    cases F.mem_or_compl_mem S, exacts [absurd (h1 h) h2, h] }
end

instance {X : Compactum} : compact_space X :=
begin
  constructor,
  rw is_compact_iff_ultrafilter_le_nhds,
  intros F h,
  refine ‚ü®X.str F, by tauto, _‚ü©,
  rw le_nhds_iff,
  intros S h1 h2,
  exact h2 F h1
end

/-- A local definition used only in the proofs. -/
private def basic {X : Compactum} (A : set X) : set (ultrafilter X) := {F | A ‚àà F}
/-- A local definition used only in the proofs. -/
private def cl {X : Compactum} (A : set X) : set X := X.str '' (basic A)

private lemma basic_inter {X : Compactum} (A B : set X) : basic (A ‚à© B) = basic A ‚à© basic B :=
begin
  ext G,
  split,
  { intro hG,
    split; filter_upwards [hG] with _,
    exacts [and.left, and.right] },
  { rintros ‚ü®h1, h2‚ü©,
    exact inter_mem h1 h2 }
end

private lemma subset_cl {X : Compactum} (A : set X) : A ‚äÜ cl A := Œª a ha, ‚ü®X.incl a, ha,by simp‚ü©

private theorem cl_cl {X : Compactum} (A : set X) : cl (cl A) ‚äÜ cl A :=
begin
  rintros _ ‚ü®F,hF,rfl‚ü©,
  -- Notation to be used in this proof.
  let fsu := finset (set (ultrafilter X)),
  let ssu := set (set (ultrafilter X)),
  let Œπ : fsu ‚Üí ssu := coe,
  let C0 : ssu := {Z | ‚àÉ B ‚àà F, X.str ‚Åª¬π' B = Z},
  let AA := {G : ultrafilter X | A ‚àà G},
  let C1 := insert AA C0,
  let C2 := finite_inter_closure C1,
  -- C0 is closed under intersections.
  have claim1 : ‚àÄ B C ‚àà C0, B ‚à© C ‚àà C0,
  { rintros B ‚ü®Q,hQ,rfl‚ü© C ‚ü®R,hR,rfl‚ü©,
    use Q ‚à© R,
    simp only [and_true, eq_self_iff_true, set.preimage_inter, subtype.val_eq_coe],
    exact inter_sets _ hQ hR },
  -- All sets in C0 are nonempty.
  have claim2 : ‚àÄ B ‚àà C0, set.nonempty B,
  { rintros B ‚ü®Q,hQ,rfl‚ü©,
    obtain ‚ü®q‚ü© := filter.nonempty_of_mem hQ,
    use X.incl q,
    simpa, },
  -- The intersection of AA with every set in C0 is nonempty.
  have claim3 : ‚àÄ B ‚àà C0, (AA ‚à© B).nonempty,
  { rintros B ‚ü®Q,hQ,rfl‚ü©,
    have : (Q ‚à© cl A).nonempty :=
      filter.nonempty_of_mem (inter_mem hQ hF),
    rcases this with ‚ü®q,hq1,P,hq2,hq3‚ü©,
    refine ‚ü®P,hq2,_‚ü©,
    rw ‚Üêhq3 at hq1,
    simpa },
  -- Suffices to show that the intersection of any finite subcollection of C1 is nonempty.
  suffices : ‚àÄ (T : fsu), Œπ T ‚äÜ C1 ‚Üí (‚ãÇ‚ÇÄ Œπ T).nonempty,
  { obtain ‚ü®G, h1‚ü© := exists_ultrafilter_of_finite_inter_nonempty _ this,
    use X.join G,
    have : G.map X.str = F :=
      ultrafilter.coe_le_coe.1 (Œª S hS, h1 (or.inr ‚ü®S, hS, rfl‚ü©)),
    rw [join_distrib, this],
    exact ‚ü®h1 (or.inl rfl), rfl‚ü© },
  -- C2 is closed under finite intersections (by construction!).
  have claim4 := finite_inter_closure_has_finite_inter C1,
  -- C0 is closed under finite intersections by claim1.
  have claim5 : has_finite_inter C0 :=
    ‚ü®‚ü®_, univ_mem, set.preimage_univ‚ü©, claim1‚ü©,
  -- Every element of C2 is nonempty.
  have claim6 : ‚àÄ P ‚àà C2, (P : set (ultrafilter X)).nonempty,
  { suffices : ‚àÄ P ‚àà C2, P ‚àà C0 ‚à® ‚àÉ Q ‚àà C0, P = AA ‚à© Q,
    { intros P hP,
      cases this P hP,
      { exact claim2 _ h },
      { rcases h with ‚ü®Q, hQ, rfl‚ü©,
        exact claim3 _ hQ } },
    intros P hP,
    exact claim5.finite_inter_closure_insert _ hP },
  intros T hT,
  -- Suffices to show that the intersection of the T's is contained in C2.
  suffices : ‚ãÇ‚ÇÄ Œπ T ‚àà C2, by exact claim6 _ this,
  -- Finish
  apply claim4.finite_inter_mem,
  intros t ht,
  exact finite_inter_closure.basic (@hT t ht),
end

lemma is_closed_cl {X : Compactum} (A : set X) : is_closed (cl A) :=
begin
  rw is_closed_iff,
  intros F hF,
  exact cl_cl _ ‚ü®F, hF, rfl‚ü©,
end

lemma str_eq_of_le_nhds {X : Compactum} (F : ultrafilter X) (x : X) :
  ‚ÜëF ‚â§ ùìù x ‚Üí X.str F = x :=
begin
  -- Notation to be used in this proof.
  let fsu := finset (set (ultrafilter X)),
  let ssu := set (set (ultrafilter X)),
  let Œπ : fsu ‚Üí ssu := coe,
  let T0 : ssu := { S | ‚àÉ A ‚àà F, S = basic A },
  let AA := (X.str ‚Åª¬π' {x}),
  let T1 := insert AA T0,
  let T2 := finite_inter_closure T1,
  intro cond,
  -- If F contains a closed set A, then x is contained in A.
  have claim1 : ‚àÄ (A : set X), is_closed A ‚Üí A ‚àà F ‚Üí x ‚àà A,
  { intros A hA h,
    by_contradiction H,
    rw le_nhds_iff at cond,
    specialize cond A·∂ú H hA.is_open_compl,
    rw [ultrafilter.mem_coe, ultrafilter.compl_mem_iff_not_mem] at cond,
    contradiction },
  -- If A ‚àà F, then x ‚àà cl A.
  have claim2 : ‚àÄ (A : set X), A ‚àà F ‚Üí x ‚àà cl A,
  { intros A hA,
    exact claim1 (cl A) (is_closed_cl A) (mem_of_superset hA (subset_cl A)) },
  -- T0 is closed under intersections.
  have claim3 : ‚àÄ (S1 S2 ‚àà T0), S1 ‚à© S2 ‚àà T0,
  { rintros S1 ‚ü®S1, hS1, rfl‚ü© S2 ‚ü®S2, hS2, rfl‚ü©,
    exact ‚ü®S1 ‚à© S2, inter_mem hS1 hS2, by simp [basic_inter]‚ü© },
  -- For every S ‚àà T0, the intersection AA ‚à© S is nonempty.
  have claim4 : ‚àÄ (S ‚àà T0), (AA ‚à© S).nonempty,
  { rintros S ‚ü®S, hS, rfl‚ü©,
    rcases claim2 _ hS with ‚ü®G, hG, hG2‚ü©,
    exact ‚ü®G, hG2, hG‚ü© },
  -- Every element of T0 is nonempty.
  have claim5 : ‚àÄ (S ‚àà T0), set.nonempty S,
  { rintros S ‚ü®S, hS, rfl‚ü©,
    exact ‚ü®F, hS‚ü© },
  -- Every element of T2 is nonempty.
  have claim6 : ‚àÄ (S ‚àà T2), set.nonempty S,
  { suffices : ‚àÄ S ‚àà T2, S ‚àà T0 ‚à® ‚àÉ Q ‚àà T0, S = AA ‚à© Q,
    { intros S hS,
      cases this _ hS with h h,
      { exact claim5 S h },
      { rcases h with ‚ü®Q, hQ, rfl‚ü©,
        exact claim4 Q hQ } },
    intros S hS,
    apply finite_inter_closure_insert,
    { split,
      { use set.univ,
        refine ‚ü®filter.univ_sets _, _‚ü©,
        ext,
        refine ‚ü®_, by tauto‚ü©,
        { intro,
          apply filter.univ_sets, } },
      { exact claim3 } },
    { exact hS} },
  -- It suffices to show that the intersection of any finite subset of T1 is nonempty.
  suffices : ‚àÄ (F : fsu), ‚ÜëF ‚äÜ T1 ‚Üí (‚ãÇ‚ÇÄ Œπ F).nonempty,
  { obtain ‚ü®G,h1‚ü© := ultrafilter.exists_ultrafilter_of_finite_inter_nonempty _ this,
    have c1 : X.join G = F := ultrafilter.coe_le_coe.1 (Œª P hP, h1 (or.inr ‚ü®P, hP, rfl‚ü©)),
    have c2 : G.map X.str = X.incl x,
    { refine ultrafilter.coe_le_coe.1 (Œª P hP, _),
      apply mem_of_superset (h1 (or.inl rfl)),
      rintros x ‚ü®rfl‚ü©,
      exact hP },
    simp [‚Üêc1, c2] },
  -- Finish...
  intros T hT,
  refine claim6 _ (finite_inter_mem (finite_inter_closure_has_finite_inter _) _ _),
  intros t ht,
  exact finite_inter_closure.basic (@hT t ht)
end

lemma le_nhds_of_str_eq {X : Compactum} (F : ultrafilter X) (x : X) :
  X.str F = x ‚Üí ‚ÜëF ‚â§ ùìù x := Œª h, le_nhds_iff.mpr (Œª s hx hs, hs _ $ by rwa h)

-- All the hard work above boils down to this t2_space instance.
instance {X : Compactum} : t2_space X :=
begin
  rw t2_iff_ultrafilter,
  intros _ _ F hx hy,
  rw [‚Üê str_eq_of_le_nhds _ _ hx, ‚Üê str_eq_of_le_nhds _ _ hy]
end

/-- The structure map of a compactum actually computes limits. -/
lemma Lim_eq_str {X : Compactum} (F : ultrafilter X) : F.Lim = X.str F :=
begin
  rw [ultrafilter.Lim_eq_iff_le_nhds, le_nhds_iff],
  tauto,
end

lemma cl_eq_closure {X : Compactum} (A : set X) : cl A = closure A :=
begin
  ext,
  rw mem_closure_iff_ultrafilter,
  split,
  { rintro ‚ü®F, h1, h2‚ü©,
    exact ‚ü®F, h1, le_nhds_of_str_eq _ _ h2‚ü© },
  { rintro ‚ü®F, h1, h2‚ü©,
    exact ‚ü®F, h1, str_eq_of_le_nhds _ _ h2‚ü© }
end

/-- Any morphism of compacta is continuous. -/
lemma continuous_of_hom {X Y : Compactum} (f : X ‚ü∂ Y) : continuous f :=
begin
  rw continuous_iff_ultrafilter,
  intros x _ h,
  rw [tendsto, ‚Üê coe_map],
  apply le_nhds_of_str_eq,
  rw [‚Üê str_hom_commute, str_eq_of_le_nhds _ x h]
end

/-- Given any compact Hausdorff space, we construct a Compactum. -/
noncomputable def of_topological_space (X : Type*) [topological_space X]
  [compact_space X] [t2_space X] : Compactum :=
{ A := X,
  a := ultrafilter.Lim,
  unit' := by {ext x, exact Lim_eq (pure_le_nhds _) },
  assoc' := begin
    ext FF,
    change ultrafilter (ultrafilter X) at FF,
    set x := (ultrafilter.map ultrafilter.Lim FF).Lim with c1,
    have c2 : ‚àÄ (U : set X) (F : ultrafilter X), F.Lim ‚àà U ‚Üí is_open U ‚Üí U ‚àà F,
    { intros U F h1 hU,
      exact c1 ‚ñ∏ is_open_iff_ultrafilter.mp hU _ h1 _ (ultrafilter.le_nhds_Lim _) },
    have c3 : ‚Üë(ultrafilter.map ultrafilter.Lim FF) ‚â§ ùìù x,
    { rw le_nhds_iff,
      intros U hx hU,
      exact mem_coe.2 (c2 _ _ (by rwa ‚Üê c1) hU) },
    have c4 : ‚àÄ (U : set X), x ‚àà U ‚Üí is_open U ‚Üí { G : ultrafilter X | U ‚àà G } ‚àà FF,
    { intros U hx hU,
      suffices : ultrafilter.Lim ‚Åª¬π' U ‚àà FF,
      { apply mem_of_superset this,
        intros P hP,
        exact c2 U P hP hU },
      exact @c3 U (is_open.mem_nhds hU hx) },
    apply Lim_eq,
    rw le_nhds_iff,
    exact c4,
  end }

/-- Any continuous map between Compacta is a morphism of compacta. -/
def hom_of_continuous {X Y : Compactum} (f : X ‚Üí Y) (cont : continuous f) : X ‚ü∂ Y :=
{ f := f,
  h' := begin
    rw continuous_iff_ultrafilter at cont,
    ext (F : ultrafilter X),
    specialize cont (X.str F) F (le_nhds_of_str_eq F (X.str F) rfl),
    have := str_eq_of_le_nhds (ultrafilter.map f F) _ cont,
    simpa only [‚Üêthis, types_comp_apply, of_type_functor_map],
  end }

end Compactum

/-- The functor functor from Compactum to CompHaus. -/
def Compactum_to_CompHaus : Compactum ‚•§ CompHaus :=
{ obj := Œª X, { to_Top := { Œ± := X } },
  map := Œª X Y f,
  { to_fun := f,
    continuous_to_fun := Compactum.continuous_of_hom _ }}

namespace Compactum_to_CompHaus

/-- The functor Compactum_to_CompHaus is full. -/
def full : full Compactum_to_CompHaus.{u} :=
{ preimage := Œª X Y f, Compactum.hom_of_continuous f.1 f.2 }

/-- The functor Compactum_to_CompHaus is faithful. -/
lemma faithful : faithful Compactum_to_CompHaus := {}

/-- This definition is used to prove essential surjectivity of Compactum_to_CompHaus. -/
noncomputable def iso_of_topological_space {D : CompHaus} :
  Compactum_to_CompHaus.obj (Compactum.of_topological_space D) ‚âÖ D :=
{ hom :=
  { to_fun := id,
    continuous_to_fun := continuous_def.2 $ Œª _ h, by {rw is_open_iff_ultrafilter' at h, exact h} },
  inv :=
  { to_fun := id,
    continuous_to_fun := continuous_def.2 $
      Œª _ h1, by {rw is_open_iff_ultrafilter', intros _ h2, exact h1 _ h2} } }

/-- The functor Compactum_to_CompHaus is essentially surjective. -/
lemma ess_surj : ess_surj Compactum_to_CompHaus :=
{ mem_ess_image := Œª X, ‚ü®Compactum.of_topological_space X, ‚ü®iso_of_topological_space‚ü©‚ü© }

/-- The functor Compactum_to_CompHaus is an equivalence of categories. -/
noncomputable instance is_equivalence : is_equivalence Compactum_to_CompHaus :=
begin
  apply equivalence.of_fully_faithfully_ess_surj _,
  exact Compactum_to_CompHaus.full,
  exact Compactum_to_CompHaus.faithful,
  exact Compactum_to_CompHaus.ess_surj,
end

end Compactum_to_CompHaus

/-- The forgetful functors of `Compactum` and `CompHaus` are compatible via
`Compactum_to_CompHaus`. -/
def Compactum_to_CompHaus_comp_forget :
  Compactum_to_CompHaus ‚ãô category_theory.forget CompHaus ‚âÖ Compactum.forget :=
nat_iso.of_components (Œª X, eq_to_iso rfl) $
by { intros X Y f, dsimp, simpa }

/-
TODO: `forget CompHaus` is monadic, as it is isomorphic to the composition
of an equivalence with the monadic functor `forget Compactum`.
Once we have the API to transfer monadicity of functors along such isomorphisms,
the instance `creates_limits (forget CompHaus)` can be deduced from this
monadicity.
-/

noncomputable
instance CompHaus.forget_creates_limits : creates_limits (forget CompHaus) :=
begin
  let e : forget CompHaus ‚âÖ Compactum_to_CompHaus.inv ‚ãô Compactum.forget :=
    _ ‚â™‚â´ iso_whisker_left _ Compactum_to_CompHaus_comp_forget,
  swap,
  refine _ ‚â™‚â´ functor.associator _ _ _,
  refine (functor.left_unitor _).symm ‚â™‚â´ _,
  refine iso_whisker_right _ _,
  exact Compactum_to_CompHaus.as_equivalence.symm.unit_iso,
  exact creates_limits_of_nat_iso e.symm,
end

noncomputable
instance Profinite.forget_creates_limits : creates_limits (forget Profinite) :=
begin
  change creates_limits (Profinite_to_CompHaus ‚ãô forget _),
  apply_instance,
end
