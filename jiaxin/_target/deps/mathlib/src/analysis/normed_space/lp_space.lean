/-
Copyright (c) 2021 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import analysis.mean_inequalities
import analysis.mean_inequalities_pow
import analysis.normed.group.pointwise
import topology.algebra.order.liminf_limsup

/-!
# ‚Ñìp space

This file describes properties of elements `f` of a pi-type `Œ† i, E i` with finite "norm",
defined for `p:‚Ñù‚â•0‚àû` as the size of the support of `f` if `p=0`, `(‚àë' a, ‚à•f a‚à•^p) ^ (1/p)` for
`0 < p < ‚àû` and `‚®Ü a, ‚à•f a‚à•` for `p=‚àû`.

The Prop-valued `mem_‚Ñìp f p` states that a function `f : Œ† i, E i` has finite norm according
to the above definition; that is, `f` has finite support if `p = 0`, `summable (Œª a, ‚à•f a‚à•^p)` if
`0 < p < ‚àû`, and `bdd_above (norm '' (set.range f))` if `p = ‚àû`.

The space `lp E p` is the subtype of elements of `Œ† i : Œ±, E i` which satisfy `mem_‚Ñìp f p`. For
`1 ‚â§ p`, the "norm" is genuinely a norm and `lp` is a complete metric space.

## Main definitions

* `mem_‚Ñìp f p` : property that the function `f` satisfies, as appropriate, `f` finitely supported
  if `p = 0`, `summable (Œª a, ‚à•f a‚à•^p)` if `0 < p < ‚àû`, and `bdd_above (norm '' (set.range f))` if
  `p = ‚àû`
* `lp E p` : elements of `Œ† i : Œ±, E i` such that `mem_‚Ñìp f p`. Defined as an `add_subgroup` of
  a type synonym `pre_lp` for `Œ† i : Œ±, E i`, and equipped with a `normed_group` structure; also
  equipped with `normed_space ùïú` and `complete_space` instances under appropriate conditions

## Main results

* `mem_‚Ñìp.of_exponent_ge`: For `q ‚â§ p`, a function which is `mem_‚Ñìp` for `q` is also `mem_‚Ñìp` for
  `p`
* `lp.mem_‚Ñìp_of_tendsto`, `lp.norm_le_of_tendsto`: A pointwise limit of functions in `lp`, all with
  `lp` norm `‚â§ C`, is itself in `lp` and has `lp` norm `‚â§ C`.
* `lp.tsum_mul_le_mul_norm`: basic form of H√∂lder's inequality

## Implementation

Since `lp` is defined as an `add_subgroup`, dot notation does not work. Use `lp.norm_neg f` to
say that `‚à•-f‚à• = ‚à•f‚à•`, instead of the non-working `f.norm_neg`.

## TODO

* More versions of H√∂lder's inequality (for example: the case `p = 1`, `q = ‚àû`; a version for normed
  rings which has `‚à•‚àë' i, f i * g i‚à•` rather than `‚àë' i, ‚à•f i‚à• * g i‚à•` on the RHS; a version for
  three exponents satisfying `1 / r = 1 / p + 1 / q`)
* Equivalence with `pi_Lp`, for `Œ±` finite
* Equivalence with `measure_theory.Lp`, for `f : Œ± ‚Üí E` (i.e., functions rather than pi-types) and
  the counting measure on `Œ±`
* Equivalence with `bounded_continuous_function`, for `f : Œ± ‚Üí E` (i.e., functions rather than
  pi-types) and `p = ‚àû`, and the discrete topology on `Œ±`

-/

noncomputable theory
open_locale nnreal ennreal big_operators

variables {Œ± : Type*} {E : Œ± ‚Üí Type*} {p q : ‚Ñù‚â•0‚àû} [Œ† i, normed_group (E i)]

/-!
### `mem_‚Ñìp` predicate

-/

/-- The property that `f : Œ† i : Œ±, E i`
* is finitely supported, if `p = 0`, or
* admits an upper bound for `set.range (Œª i, ‚à•f i‚à•)`, if `p = ‚àû`, or
* has the series `‚àë' i, ‚à•f i‚à• ^ p` be summable, if `0 < p < ‚àû`. -/
def mem_‚Ñìp (f : Œ† i, E i) (p : ‚Ñù‚â•0‚àû) : Prop :=
if p = 0 then (set.finite {i | f i ‚â† 0}) else
  (if p = ‚àû then bdd_above (set.range (Œª i, ‚à•f i‚à•)) else summable (Œª i, ‚à•f i‚à• ^ p.to_real))

lemma mem_‚Ñìp_zero_iff {f : Œ† i, E i} : mem_‚Ñìp f 0 ‚Üî set.finite {i | f i ‚â† 0} :=
by dsimp [mem_‚Ñìp]; rw [if_pos rfl]

lemma mem_‚Ñìp_zero {f : Œ† i, E i} (hf : set.finite {i | f i ‚â† 0}) : mem_‚Ñìp f 0 :=
mem_‚Ñìp_zero_iff.2 hf

lemma mem_‚Ñìp_infty_iff {f : Œ† i, E i} : mem_‚Ñìp f ‚àû ‚Üî bdd_above (set.range (Œª i, ‚à•f i‚à•)) :=
by dsimp [mem_‚Ñìp]; rw [if_neg ennreal.top_ne_zero, if_pos rfl]

lemma mem_‚Ñìp_infty {f : Œ† i, E i} (hf : bdd_above (set.range (Œª i, ‚à•f i‚à•))) : mem_‚Ñìp f ‚àû :=
mem_‚Ñìp_infty_iff.2 hf

lemma mem_‚Ñìp_gen_iff (hp : 0 < p.to_real) {f : Œ† i, E i} :
  mem_‚Ñìp f p ‚Üî summable (Œª i, ‚à•f i‚à• ^ p.to_real) :=
begin
  rw ennreal.to_real_pos_iff at hp,
  dsimp [mem_‚Ñìp],
  rw [if_neg hp.1.ne', if_neg hp.2.ne],
end

lemma mem_‚Ñìp_gen {f : Œ† i, E i} (hf : summable (Œª i, ‚à•f i‚à• ^ p.to_real)) :
  mem_‚Ñìp f p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    have H : summable (Œª i : Œ±, (1:‚Ñù)) := by simpa using hf,
    exact (finite_of_summable_const (by norm_num) H).subset (set.subset_univ _) },
  { apply mem_‚Ñìp_infty,
    have H : summable (Œª i : Œ±, (1:‚Ñù)) := by simpa using hf,
    simpa using ((finite_of_summable_const (by norm_num) H).image (Œª i, ‚à•f i‚à•)).bdd_above },
  exact (mem_‚Ñìp_gen_iff hp).2 hf
end

lemma mem_‚Ñìp_gen' {C : ‚Ñù} {f : Œ† i, E i} (hf : ‚àÄ s : finset Œ±, ‚àë i in s, ‚à•f i‚à• ^ p.to_real ‚â§ C) :
  mem_‚Ñìp f p :=
begin
  apply mem_‚Ñìp_gen,
  use ‚®Ü s : finset Œ±, ‚àë i in s, ‚à•f i‚à• ^ p.to_real,
  apply has_sum_of_is_lub_of_nonneg,
  { intros b,
    exact real.rpow_nonneg_of_nonneg (norm_nonneg _) _ },
  apply is_lub_csupr,
  use C,
  rintros - ‚ü®s, rfl‚ü©,
  exact hf s
end

lemma zero_mem_‚Ñìp : mem_‚Ñìp (0 : Œ† i, E i) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    simp },
  { apply mem_‚Ñìp_infty,
    simp only [norm_zero, pi.zero_apply],
    exact bdd_above_singleton.mono set.range_const_subset, },
  { apply mem_‚Ñìp_gen,
    simp [real.zero_rpow hp.ne', summable_zero], }
end

lemma zero_mem_‚Ñìp' : mem_‚Ñìp (Œª i : Œ±, (0 : E i)) p := zero_mem_‚Ñìp

namespace mem_‚Ñìp

lemma finite_dsupport {f : Œ† i, E i} (hf : mem_‚Ñìp f 0) : set.finite {i | f i ‚â† 0} :=
mem_‚Ñìp_zero_iff.1 hf

lemma bdd_above {f : Œ† i, E i} (hf : mem_‚Ñìp f ‚àû) : bdd_above (set.range (Œª i, ‚à•f i‚à•)) :=
mem_‚Ñìp_infty_iff.1 hf

lemma summable (hp : 0 < p.to_real) {f : Œ† i, E i} (hf : mem_‚Ñìp f p) :
  summable (Œª i, ‚à•f i‚à• ^ p.to_real) :=
(mem_‚Ñìp_gen_iff hp).1 hf

lemma neg {f : Œ† i, E i} (hf : mem_‚Ñìp f p) : mem_‚Ñìp (-f) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    simp [hf.finite_dsupport] },
  { apply mem_‚Ñìp_infty,
    simpa using hf.bdd_above },
  { apply mem_‚Ñìp_gen,
    simpa using hf.summable hp },
end

@[simp] lemma neg_iff {f : Œ† i, E i} : mem_‚Ñìp (-f) p ‚Üî mem_‚Ñìp f p :=
‚ü®Œª h, neg_neg f ‚ñ∏ h.neg, mem_‚Ñìp.neg‚ü©

lemma of_exponent_ge {p q : ‚Ñù‚â•0‚àû} {f : Œ† i, E i}
  (hfq : mem_‚Ñìp f q) (hpq : q ‚â§ p) :
  mem_‚Ñìp f p :=
begin
  rcases ennreal.trichotomy‚ÇÇ hpq with ‚ü®rfl, rfl‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®rfl, hp‚ü© | ‚ü®rfl, rfl‚ü© | ‚ü®hq, rfl‚ü©
    | ‚ü®hq, hp, hpq'‚ü©,
  { exact hfq },
  { apply mem_‚Ñìp_infty,
    obtain ‚ü®C, hC‚ü© := (hfq.finite_dsupport.image (Œª i, ‚à•f i‚à•)).bdd_above,
    use max 0 C,
    rintros x ‚ü®i, rfl‚ü©,
    by_cases hi : f i = 0,
    { simp [hi] },
    { exact (hC ‚ü®i, hi, rfl‚ü©).trans (le_max_right _ _) } },
  { apply mem_‚Ñìp_gen,
    have : ‚àÄ i ‚àâ hfq.finite_dsupport.to_finset, ‚à•f i‚à• ^ p.to_real = 0,
    { intros i hi,
      have : f i = 0 := by simpa using hi,
      simp [this, real.zero_rpow hp.ne'] },
    exact summable_of_ne_finset_zero this },
  { exact hfq },
  { apply mem_‚Ñìp_infty,
    obtain ‚ü®A, hA‚ü© := (hfq.summable hq).tendsto_cofinite_zero.bdd_above_range_of_cofinite,
    use A ^ (q.to_real‚Åª¬π),
    rintros x ‚ü®i, rfl‚ü©,
    have : 0 ‚â§ ‚à•f i‚à• ^ q.to_real := real.rpow_nonneg_of_nonneg (norm_nonneg _) _,
    simpa [‚Üê real.rpow_mul, mul_inv_cancel hq.ne'] using
      real.rpow_le_rpow this (hA ‚ü®i, rfl‚ü©) (inv_nonneg.mpr hq.le) },
  { apply mem_‚Ñìp_gen,
    have hf' := hfq.summable hq,
    refine summable_of_norm_bounded_eventually _ hf' (@set.finite.subset _ {i | 1 ‚â§ ‚à•f i‚à•} _ _ _),
    { have H : {x : Œ± | 1 ‚â§ ‚à•f x‚à• ^ q.to_real}.finite,
      { simpa using eventually_lt_of_tendsto_lt (by norm_num : (0:‚Ñù) < 1)
          hf'.tendsto_cofinite_zero },
      exact H.subset (Œª i hi, real.one_le_rpow hi hq.le) },
    { show ‚àÄ i, ¬¨ (|‚à•f i‚à• ^ p.to_real| ‚â§ ‚à•f i‚à• ^ q.to_real) ‚Üí 1 ‚â§ ‚à•f i‚à•,
      intros i hi,
      have : 0 ‚â§ ‚à•f i‚à• ^ p.to_real := real.rpow_nonneg_of_nonneg (norm_nonneg _) p.to_real,
      simp only [abs_of_nonneg, this] at hi,
      contrapose! hi,
      exact real.rpow_le_rpow_of_exponent_ge' (norm_nonneg _) hi.le hq.le hpq' } }
end

lemma add {f g : Œ† i, E i} (hf : mem_‚Ñìp f p) (hg : mem_‚Ñìp g p) : mem_‚Ñìp (f + g) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    refine (hf.finite_dsupport.union hg.finite_dsupport).subset (Œª i, _),
    simp only [pi.add_apply, ne.def, set.mem_union_eq, set.mem_set_of_eq],
    contrapose!,
    rintros ‚ü®hf', hg'‚ü©,
    simp [hf', hg'] },
  { apply mem_‚Ñìp_infty,
    obtain ‚ü®A, hA‚ü© := hf.bdd_above,
    obtain ‚ü®B, hB‚ü© := hg.bdd_above,
    refine ‚ü®A + B, _‚ü©,
    rintros a ‚ü®i, rfl‚ü©,
    exact le_trans (norm_add_le _ _) (add_le_add (hA ‚ü®i, rfl‚ü©) (hB ‚ü®i, rfl‚ü©)) },
  apply mem_‚Ñìp_gen,
  let C : ‚Ñù := if p.to_real < 1 then 1 else 2 ^ (p.to_real - 1),
  refine summable_of_nonneg_of_le _ (Œª i, _) (((hf.summable hp).add (hg.summable hp)).mul_left C),
  { exact Œª b, real.rpow_nonneg_of_nonneg (norm_nonneg (f b + g b)) p.to_real },
  { refine (real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp.le).trans _,
    dsimp [C],
    split_ifs with h h,
    { simpa using nnreal.coe_le_coe.2 (nnreal.rpow_add_le_add_rpow (‚à•f i‚à•‚Çä) (‚à•g i‚à•‚Çä) hp h.le) },
    { let F : fin 2 ‚Üí ‚Ñù‚â•0 := ![‚à•f i‚à•‚Çä, ‚à•g i‚à•‚Çä],
      have : ‚àÄ i, (0:‚Ñù) ‚â§ F i := Œª i, (F i).coe_nonneg,
      simp only [not_lt] at h,
      simpa [F, fin.sum_univ_succ] using
        real.rpow_sum_le_const_mul_sum_rpow_of_nonneg (finset.univ : finset (fin 2)) h
        (Œª i _, (F i).coe_nonneg) } }
end

lemma sub {f g : Œ† i, E i} (hf : mem_‚Ñìp f p) (hg : mem_‚Ñìp g p) : mem_‚Ñìp (f - g) p :=
by { rw sub_eq_add_neg, exact hf.add hg.neg }

lemma finset_sum {Œπ} (s : finset Œπ) {f : Œπ ‚Üí Œ† i, E i} (hf : ‚àÄ i ‚àà s, mem_‚Ñìp (f i) p) :
  mem_‚Ñìp (Œª a, ‚àë i in s, f i a) p :=
begin
  haveI : decidable_eq Œπ := classical.dec_eq _,
  revert hf,
  refine finset.induction_on s _ _,
  { simp only [zero_mem_‚Ñìp', finset.sum_empty, implies_true_iff], },
  { intros i s his ih hf,
    simp only [his, finset.sum_insert, not_false_iff],
    exact (hf i (s.mem_insert_self i)).add (ih (Œª j hj, hf j (finset.mem_insert_of_mem hj))), },
end

section normed_space

variables {ùïú : Type*} [normed_field ùïú] [Œ† i, normed_space ùïú (E i)]

lemma const_smul {f : Œ† i, E i} (hf : mem_‚Ñìp f p) (c : ùïú) : mem_‚Ñìp (c ‚Ä¢ f) p :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { apply mem_‚Ñìp_zero,
    refine hf.finite_dsupport.subset (Œª i, (_ : ¬¨c ‚Ä¢ f i = 0 ‚Üí ¬¨f i = 0)),
    exact not_imp_not.mpr (Œª hf', hf'.symm ‚ñ∏ (smul_zero c)) },
  { obtain ‚ü®A, hA‚ü© := hf.bdd_above,
    refine mem_‚Ñìp_infty ‚ü®‚à•c‚à• * A, _‚ü©,
    rintros a ‚ü®i, rfl‚ü©,
    simpa [norm_smul] using mul_le_mul_of_nonneg_left (hA ‚ü®i, rfl‚ü©) (norm_nonneg c) },
  { apply mem_‚Ñìp_gen,
    convert (hf.summable hp).mul_left (‚à•c‚à• ^ p.to_real),
    ext i,
    simp [norm_smul, real.mul_rpow (norm_nonneg c) (norm_nonneg (f i))] },
end

lemma const_mul {f : Œ± ‚Üí ùïú} (hf : mem_‚Ñìp f p) (c : ùïú) : mem_‚Ñìp (Œª x, c * f x) p :=
@mem_‚Ñìp.const_smul Œ± (Œª i, ùïú) _ _ ùïú _ _ _ hf c

end normed_space

end mem_‚Ñìp

/-!
### lp space

The space of elements of `Œ† i, E i` satisfying the predicate `mem_‚Ñìp`.
-/

/-- We define `pre_lp E` to be a type synonym for `Œ† i, E i` which, importantly, does not inherit
the `pi` topology on `Œ† i, E i` (otherwise this topology would descend to `lp E p` and conflict
with the normed group topology we will later equip it with.)

We choose to deal with this issue by making a type synonym for `Œ† i, E i` rather than for the `lp`
subgroup itself, because this allows all the spaces `lp E p` (for varying `p`) to be subgroups of
the same ambient group, which permits lemma statements like `lp.monotone` (below). -/
@[derive add_comm_group, nolint unused_arguments]
def pre_lp (E : Œ± ‚Üí Type*) [Œ† i, normed_group (E i)] : Type* := Œ† i, E i

instance pre_lp.unique [is_empty Œ±] : unique (pre_lp E) := pi.unique_of_is_empty E

/-- lp space -/
def lp (E : Œ± ‚Üí Type*) [Œ† i, normed_group (E i)]
  (p : ‚Ñù‚â•0‚àû) : add_subgroup (pre_lp E) :=
{ carrier := {f | mem_‚Ñìp f p},
  zero_mem' := zero_mem_‚Ñìp,
  add_mem' := Œª f g, mem_‚Ñìp.add,
  neg_mem' := Œª f, mem_‚Ñìp.neg }

namespace lp

instance : has_coe (lp E p) (Œ† i, E i) := coe_subtype
instance : has_coe_to_fun (lp E p) (Œª _, Œ† i, E i) := ‚ü®Œª f, ((f : Œ† i, E i) : Œ† i, E i)‚ü©

@[ext] lemma ext {f g : lp E p} (h : (f : Œ† i, E i) = g) : f = g :=
subtype.ext h

protected lemma ext_iff {f g : lp E p} : f = g ‚Üî (f : Œ† i, E i) = g :=
subtype.ext_iff

lemma eq_zero' [is_empty Œ±] (f : lp E p) : f = 0 := subsingleton.elim f 0

protected lemma monotone {p q : ‚Ñù‚â•0‚àû} (hpq : q ‚â§ p) : lp E q ‚â§ lp E p :=
Œª f hf, mem_‚Ñìp.of_exponent_ge hf hpq

protected lemma mem_‚Ñìp (f : lp E p) : mem_‚Ñìp f p := f.prop

variables (E p)
@[simp] lemma coe_fn_zero : ‚áë(0 : lp E p) = 0 := rfl
variables {E p}

@[simp] lemma coe_fn_neg (f : lp E p) : ‚áë(-f) = -f := rfl

@[simp] lemma coe_fn_add (f g : lp E p) : ‚áë(f + g) = f + g := rfl

@[simp] lemma coe_fn_sum {Œπ : Type*} (f : Œπ ‚Üí lp E p) (s : finset Œπ) :
  ‚áë(‚àë i in s, f i) = ‚àë i in s, ‚áë(f i) :=
begin
  classical,
  refine finset.induction _ _ s,
  { simp },
  intros i s his,
  simp [finset.sum_insert his],
end

@[simp] lemma coe_fn_sub (f g : lp E p) : ‚áë(f - g) = f - g := rfl

instance : has_norm (lp E p) :=
{ norm := Œª f, if hp : p = 0 then by subst hp; exact (lp.mem_‚Ñìp f).finite_dsupport.to_finset.card
   else (if p = ‚àû then ‚®Ü i, ‚à•f i‚à• else (‚àë' i, ‚à•f i‚à• ^ p.to_real) ^ (1/p.to_real)) }

lemma norm_eq_card_dsupport (f : lp E 0) : ‚à•f‚à• = (lp.mem_‚Ñìp f).finite_dsupport.to_finset.card :=
dif_pos rfl

lemma norm_eq_csupr (f : lp E ‚àû) : ‚à•f‚à• = ‚®Ü i, ‚à•f i‚à• :=
begin
  dsimp [norm],
  rw [dif_neg ennreal.top_ne_zero, if_pos rfl]
end

lemma is_lub_norm [nonempty Œ±] (f : lp E ‚àû) : is_lub (set.range (Œª i, ‚à•f i‚à•)) ‚à•f‚à• :=
begin
  rw lp.norm_eq_csupr,
  exact is_lub_csupr (lp.mem_‚Ñìp f)
end

lemma norm_eq_tsum_rpow (hp : 0 < p.to_real) (f : lp E p) :
  ‚à•f‚à• = (‚àë' i, ‚à•f i‚à• ^ p.to_real) ^ (1/p.to_real) :=
begin
  dsimp [norm],
  rw ennreal.to_real_pos_iff at hp,
  rw [dif_neg hp.1.ne', if_neg hp.2.ne],
end

lemma norm_rpow_eq_tsum (hp : 0 < p.to_real) (f : lp E p) :
  ‚à•f‚à• ^ p.to_real = ‚àë' i, ‚à•f i‚à• ^ p.to_real :=
begin
  rw [norm_eq_tsum_rpow hp, ‚Üê real.rpow_mul],
  { field_simp [hp.ne'] },
  apply tsum_nonneg,
  intros i,
  calc (0:‚Ñù) = 0 ^ p.to_real : by rw real.zero_rpow hp.ne'
  ... ‚â§ _ : real.rpow_le_rpow rfl.le (norm_nonneg (f i)) hp.le
end

lemma has_sum_norm (hp : 0 < p.to_real) (f : lp E p) :
  has_sum (Œª i, ‚à•f i‚à• ^ p.to_real) (‚à•f‚à• ^ p.to_real) :=
begin
  rw norm_rpow_eq_tsum hp,
  exact ((lp.mem_‚Ñìp f).summable hp).has_sum
end

lemma norm_nonneg' (f : lp E p) : 0 ‚â§ ‚à•f‚à• :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { simp [lp.norm_eq_card_dsupport f] },
  { cases is_empty_or_nonempty Œ± with _i _i; resetI,
    { rw lp.norm_eq_csupr,
      simp [real.csupr_empty] },
    inhabit Œ±,
    exact (norm_nonneg (f default)).trans ((lp.is_lub_norm f).1 ‚ü®default, rfl‚ü©) },
  { rw lp.norm_eq_tsum_rpow hp f,
    refine real.rpow_nonneg_of_nonneg (tsum_nonneg _) _,
    exact Œª i, real.rpow_nonneg_of_nonneg (norm_nonneg _) _ },
end

@[simp] lemma norm_zero : ‚à•(0 : lp E p)‚à• = 0 :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { simp [lp.norm_eq_card_dsupport] },
  { simp [lp.norm_eq_csupr] },
  { rw lp.norm_eq_tsum_rpow hp,
    have hp' : 1 / p.to_real ‚â† 0 := one_div_ne_zero hp.ne',
    simpa [real.zero_rpow hp.ne'] using real.zero_rpow hp' }
end

lemma norm_eq_zero_iff ‚¶Éf : lp E p‚¶Ñ : ‚à•f‚à• = 0 ‚Üî f = 0 :=
begin
  classical,
  refine ‚ü®Œª h, _, by { rintros rfl, exact norm_zero }‚ü©,
  rcases p.trichotomy with rfl | rfl | hp,
  { ext i,
    have : {i : Œ± | ¬¨f i = 0} = ‚àÖ := by simpa [lp.norm_eq_card_dsupport f] using h,
    have : (¬¨ (f i = 0)) = false := congr_fun this i,
    tauto },
  { cases is_empty_or_nonempty Œ± with _i _i; resetI,
    { simp },
    have H : is_lub (set.range (Œª i, ‚à•f i‚à•)) 0,
    { simpa [h] using lp.is_lub_norm f },
    ext i,
    have : ‚à•f i‚à• = 0 := le_antisymm (H.1 ‚ü®i, rfl‚ü©) (norm_nonneg _),
    simpa using this },
  { have hf : has_sum (Œª (i : Œ±), ‚à•f i‚à• ^ p.to_real) 0,
    { have := lp.has_sum_norm hp f,
      rwa [h, real.zero_rpow hp.ne'] at this },
    have : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• ^ p.to_real := Œª i, real.rpow_nonneg_of_nonneg (norm_nonneg _) _,
    rw has_sum_zero_iff_of_nonneg this at hf,
    ext i,
    have : f i = 0 ‚àß p.to_real ‚â† 0,
    { simpa [real.rpow_eq_zero_iff_of_nonneg (norm_nonneg (f i))] using congr_fun hf i },
    exact this.1 },
end

lemma eq_zero_iff_coe_fn_eq_zero {f : lp E p} : f = 0 ‚Üî ‚áëf = 0 :=
by rw [lp.ext_iff, coe_fn_zero]

@[simp] lemma norm_neg ‚¶Éf : lp E p‚¶Ñ : ‚à•-f‚à• = ‚à•f‚à• :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { simp [lp.norm_eq_card_dsupport] },
  { cases is_empty_or_nonempty Œ±; resetI,
    { simp [lp.eq_zero' f], },
    apply (lp.is_lub_norm (-f)).unique,
    simpa using lp.is_lub_norm f },
  { suffices : ‚à•-f‚à• ^ p.to_real = ‚à•f‚à• ^ p.to_real,
    { exact real.rpow_left_inj_on hp.ne' (norm_nonneg' _) (norm_nonneg' _) this },
    apply (lp.has_sum_norm hp (-f)).unique,
    simpa using lp.has_sum_norm hp f }
end

instance [hp : fact (1 ‚â§ p)] : normed_group (lp E p) :=
normed_group.of_core _
{ norm_eq_zero_iff := norm_eq_zero_iff,
  triangle := Œª f g, begin
    unfreezingI { rcases p.dichotomy with rfl | hp' },
    { cases is_empty_or_nonempty Œ±; resetI,
      { simp [lp.eq_zero' f] },
      refine (lp.is_lub_norm (f + g)).2 _,
      rintros x ‚ü®i, rfl‚ü©,
      refine le_trans _ (add_mem_upper_bounds_add (lp.is_lub_norm f).1 (lp.is_lub_norm g).1
        ‚ü®_, _, ‚ü®i, rfl‚ü©, ‚ü®i, rfl‚ü©, rfl‚ü©),
      exact norm_add_le (f i) (g i) },
    { have hp'' : 0 < p.to_real := zero_lt_one.trans_le hp',
      have hf‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• := Œª i, norm_nonneg _,
      have hg‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚à•g i‚à• := Œª i, norm_nonneg _,
      have hf‚ÇÇ := lp.has_sum_norm hp'' f,
      have hg‚ÇÇ := lp.has_sum_norm hp'' g,
      -- apply Minkowski's inequality
      obtain ‚ü®C, hC‚ÇÅ, hC‚ÇÇ, hCfg‚ü© :=
        real.Lp_add_le_has_sum_of_nonneg hp' hf‚ÇÅ hg‚ÇÅ (norm_nonneg' _) (norm_nonneg' _) hf‚ÇÇ hg‚ÇÇ,
      refine le_trans _ hC‚ÇÇ,
      rw ‚Üê real.rpow_le_rpow_iff (norm_nonneg' (f + g)) hC‚ÇÅ hp'',
      refine has_sum_le _ (lp.has_sum_norm hp'' (f + g)) hCfg,
      intros i,
      exact real.rpow_le_rpow (norm_nonneg _) (norm_add_le _ _) hp''.le },
  end,
  norm_neg := norm_neg }

-- TODO: define an `ennreal` version of `is_conjugate_exponent`, and then express this inequality
-- in a better version which also covers the case `p = 1, q = ‚àû`.
/-- H√∂lder inequality -/
protected lemma tsum_mul_le_mul_norm {p q : ‚Ñù‚â•0‚àû}
  (hpq : p.to_real.is_conjugate_exponent q.to_real) (f : lp E p) (g : lp E q) :
  summable (Œª i, ‚à•f i‚à• * ‚à•g i‚à•) ‚àß ‚àë' i, ‚à•f i‚à• * ‚à•g i‚à• ‚â§ ‚à•f‚à• * ‚à•g‚à• :=
begin
  have hf‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• := Œª i, norm_nonneg _,
  have hg‚ÇÅ : ‚àÄ i, 0 ‚â§ ‚à•g i‚à• := Œª i, norm_nonneg _,
  have hf‚ÇÇ := lp.has_sum_norm hpq.pos f,
  have hg‚ÇÇ := lp.has_sum_norm hpq.symm.pos g,
  obtain ‚ü®C, -, hC', hC‚ü© :=
    real.inner_le_Lp_mul_Lq_has_sum_of_nonneg hpq (norm_nonneg' _) (norm_nonneg' _) hf‚ÇÅ hg‚ÇÅ hf‚ÇÇ hg‚ÇÇ,
  rw ‚Üê hC.tsum_eq at hC',
  exact ‚ü®hC.summable, hC'‚ü©
end

protected lemma summable_mul {p q : ‚Ñù‚â•0‚àû}
  (hpq : p.to_real.is_conjugate_exponent q.to_real) (f : lp E p) (g : lp E q) :
  summable (Œª i, ‚à•f i‚à• * ‚à•g i‚à•) :=
(lp.tsum_mul_le_mul_norm hpq f g).1

protected lemma tsum_mul_le_mul_norm' {p q : ‚Ñù‚â•0‚àû}
  (hpq : p.to_real.is_conjugate_exponent q.to_real) (f : lp E p) (g : lp E q) :
  ‚àë' i, ‚à•f i‚à• * ‚à•g i‚à• ‚â§ ‚à•f‚à• * ‚à•g‚à• :=
(lp.tsum_mul_le_mul_norm hpq f g).2

section compare_pointwise

lemma norm_apply_le_norm (hp : p ‚â† 0) (f : lp E p) (i : Œ±) : ‚à•f i‚à• ‚â§ ‚à•f‚à• :=
begin
  rcases eq_or_ne p ‚àû with rfl | hp',
  { haveI : nonempty Œ± := ‚ü®i‚ü©,
    exact (is_lub_norm f).1 ‚ü®i, rfl‚ü© },
  have hp'' : 0 < p.to_real := ennreal.to_real_pos hp hp',
  have : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• ^ p.to_real,
  { exact Œª i, real.rpow_nonneg_of_nonneg (norm_nonneg _) _ },
  rw ‚Üê real.rpow_le_rpow_iff (norm_nonneg _) (norm_nonneg' _) hp'',
  convert le_has_sum (has_sum_norm hp'' f) i (Œª i hi, this i),
end

lemma sum_rpow_le_norm_rpow (hp : 0 < p.to_real) (f : lp E p) (s : finset Œ±) :
  ‚àë i in s, ‚à•f i‚à• ^ p.to_real ‚â§ ‚à•f‚à• ^ p.to_real :=
begin
  rw lp.norm_rpow_eq_tsum hp f,
  have : ‚àÄ i, 0 ‚â§ ‚à•f i‚à• ^ p.to_real,
  { exact Œª i, real.rpow_nonneg_of_nonneg (norm_nonneg _) _ },
  refine sum_le_tsum _ (Œª i hi, this i) _,
  exact (lp.mem_‚Ñìp f).summable hp
end

lemma norm_le_of_forall_le' [nonempty Œ±] {f : lp E ‚àû} (C : ‚Ñù) (hCf : ‚àÄ i, ‚à•f i‚à• ‚â§ C) : ‚à•f‚à• ‚â§ C :=
begin
  refine (is_lub_norm f).2 _,
  rintros - ‚ü®i, rfl‚ü©,
  exact hCf i,
end

lemma norm_le_of_forall_le {f : lp E ‚àû} {C : ‚Ñù} (hC : 0 ‚â§ C) (hCf : ‚àÄ i, ‚à•f i‚à• ‚â§ C) : ‚à•f‚à• ‚â§ C :=
begin
  casesI is_empty_or_nonempty Œ±,
  { simpa [eq_zero' f] using hC, },
  { exact norm_le_of_forall_le' C hCf },
end

lemma norm_le_of_tsum_le (hp : 0 < p.to_real) {C : ‚Ñù} (hC : 0 ‚â§ C) {f : lp E p}
  (hf : ‚àë' i, ‚à•f i‚à• ^ p.to_real ‚â§ C ^ p.to_real) :
  ‚à•f‚à• ‚â§ C :=
begin
  rw [‚Üê real.rpow_le_rpow_iff (norm_nonneg' _) hC hp, norm_rpow_eq_tsum hp],
  exact hf,
end

lemma norm_le_of_forall_sum_le (hp : 0 < p.to_real) {C : ‚Ñù} (hC : 0 ‚â§ C) {f : lp E p}
  (hf : ‚àÄ s : finset Œ±, ‚àë i in s, ‚à•f i‚à• ^ p.to_real ‚â§ C ^ p.to_real) :
  ‚à•f‚à• ‚â§ C :=
norm_le_of_tsum_le hp hC (tsum_le_of_sum_le ((lp.mem_‚Ñìp f).summable hp) hf)

end compare_pointwise

section normed_space

variables {ùïú : Type*} [normed_field ùïú] [Œ† i, normed_space ùïú (E i)]

instance : module ùïú (pre_lp E) := pi.module Œ± E ùïú

lemma mem_lp_const_smul (c : ùïú) (f : lp E p) : c ‚Ä¢ (f : pre_lp E) ‚àà lp E p :=
(lp.mem_‚Ñìp f).const_smul c

variables (E p ùïú)

/-- The `ùïú`-submodule of elements of `Œ† i : Œ±, E i` whose `lp` norm is finite.  This is `lp E p`,
with extra structure. -/
def lp_submodule : submodule ùïú (pre_lp E) :=
{ smul_mem' := Œª c f hf, by simpa using mem_lp_const_smul c ‚ü®f, hf‚ü©,
  .. lp E p }

variables {E p ùïú}

lemma coe_lp_submodule : (lp_submodule E p ùïú).to_add_subgroup = lp E p := rfl

instance : module ùïú (lp E p) :=
{ .. (lp_submodule E p ùïú).module }

@[simp] lemma coe_fn_smul (c : ùïú) (f : lp E p) : ‚áë(c ‚Ä¢ f) = c ‚Ä¢ f := rfl

lemma norm_const_smul (hp : p ‚â† 0) {c : ùïú} (f : lp E p) : ‚à•c ‚Ä¢ f‚à• = ‚à•c‚à• * ‚à•f‚à• :=
begin
  rcases p.trichotomy with rfl | rfl | hp,
  { exact absurd rfl hp },
  { cases is_empty_or_nonempty Œ±; resetI,
    { simp [lp.eq_zero' f], },
    apply (lp.is_lub_norm (c ‚Ä¢ f)).unique,
    convert (lp.is_lub_norm f).mul_left (norm_nonneg c),
    ext a,
    simp [coe_fn_smul, norm_smul] },
  { suffices : ‚à•c ‚Ä¢ f‚à• ^ p.to_real = (‚à•c‚à• * ‚à•f‚à•) ^ p.to_real,
    { refine real.rpow_left_inj_on hp.ne' _ _ this,
      { exact norm_nonneg' _ },
      { exact mul_nonneg (norm_nonneg _) (norm_nonneg' _) } },
    apply (lp.has_sum_norm hp (c ‚Ä¢ f)).unique,
    convert (lp.has_sum_norm hp f).mul_left (‚à•c‚à• ^ p.to_real),
    { simp [coe_fn_smul, norm_smul, real.mul_rpow (norm_nonneg c) (norm_nonneg _)] },
    have hf : 0 ‚â§ ‚à•f‚à• := lp.norm_nonneg' f,
    simp [coe_fn_smul, norm_smul, real.mul_rpow (norm_nonneg c) hf] }
end

instance [fact (1 ‚â§ p)] : normed_space ùïú (lp E p) :=
{ norm_smul_le := Œª c f, begin
    have hp : 0 < p := ennreal.zero_lt_one.trans_le (fact.out _),
    simp [norm_const_smul hp.ne']
  end }

variables {ùïú' : Type*} [normed_field ùïú']

instance [Œ† i, normed_space ùïú' (E i)] [has_scalar ùïú' ùïú] [Œ† i, is_scalar_tower ùïú' ùïú (E i)] :
  is_scalar_tower ùïú' ùïú (lp E p) :=
begin
  refine ‚ü®Œª r c f, _‚ü©,
  ext1,
  exact (lp.coe_fn_smul _ _).trans (smul_assoc _ _ _)
end

end normed_space

section single
variables {ùïú : Type*} [normed_field ùïú] [Œ† i, normed_space ùïú (E i)]
variables [decidable_eq Œ±]

/-- The element of `lp E p` which is `a : E i` at the index `i`, and zero elsewhere. -/
protected def single (p) (i : Œ±) (a : E i) : lp E p :=
‚ü® Œª j, if h : j = i then eq.rec a h.symm else 0,
  begin
    refine (mem_‚Ñìp_zero _).of_exponent_ge (zero_le p),
    refine (set.finite_singleton i).subset _,
    intros j,
    simp only [forall_exists_index, set.mem_singleton_iff, ne.def, dite_eq_right_iff,
      set.mem_set_of_eq, not_forall],
    rintros rfl,
    simp,
  end ‚ü©

protected lemma single_apply (p) (i : Œ±) (a : E i) (j : Œ±) :
  lp.single p i a j = if h : j = i then eq.rec a h.symm else 0 :=
rfl

protected lemma single_apply_self (p) (i : Œ±) (a : E i) :
  lp.single p i a i = a :=
by rw [lp.single_apply, dif_pos rfl]

protected lemma single_apply_ne (p) (i : Œ±) (a : E i) {j : Œ±} (hij : j ‚â† i) :
  lp.single p i a j = 0 :=
by rw [lp.single_apply, dif_neg hij]

@[simp] protected lemma single_neg (p) (i : Œ±) (a : E i) :
  lp.single p i (- a) = - lp.single p i a :=
begin
  ext j,
  by_cases hi : j = i,
  { subst hi,
    simp [lp.single_apply_self] },
  { simp [lp.single_apply_ne p i _ hi] }
end

@[simp] protected lemma single_smul (p) (i : Œ±) (a : E i) (c : ùïú) :
  lp.single p i (c ‚Ä¢ a) = c ‚Ä¢ lp.single p i a :=
begin
  ext j,
  by_cases hi : j = i,
  { subst hi,
    simp [lp.single_apply_self] },
  { simp [lp.single_apply_ne p i _ hi] }
end

protected lemma norm_sum_single (hp : 0 < p.to_real) (f : Œ† i, E i) (s : finset Œ±) :
  ‚à•‚àë i in s, lp.single p i (f i)‚à• ^ p.to_real = ‚àë i in s, ‚à•f i‚à• ^ p.to_real :=
begin
  refine (has_sum_norm hp (‚àë i in s, lp.single p i (f i))).unique _,
  simp only [lp.single_apply, coe_fn_sum, finset.sum_apply, finset.sum_dite_eq],
  have h : ‚àÄ i ‚àâ s, ‚à•ite (i ‚àà s) (f i) 0‚à• ^ p.to_real = 0,
  { intros i hi,
    simp [if_neg hi, real.zero_rpow hp.ne'], },
  have h' : ‚àÄ i ‚àà s, ‚à•f i‚à• ^ p.to_real = ‚à•ite (i ‚àà s) (f i) 0‚à• ^ p.to_real,
  { intros i hi,
    rw if_pos hi },
  simpa [finset.sum_congr rfl h'] using has_sum_sum_of_ne_finset_zero h,
end

protected lemma norm_single (hp : 0 < p.to_real) (f : Œ† i, E i) (i : Œ±) :
  ‚à•lp.single p i (f i)‚à• = ‚à•f i‚à• :=
begin
  refine real.rpow_left_inj_on hp.ne' (norm_nonneg' _) (norm_nonneg _) _,
  simpa using lp.norm_sum_single hp f {i},
end

protected lemma norm_sub_norm_compl_sub_single (hp : 0 < p.to_real) (f : lp E p) (s : finset Œ±) :
  ‚à•f‚à• ^ p.to_real - ‚à•f - ‚àë i in s, lp.single p i (f i)‚à• ^ p.to_real = ‚àë i in s, ‚à•f i‚à• ^ p.to_real :=
begin
  refine ((has_sum_norm hp f).sub (has_sum_norm hp (f - ‚àë i in s, lp.single p i (f i)))).unique _,
  let F : Œ± ‚Üí ‚Ñù := Œª i, ‚à•f i‚à• ^ p.to_real - ‚à•(f - ‚àë i in s, lp.single p i (f i)) i‚à• ^ p.to_real,
  have hF : ‚àÄ i ‚àâ s, F i = 0,
  { intros i hi,
    suffices : ‚à•f i‚à• ^ p.to_real - ‚à•f i - ite (i ‚àà s) (f i) 0‚à• ^ p.to_real = 0,
    { simpa [F, coe_fn_sum, lp.single_apply] using this, },
    simp [if_neg hi] },
  have hF' : ‚àÄ i ‚àà s, F i = ‚à•f i‚à• ^ p.to_real,
  { intros i hi,
    simp [F, coe_fn_sum, lp.single_apply, if_pos hi, real.zero_rpow hp.ne'] },
  have : has_sum F (‚àë i in s, F i) := has_sum_sum_of_ne_finset_zero hF,
  rwa [finset.sum_congr rfl hF'] at this,
end

protected lemma norm_compl_sum_single (hp : 0 < p.to_real) (f : lp E p) (s : finset Œ±) :
  ‚à•f - ‚àë i in s, lp.single p i (f i)‚à• ^ p.to_real = ‚à•f‚à• ^ p.to_real - ‚àë i in s, ‚à•f i‚à• ^ p.to_real :=
by linarith [lp.norm_sub_norm_compl_sub_single hp f s]

/-- The canonical finitely-supported approximations to an element `f` of `lp` converge to it, in the
`lp` topology. -/
protected lemma has_sum_single [fact (1 ‚â§ p)] (hp : p ‚â† ‚ä§) (f : lp E p) :
  has_sum (Œª i : Œ±, lp.single p i (f i : E i)) f :=
begin
  have hp‚ÇÄ : 0 < p := ennreal.zero_lt_one.trans_le (fact.out _),
  have hp' : 0 < p.to_real := ennreal.to_real_pos hp‚ÇÄ.ne' hp,
  have := lp.has_sum_norm hp' f,
  dsimp [has_sum] at this ‚ä¢,
  rw metric.tendsto_nhds at this ‚ä¢,
  intros Œµ hŒµ,
  refine (this _ (real.rpow_pos_of_pos hŒµ p.to_real)).mono _,
  intros s hs,
  rw ‚Üê real.rpow_lt_rpow_iff dist_nonneg (le_of_lt hŒµ) hp',
  rw dist_comm at hs,
  simp only [dist_eq_norm, real.norm_eq_abs] at hs ‚ä¢,
  have H : ‚à•‚àë i in s, lp.single p i (f i : E i) - f‚à• ^ p.to_real
    = ‚à•f‚à• ^ p.to_real - ‚àë i in s, ‚à•f i‚à• ^ p.to_real,
  { simpa using lp.norm_compl_sum_single hp' (-f) s },
  rw ‚Üê H at hs,
  have : |‚à•‚àë i in s, lp.single p i (f i : E i) - f‚à• ^ p.to_real|
    = ‚à•‚àë i in s, lp.single p i (f i : E i) - f‚à• ^ p.to_real,
  { simp [real.abs_rpow_of_nonneg (norm_nonneg _)] },
  linarith
end

end single

section topology

open filter
open_locale topological_space uniformity

/-- The coercion from `lp E p` to `Œ† i, E i` is uniformly continuous. -/
lemma uniform_continuous_coe [_i : fact (1 ‚â§ p)] : uniform_continuous (coe : lp E p ‚Üí Œ† i, E i) :=
begin
  have hp : p ‚â† 0 := (ennreal.zero_lt_one.trans_le _i.elim).ne',
  rw uniform_continuous_pi,
  intros i,
  rw normed_group.uniformity_basis_dist.uniform_continuous_iff normed_group.uniformity_basis_dist,
  intros Œµ hŒµ,
  refine ‚ü®Œµ, hŒµ, _‚ü©,
  rintros f g (hfg : ‚à•f - g‚à• < Œµ),
  have : ‚à•f i - g i‚à• ‚â§ ‚à•f - g‚à• := norm_apply_le_norm hp (f - g) i,
  exact this.trans_lt hfg,
end

variables {Œπ : Type*} {l : filter Œπ} [filter.ne_bot l]

lemma norm_apply_le_of_tendsto {C : ‚Ñù} {F : Œπ ‚Üí lp E ‚àû} (hCF : ‚àÄ·∂† k in l, ‚à•F k‚à• ‚â§ C)
  {f : Œ† a, E a} (hf : tendsto (id (Œª i, F i) : Œπ ‚Üí Œ† a, E a) l (ùìù f)) (a : Œ±) :
  ‚à•f a‚à• ‚â§ C :=
begin
  have : tendsto (Œª k, ‚à•F k a‚à•) l (ùìù ‚à•f a‚à•) :=
    (tendsto.comp (continuous_apply a).continuous_at hf).norm,
  refine le_of_tendsto this (hCF.mono _),
  intros k hCFk,
  exact (norm_apply_le_norm ennreal.top_ne_zero (F k) a).trans hCFk,
end

variables [_i : fact (1 ‚â§ p)]

include _i

lemma sum_rpow_le_of_tendsto (hp : p ‚â† ‚àû) {C : ‚Ñù} {F : Œπ ‚Üí lp E p} (hCF : ‚àÄ·∂† k in l, ‚à•F k‚à• ‚â§ C)
  {f : Œ† a, E a} (hf : tendsto (id (Œª i, F i) : Œπ ‚Üí Œ† a, E a) l (ùìù f)) (s : finset Œ±) :
  ‚àë (i : Œ±) in s, ‚à•f i‚à• ^ p.to_real ‚â§ C ^ p.to_real :=
begin
  have hp' : p ‚â† 0 := (ennreal.zero_lt_one.trans_le _i.elim).ne',
  have hp'' : 0 < p.to_real := ennreal.to_real_pos hp' hp,
  let G : (Œ† a, E a) ‚Üí ‚Ñù := Œª f, ‚àë a in s, ‚à•f a‚à• ^ p.to_real,
  have hG : continuous G,
  { refine continuous_finset_sum s _,
    intros a ha,
    have : continuous (Œª f : Œ† a, E a, f a):= continuous_apply a,
    exact this.norm.rpow_const (Œª _, or.inr hp''.le) },
  refine le_of_tendsto (hG.continuous_at.tendsto.comp hf) _,
  refine hCF.mono _,
  intros k hCFk,
  refine (lp.sum_rpow_le_norm_rpow hp'' (F k) s).trans _,
  exact real.rpow_le_rpow (norm_nonneg _) hCFk hp''.le,
end

/-- "Semicontinuity of the `lp` norm": If all sufficiently large elements of a sequence in `lp E p`
 have `lp` norm `‚â§ C`, then the pointwise limit, if it exists, also has `lp` norm `‚â§ C`. -/
lemma norm_le_of_tendsto {C : ‚Ñù} {F : Œπ ‚Üí lp E p} (hCF : ‚àÄ·∂† k in l, ‚à•F k‚à• ‚â§ C) {f : lp E p}
  (hf : tendsto (id (Œª i, F i) : Œπ ‚Üí Œ† a, E a) l (ùìù f)) :
  ‚à•f‚à• ‚â§ C :=
begin
  obtain ‚ü®i, hi‚ü© := hCF.exists,
  have hC : 0 ‚â§ C := (norm_nonneg _).trans hi,
  unfreezingI { rcases eq_top_or_lt_top p with rfl | hp },
  { apply norm_le_of_forall_le hC,
    exact norm_apply_le_of_tendsto hCF hf, },
  { have : 0 < p := ennreal.zero_lt_one.trans_le _i.elim,
    have hp' : 0 < p.to_real := ennreal.to_real_pos this.ne' hp.ne,
    apply norm_le_of_forall_sum_le hp' hC,
    exact sum_rpow_le_of_tendsto hp.ne hCF hf, }
end

/-- If `f` is the pointwise limit of a bounded sequence in `lp E p`, then `f` is in `lp E p`. -/
lemma mem_‚Ñìp_of_tendsto {F : Œπ ‚Üí lp E p} (hF : metric.bounded (set.range F)) {f : Œ† a, E a}
  (hf : tendsto (id (Œª i, F i) : Œπ ‚Üí Œ† a, E a) l (ùìù f)) :
  mem_‚Ñìp f p :=
begin
  obtain ‚ü®C, hC, hCF'‚ü© := hF.exists_pos_norm_le,
  have hCF : ‚àÄ k, ‚à•F k‚à• ‚â§ C := Œª k, hCF' _ ‚ü®k, rfl‚ü©,
  unfreezingI { rcases eq_top_or_lt_top p with rfl | hp },
  { apply mem_‚Ñìp_infty,
    use C,
    rintros _ ‚ü®a, rfl‚ü©,
    refine norm_apply_le_of_tendsto (eventually_of_forall hCF) hf a, },
  { apply mem_‚Ñìp_gen',
    exact sum_rpow_le_of_tendsto hp.ne (eventually_of_forall hCF) hf },
end

/-- If a sequence is Cauchy in the `lp E p` topology and pointwise convergent to a element `f` of
`lp E p`, then it converges to `f` in the `lp E p` topology. -/
lemma tendsto_lp_of_tendsto_pi {F : ‚Ñï ‚Üí lp E p} (hF : cauchy_seq F) {f : lp E p}
  (hf : tendsto (id (Œª i, F i) : ‚Ñï ‚Üí Œ† a, E a) at_top (ùìù f)) :
  tendsto F at_top (ùìù f) :=
begin
  rw metric.nhds_basis_closed_ball.tendsto_right_iff,
  intros Œµ hŒµ,
  have hŒµ' : {p : (lp E p) √ó (lp E p) | ‚à•p.1 - p.2‚à• < Œµ} ‚àà ùì§ (lp E p),
  { exact normed_group.uniformity_basis_dist.mem_of_mem hŒµ },
  refine (hF.eventually_eventually hŒµ').mono _,
  rintros n (hn : ‚àÄ·∂† l in at_top, ‚à•(Œª f, F n - f) (F l)‚à• < Œµ),
  refine norm_le_of_tendsto (hn.mono (Œª k hk, hk.le)) _,
  rw tendsto_pi_nhds,
  intros a,
  exact (hf.apply a).const_sub (F n a),
end

variables [Œ† a, complete_space (E a)]

instance : complete_space (lp E p) :=
metric.complete_of_cauchy_seq_tendsto
begin
  intros F hF,
  -- A Cauchy sequence in `lp E p` is pointwise convergent; let `f` be the pointwise limit.
  obtain ‚ü®f, hf‚ü© := cauchy_seq_tendsto_of_complete (uniform_continuous_coe.comp_cauchy_seq hF),
  -- Since the Cauchy sequence is bounded, its pointwise limit `f` is in `lp E p`.
  have hf' : mem_‚Ñìp f p := mem_‚Ñìp_of_tendsto hF.bounded_range hf,
  -- And therefore `f` is its limit in the `lp E p` topology as well as pointwise.
  exact ‚ü®‚ü®f, hf'‚ü©, tendsto_lp_of_tendsto_pi hF hf‚ü©
end

end topology

end lp
