/-
Copyright (c) 2017 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Scott Morrison, Mario Carneiro, Andrew Yang
-/
import topology.category.Top.epi_mono
import category_theory.limits.preserves.limits
import category_theory.category.ulift
import category_theory.limits.shapes.types
import category_theory.limits.concrete_category

/-!
# The category of topological spaces has all limits and colimits

Further, these limits and colimits are preserved by the forgetful functor --- that is, the
underlying types are just the limits in the category of types.
-/

open topological_space
open category_theory
open category_theory.limits
open opposite

universes u v w

noncomputable theory

namespace Top

variables {J : Type u} [small_category J]

local notation `forget` := forget Top

/--
A choice of limit cone for a functor `F : J ‚•§ Top`.
Generally you should just use `limit.cone F`, unless you need the actual definition
(which is in terms of `types.limit_cone`).
-/
def limit_cone (F : J ‚•§ Top.{u}) : cone F :=
{ X := Top.of {u : Œ† j : J, F.obj j | ‚àÄ {i j : J} (f : i ‚ü∂ j), F.map f (u i) = u j},
  œÄ :=
  { app := Œª j,
    { to_fun := Œª u, u.val j,
      continuous_to_fun := show continuous ((Œª u : Œ† j : J, F.obj j, u j) ‚àò subtype.val),
        by continuity } } }

/--
A choice of limit cone for a functor `F : J ‚•§ Top` whose topology is defined as an
infimum of topologies infimum.
Generally you should just use `limit.cone F`, unless you need the actual definition
(which is in terms of `types.limit_cone`).
-/
def limit_cone_infi (F : J ‚•§ Top.{u}) : cone F :=
{ X := ‚ü®(types.limit_cone (F ‚ãô forget)).X, ‚®Öj,
        (F.obj j).str.induced ((types.limit_cone (F ‚ãô forget)).œÄ.app j)‚ü©,
  œÄ :=
  { app := Œª j, ‚ü®(types.limit_cone (F ‚ãô forget)).œÄ.app j,
                 continuous_iff_le_induced.mpr (infi_le _ _)‚ü©,
    naturality' := Œª j j' f,
                   continuous_map.coe_inj ((types.limit_cone (F ‚ãô forget)).œÄ.naturality f) } }

/--
The chosen cone `Top.limit_cone F` for a functor `F : J ‚•§ Top` is a limit cone.
Generally you should just use `limit.is_limit F`, unless you need the actual definition
(which is in terms of `types.limit_cone_is_limit`).
-/
def limit_cone_is_limit (F : J ‚•§ Top.{u}) : is_limit (limit_cone F) :=
{ lift := Œª S, { to_fun := Œª x, ‚ü®Œª j, S.œÄ.app _ x, Œª i j f, by { dsimp, erw ‚Üê S.w f, refl }‚ü© },
  uniq' := Œª S m h, by { ext : 3, simpa [‚Üê h] } }

/--
The chosen cone `Top.limit_cone_infi F` for a functor `F : J ‚•§ Top` is a limit cone.
Generally you should just use `limit.is_limit F`, unless you need the actual definition
(which is in terms of `types.limit_cone_is_limit`).
-/
def limit_cone_infi_is_limit (F : J ‚•§ Top.{u}) : is_limit (limit_cone_infi F) :=
by { refine is_limit.of_faithful forget (types.limit_cone_is_limit _) (Œª s, ‚ü®_, _‚ü©) (Œª s, rfl),
     exact continuous_iff_coinduced_le.mpr (le_infi $ Œª j,
       coinduced_le_iff_le_induced.mp $ (continuous_iff_coinduced_le.mp (s.œÄ.app j).continuous :
         _) ) }

instance Top_has_limits : has_limits.{u} Top.{u} :=
{ has_limits_of_shape := Œª J ùí•, by exactI
  { has_limit := Œª F, has_limit.mk { cone := limit_cone F, is_limit := limit_cone_is_limit F } } }

instance forget_preserves_limits : preserves_limits (forget : Top.{u} ‚•§ Type u) :=
{ preserves_limits_of_shape := Œª J ùí•,
  { preserves_limit := Œª F,
    by exactI preserves_limit_of_preserves_limit_cone
      (limit_cone_is_limit F) (types.limit_cone_is_limit (F ‚ãô forget)) } }

/--
A choice of colimit cocone for a functor `F : J ‚•§ Top`.
Generally you should just use `colimit.coone F`, unless you need the actual definition
(which is in terms of `types.colimit_cocone`).
-/
def colimit_cocone (F : J ‚•§ Top.{u}) : cocone F :=
{ X := ‚ü®(types.colimit_cocone (F ‚ãô forget)).X, ‚®Ü j,
        (F.obj j).str.coinduced ((types.colimit_cocone (F ‚ãô forget)).Œπ.app j)‚ü©,
  Œπ :=
  { app := Œª j, ‚ü®(types.colimit_cocone (F ‚ãô forget)).Œπ.app j,
                 continuous_iff_coinduced_le.mpr (le_supr _ j)‚ü©,
    naturality' := Œª j j' f,
                   continuous_map.coe_inj ((types.colimit_cocone (F ‚ãô forget)).Œπ.naturality f) } }

/--
The chosen cocone `Top.colimit_cocone F` for a functor `F : J ‚•§ Top` is a colimit cocone.
Generally you should just use `colimit.is_colimit F`, unless you need the actual definition
(which is in terms of `types.colimit_cocone_is_colimit`).
-/
def colimit_cocone_is_colimit (F : J ‚•§ Top.{u}) : is_colimit (colimit_cocone F) :=
by { refine is_colimit.of_faithful forget (types.colimit_cocone_is_colimit _) (Œª s, ‚ü®_, _‚ü©)
       (Œª s, rfl),
     exact continuous_iff_le_induced.mpr (supr_le $ Œª j,
       coinduced_le_iff_le_induced.mp $ (continuous_iff_coinduced_le.mp (s.Œπ.app j).continuous :
         _) ) }

instance Top_has_colimits : has_colimits.{u} Top.{u} :=
{ has_colimits_of_shape := Œª J ùí•, by exactI
  { has_colimit := Œª F, has_colimit.mk { cocone := colimit_cocone F, is_colimit :=
    colimit_cocone_is_colimit F } } }

instance forget_preserves_colimits : preserves_colimits (forget : Top.{u} ‚•§ Type u) :=
{ preserves_colimits_of_shape := Œª J ùí•,
  { preserves_colimit := Œª F,
    by exactI preserves_colimit_of_preserves_colimit_cocone
      (colimit_cocone_is_colimit F) (types.colimit_cocone_is_colimit (F ‚ãô forget)) } }

/-- The projection from the product as a bundled continous map. -/
abbreviation pi_œÄ {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) (i : Œπ) : Top.of (Œ† i, Œ± i) ‚ü∂ Œ± i :=
‚ü®Œª f, f i, continuous_apply i‚ü©

/-- The explicit fan of a family of topological spaces given by the pi type. -/
@[simps X œÄ_app]
def pi_fan {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) : fan Œ± :=
fan.mk (Top.of (Œ† i, Œ± i)) (pi_œÄ Œ±)

/-- The constructed fan is indeed a limit -/
def pi_fan_is_limit {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) : is_limit (pi_fan Œ±) :=
{ lift := Œª S, { to_fun := Œª s i, S.œÄ.app i s },
  uniq' := by { intros S m h, ext x i, simp [‚Üê h i] } }

/--
The product is homeomorphic to the product of the underlying spaces,
equipped with the product topology.
-/
def pi_iso_pi {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) : ‚àè Œ± ‚âÖ Top.of (Œ† i, Œ± i) :=
(limit.is_limit _).cone_point_unique_up_to_iso (pi_fan_is_limit Œ±)

@[simp, reassoc]
lemma pi_iso_pi_inv_œÄ {Œπ : Type u} (Œ± : Œπ ‚Üí Top) (i : Œπ) :
  (pi_iso_pi Œ±).inv ‚â´ pi.œÄ Œ± i = pi_œÄ Œ± i :=
by simp [pi_iso_pi]

@[simp]
lemma pi_iso_pi_inv_œÄ_apply {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) (i : Œπ) (x : Œ† i, Œ± i) :
  (pi.œÄ Œ± i : _) ((pi_iso_pi Œ±).inv x) = x i :=
concrete_category.congr_hom (pi_iso_pi_inv_œÄ Œ± i) x

@[simp]
lemma pi_iso_pi_hom_apply {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) (i : Œπ) (x : ‚àè Œ±) :
  (pi_iso_pi Œ±).hom x i = (pi.œÄ Œ± i : _) x :=
begin
  have := pi_iso_pi_inv_œÄ Œ± i,
  rw iso.inv_comp_eq at this,
  exact concrete_category.congr_hom this x
end

/-- The inclusion to the coproduct as a bundled continous map. -/
abbreviation sigma_Œπ {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) (i : Œπ) : Œ± i ‚ü∂ Top.of (Œ£ i, Œ± i) :=
‚ü®sigma.mk i‚ü©

/-- The explicit cofan of a family of topological spaces given by the sigma type. -/
@[simps X Œπ_app]
def sigma_cofan {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) : cofan Œ± :=
cofan.mk (Top.of (Œ£ i, Œ± i)) (sigma_Œπ Œ±)

/-- The constructed cofan is indeed a colimit -/
def sigma_cofan_is_colimit {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) : is_colimit (sigma_cofan Œ±) :=
{ desc := Œª S, { to_fun := Œª s, S.Œπ.app s.1 s.2,
    continuous_to_fun := by { continuity, dsimp only, continuity } },
  uniq' := by { intros S m h,  ext ‚ü®i, x‚ü©, simp [‚Üê h i] } }

/--
The coproduct is homeomorphic to the disjoint union of the topological spaces.
-/
def sigma_iso_sigma {Œπ : Type u} (Œ± : Œπ ‚Üí Top.{u}) : ‚àê Œ± ‚âÖ Top.of (Œ£ i, Œ± i) :=
(colimit.is_colimit _).cocone_point_unique_up_to_iso (sigma_cofan_is_colimit Œ±)

@[simp, reassoc]
lemma sigma_iso_sigma_hom_Œπ {Œπ : Type u} (Œ± : Œπ ‚Üí Top) (i : Œπ) :
  sigma.Œπ Œ± i ‚â´ (sigma_iso_sigma Œ±).hom = sigma_Œπ Œ± i :=
by simp [sigma_iso_sigma]

@[simp]
lemma sigma_iso_sigma_hom_Œπ_apply {Œπ : Type u} (Œ± : Œπ ‚Üí Top) (i : Œπ) (x : Œ± i) :
  (sigma_iso_sigma Œ±).hom ((sigma.Œπ Œ± i : _) x) = sigma.mk i x :=
concrete_category.congr_hom (sigma_iso_sigma_hom_Œπ Œ± i) x

@[simp]
lemma sigma_iso_sigma_inv_apply {Œπ : Type u} (Œ± : Œπ ‚Üí Top) (i : Œπ) (x : Œ± i) :
  (sigma_iso_sigma Œ±).inv ‚ü®i, x‚ü© = (sigma.Œπ Œ± i : _) x :=
by { rw [‚Üê sigma_iso_sigma_hom_Œπ_apply, ‚Üê comp_app], simp, }

lemma induced_of_is_limit {F : J ‚•§ Top.{u}} (C : cone F) (hC : is_limit C) :
  C.X.topological_space = ‚®Ö j, (F.obj j).topological_space.induced (C.œÄ.app j) :=
begin
  let homeo := homeo_of_iso (hC.cone_point_unique_up_to_iso (limit_cone_infi_is_limit F)),
  refine homeo.inducing.induced.trans _,
  change induced homeo (‚®Ö (j : J), _) = _,
  simpa [induced_infi, induced_compose],
end

lemma limit_topology (F : J ‚•§ Top.{u}) :
  (limit F).topological_space = ‚®Ö j, (F.obj j).topological_space.induced (limit.œÄ F j) :=
induced_of_is_limit _ (limit.is_limit F)

section prod

/-- The first projection from the product. -/
abbreviation prod_fst {X Y : Top.{u}} : Top.of (X √ó Y) ‚ü∂ X := ‚ü®prod.fst‚ü©

/-- The second projection from the product. -/
abbreviation prod_snd {X Y : Top.{u}} : Top.of (X √ó Y) ‚ü∂ Y := ‚ü®prod.snd‚ü©

/-- The explicit binary cofan of `X, Y` given by `X √ó Y`. -/
def prod_binary_fan (X Y : Top.{u}) : binary_fan X Y :=
binary_fan.mk prod_fst prod_snd

/-- The constructed binary fan is indeed a limit -/
def prod_binary_fan_is_limit (X Y : Top.{u}) : is_limit (prod_binary_fan X Y) :=
{ lift := Œª (S : binary_fan X Y), { to_fun := Œª s, (S.fst s, S.snd s) },
  fac' := begin
    rintros S (_|_),
    tidy
  end,
  uniq' := begin
    intros S m h,
    ext x,
    { specialize h walking_pair.left,
      apply_fun (Œª e, (e x)) at h,
      exact h },
     { specialize h walking_pair.right,
      apply_fun (Œª e, (e x)) at h,
      exact h },
  end }

/--
The homeomorphism between `X ‚®Ø Y` and the set-theoretic product of `X` and `Y`,
equipped with the product topology.
-/
def prod_iso_prod (X Y : Top.{u}) : X ‚®Ø Y ‚âÖ Top.of (X √ó Y) :=
(limit.is_limit _).cone_point_unique_up_to_iso (prod_binary_fan_is_limit X Y)

@[simp, reassoc] lemma prod_iso_prod_hom_fst (X Y : Top.{u}) :
  (prod_iso_prod X Y).hom ‚â´ prod_fst = limits.prod.fst :=
by simpa [‚Üê iso.eq_inv_comp, prod_iso_prod]

@[simp, reassoc] lemma prod_iso_prod_hom_snd (X Y : Top.{u}) :
  (prod_iso_prod X Y).hom ‚â´ prod_snd = limits.prod.snd :=
by simpa [‚Üê iso.eq_inv_comp, prod_iso_prod]

@[simp] lemma prod_iso_prod_hom_apply {X Y : Top.{u}} (x : X ‚®Ø Y) :
  (prod_iso_prod X Y).hom x =
    ((limits.prod.fst : X ‚®Ø Y ‚ü∂ _) x, (limits.prod.snd : X ‚®Ø Y ‚ü∂ _) x) :=
begin
  ext,
  { exact concrete_category.congr_hom (prod_iso_prod_hom_fst X Y) x },
  { exact concrete_category.congr_hom (prod_iso_prod_hom_snd X Y) x }
end

@[simp, reassoc, elementwise] lemma prod_iso_prod_inv_fst (X Y : Top.{u}) :
  (prod_iso_prod X Y).inv ‚â´ limits.prod.fst = prod_fst :=
by simp [iso.inv_comp_eq]

@[simp, reassoc, elementwise] lemma prod_iso_prod_inv_snd (X Y : Top.{u}) :
  (prod_iso_prod X Y).inv ‚â´ limits.prod.snd = prod_snd :=
by simp [iso.inv_comp_eq]

lemma prod_topology {X Y : Top} :
  (X ‚®Ø Y).topological_space =
    induced (limits.prod.fst : X ‚®Ø Y ‚ü∂ _) X.topological_space ‚äì
      induced (limits.prod.snd : X ‚®Ø Y ‚ü∂ _) Y.topological_space :=
begin
  let homeo := homeo_of_iso (prod_iso_prod X Y),
  refine homeo.inducing.induced.trans _,
  change induced homeo (_ ‚äì _) = _,
  simpa [induced_compose]
end

lemma range_prod_map {W X Y Z : Top.{u}} (f : W ‚ü∂ Y) (g : X ‚ü∂ Z) :
  set.range (limits.prod.map f g) =
    (limits.prod.fst : Y ‚®Ø Z ‚ü∂ _) ‚Åª¬π' (set.range f) ‚à©
      (limits.prod.snd : Y ‚®Ø Z ‚ü∂ _) ‚Åª¬π' (set.range g) :=
begin
  ext,
  split,
  { rintros ‚ü®y, rfl‚ü©,
    simp only [set.mem_preimage, set.mem_range, set.mem_inter_eq, ‚Üêcomp_apply],
    simp only [limits.prod.map_fst, limits.prod.map_snd,
      exists_apply_eq_apply, comp_apply, and_self] },
  { rintros ‚ü®‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü©‚ü©,
    use (prod_iso_prod W X).inv (x‚ÇÅ, x‚ÇÇ),
    apply concrete.limit_ext,
    rintro ‚ü®‚ü©,
    { simp only [‚Üê comp_apply, category.assoc], erw limits.prod.map_fst, simp [hx‚ÇÅ] },
    { simp only [‚Üê comp_apply, category.assoc], erw limits.prod.map_snd, simp [hx‚ÇÇ] } }
end

lemma inducing_prod_map {W X Y Z : Top} {f : W ‚ü∂ X} {g : Y ‚ü∂ Z}
  (hf : inducing f) (hg : inducing g) : inducing (limits.prod.map f g) :=
begin
  constructor,
  simp only [prod_topology, induced_compose, ‚Üêcoe_comp, limits.prod.map_fst, limits.prod.map_snd,
    induced_inf],
  simp only [coe_comp],
  rw [‚Üê @induced_compose _ _ _ _ _ f, ‚Üê @induced_compose _ _ _ _ _ g, ‚Üê hf.induced, ‚Üê hg.induced]
end

lemma embedding_prod_map {W X Y Z : Top} {f : W ‚ü∂ X} {g : Y ‚ü∂ Z}
  (hf : embedding f) (hg : embedding g) : embedding (limits.prod.map f g) :=
‚ü®inducing_prod_map hf.to_inducing hg.to_inducing,
begin
  haveI := (Top.mono_iff_injective _).mpr hf.inj,
  haveI := (Top.mono_iff_injective _).mpr hg.inj,
  exact (Top.mono_iff_injective _).mp infer_instance
end‚ü©

end prod

section pullback

variables {X Y Z : Top.{u}}

/-- The first projection from the pullback. -/
abbreviation pullback_fst (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : Top.of { p : X √ó Y // f p.1 = g p.2 } ‚ü∂ X :=
‚ü®prod.fst ‚àò subtype.val‚ü©

/-- The second projection from the pullback. -/
abbreviation pullback_snd (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : Top.of { p : X √ó Y // f p.1 = g p.2 } ‚ü∂ Y :=
‚ü®prod.snd ‚àò subtype.val‚ü©

/-- The explicit pullback cone of `X, Y` given by `{ p : X √ó Y // f p.1 = g p.2 }`. -/
def pullback_cone (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : pullback_cone f g :=
pullback_cone.mk (pullback_fst f g) (pullback_snd f g) (by { ext ‚ü®x, h‚ü©, simp [h] })

/-- The constructed cone is a limit. -/
def pullback_cone_is_limit (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  is_limit (pullback_cone f g) := pullback_cone.is_limit_aux' _
begin
  intro s,
  split, swap,
  exact { to_fun := Œª x, ‚ü®‚ü®s.fst x, s.snd x‚ü©,
    by simpa using concrete_category.congr_hom s.condition x‚ü© },
  refine ‚ü®_,_,_‚ü©,
  { ext, delta pullback_cone, simp },
  { ext, delta pullback_cone, simp },
  { intros m h‚ÇÅ h‚ÇÇ,
    ext x,
    { simpa using concrete_category.congr_hom h‚ÇÅ x },
    { simpa using concrete_category.congr_hom h‚ÇÇ x } }
end

/-- The pullback of two maps can be identified as a subspace of `X √ó Y`. -/
def pullback_iso_prod_subtype (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  pullback f g ‚âÖ Top.of { p : X √ó Y // f p.1 = g p.2 } :=
(limit.is_limit _).cone_point_unique_up_to_iso (pullback_cone_is_limit f g)

@[simp, reassoc] lemma pullback_iso_prod_subtype_inv_fst (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  (pullback_iso_prod_subtype f g).inv ‚â´ pullback.fst = pullback_fst f g :=
by simpa [pullback_iso_prod_subtype]

@[simp] lemma pullback_iso_prod_subtype_inv_fst_apply (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
  (x : { p : X √ó Y // f p.1 = g p.2 }) :
  (pullback.fst : pullback f g ‚ü∂ _) ((pullback_iso_prod_subtype f g).inv x) = (x : X √ó Y).fst :=
concrete_category.congr_hom (pullback_iso_prod_subtype_inv_fst f g) x

@[simp, reassoc] lemma pullback_iso_prod_subtype_inv_snd (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  (pullback_iso_prod_subtype f g).inv ‚â´ pullback.snd = pullback_snd f g :=
by simpa [pullback_iso_prod_subtype]

@[simp] lemma pullback_iso_prod_subtype_inv_snd_apply (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z)
  (x : { p : X √ó Y // f p.1 = g p.2 }) :
  (pullback.snd : pullback f g ‚ü∂ _) ((pullback_iso_prod_subtype f g).inv x) = (x : X √ó Y).snd :=
concrete_category.congr_hom (pullback_iso_prod_subtype_inv_snd f g) x

lemma pullback_iso_prod_subtype_hom_fst (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  (pullback_iso_prod_subtype f g).hom ‚â´ pullback_fst f g = pullback.fst :=
by rw [‚Üêiso.eq_inv_comp, pullback_iso_prod_subtype_inv_fst]

lemma pullback_iso_prod_subtype_hom_snd (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  (pullback_iso_prod_subtype f g).hom ‚â´ pullback_snd f g = pullback.snd :=
by rw [‚Üêiso.eq_inv_comp, pullback_iso_prod_subtype_inv_snd]

@[simp] lemma pullback_iso_prod_subtype_hom_apply {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z}
  (x : pullback f g) : (pullback_iso_prod_subtype f g).hom x =
    ‚ü®‚ü®(pullback.fst : pullback f g ‚ü∂ _) x, (pullback.snd : pullback f g ‚ü∂ _) x‚ü©,
      by simpa using concrete_category.congr_hom pullback.condition x‚ü© :=
begin
  ext,
  exacts [concrete_category.congr_hom (pullback_iso_prod_subtype_hom_fst f g) x,
    concrete_category.congr_hom (pullback_iso_prod_subtype_hom_snd f g) x]
end

lemma pullback_topology {X Y Z : Top.{u}} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  (pullback f g).topological_space =
    induced (pullback.fst : pullback f g ‚ü∂ _) X.topological_space ‚äì
      induced (pullback.snd : pullback f g ‚ü∂ _) Y.topological_space :=
begin
  let homeo := homeo_of_iso (pullback_iso_prod_subtype f g),
  refine homeo.inducing.induced.trans _,
  change induced homeo (induced _ (_ ‚äì _)) = _,
  simpa [induced_compose]
end

lemma range_pullback_to_prod {X Y Z : Top} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  set.range (prod.lift pullback.fst pullback.snd : pullback f g ‚ü∂ X ‚®Ø Y) =
  { x | (limits.prod.fst ‚â´ f) x = (limits.prod.snd ‚â´ g) x } :=
begin
  ext x,
  split,
  { rintros ‚ü®y, rfl‚ü©,
    simp only [‚Üêcomp_apply, set.mem_set_of_eq],
    congr' 1,
    simp [pullback.condition] },
  { intro h,
    use (pullback_iso_prod_subtype f g).inv ‚ü®‚ü®_, _‚ü©, h‚ü©,
    apply concrete.limit_ext,
    rintro ‚ü®‚ü©; simp }
end

lemma inducing_pullback_to_prod {X Y Z : Top} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  inducing ‚áë(prod.lift pullback.fst pullback.snd : pullback f g ‚ü∂ X ‚®Ø Y) :=
‚ü®by simp [prod_topology, pullback_topology, induced_compose, ‚Üêcoe_comp]‚ü©

lemma embedding_pullback_to_prod {X Y Z : Top} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) :
  embedding ‚áë(prod.lift pullback.fst pullback.snd : pullback f g ‚ü∂ X ‚®Ø Y) :=
‚ü®inducing_pullback_to_prod f g, (Top.mono_iff_injective _).mp infer_instance‚ü©

/-- If the map `S ‚ü∂ T` is mono, then there is a description of the image of `W √ó‚Çõ X ‚ü∂ Y √ó‚Çú Z`. -/
lemma range_pullback_map {W X Y Z S T : Top} (f‚ÇÅ : W ‚ü∂ S) (f‚ÇÇ : X ‚ü∂ S)
  (g‚ÇÅ : Y ‚ü∂ T) (g‚ÇÇ : Z ‚ü∂ T) (i‚ÇÅ : W ‚ü∂ Y) (i‚ÇÇ : X ‚ü∂ Z) (i‚ÇÉ : S ‚ü∂ T) [H‚ÇÉ : mono i‚ÇÉ]
  (eq‚ÇÅ : f‚ÇÅ ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ g‚ÇÅ) (eq‚ÇÇ : f‚ÇÇ ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g‚ÇÇ) :
  set.range (pullback.map f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ eq‚ÇÅ eq‚ÇÇ) =
    (pullback.fst : pullback g‚ÇÅ g‚ÇÇ ‚ü∂ _) ‚Åª¬π' (set.range i‚ÇÅ) ‚à©
      (pullback.snd : pullback g‚ÇÅ g‚ÇÇ ‚ü∂ _) ‚Åª¬π' (set.range i‚ÇÇ) :=
begin
  ext,
  split,
  { rintro ‚ü®y, rfl‚ü©, simp, },
  rintros ‚ü®‚ü®x‚ÇÅ, hx‚ÇÅ‚ü©, ‚ü®x‚ÇÇ, hx‚ÇÇ‚ü©‚ü©,
  have : f‚ÇÅ x‚ÇÅ = f‚ÇÇ x‚ÇÇ,
  { apply (Top.mono_iff_injective _).mp H‚ÇÉ,
    simp only [‚Üêcomp_apply, eq‚ÇÅ, eq‚ÇÇ],
    simp only [comp_apply, hx‚ÇÅ, hx‚ÇÇ],
    simp only [‚Üêcomp_apply, pullback.condition] },
  use (pullback_iso_prod_subtype f‚ÇÅ f‚ÇÇ).inv ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, this‚ü©,
  apply concrete.limit_ext,
  rintros (_|_|_),
  { simp only [Top.comp_app, limit.lift_œÄ_apply, category.assoc, pullback_cone.mk_œÄ_app_one,
      hx‚ÇÅ, pullback_iso_prod_subtype_inv_fst_apply, subtype.coe_mk],
    simp only [‚Üê comp_apply],
    congr,
    apply limit.w _ walking_cospan.hom.inl },
  { simp [hx‚ÇÅ] },
  { simp [hx‚ÇÇ] },
end

lemma pullback_fst_range {X Y S : Top} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) :
  set.range (pullback.fst : pullback f g ‚ü∂ _) = { x : X | ‚àÉ y : Y, f x = g y} :=
begin
  ext x,
  split,
  { rintro ‚ü®y, rfl‚ü©,
    use (pullback.snd : pullback f g ‚ü∂ _) y,
    exact concrete_category.congr_hom pullback.condition y },
  { rintro ‚ü®y, eq‚ü©,
    use (Top.pullback_iso_prod_subtype f g).inv ‚ü®‚ü®x, y‚ü©, eq‚ü©,
    simp },
end

lemma pullback_snd_range {X Y S : Top} (f : X ‚ü∂ S) (g : Y ‚ü∂ S) :
  set.range (pullback.snd : pullback f g ‚ü∂ _) = { y : Y | ‚àÉ x : X, f x = g y} :=
begin
  ext y,
  split,
  { rintro ‚ü®x, rfl‚ü©,
    use (pullback.fst : pullback f g ‚ü∂ _) x,
    exact concrete_category.congr_hom pullback.condition x },
  { rintro ‚ü®x, eq‚ü©,
    use (Top.pullback_iso_prod_subtype f g).inv ‚ü®‚ü®x, y‚ü©, eq‚ü©,
    simp },
end

/--
If there is a diagram where the morphisms `W ‚ü∂ Y` and `X ‚ü∂ Z` are embeddings,
then the induced morphism `W √ó‚Çõ X ‚ü∂ Y √ó‚Çú Z` is also an embedding.

  W  ‚ü∂  Y
    ‚Üò      ‚Üò
      S  ‚ü∂  T
    ‚Üó      ‚Üó
  X  ‚ü∂  Z
-/
lemma pullback_map_embedding_of_embeddings {W X Y Z S T : Top}
  (f‚ÇÅ : W ‚ü∂ S) (f‚ÇÇ : X ‚ü∂ S) (g‚ÇÅ : Y ‚ü∂ T) (g‚ÇÇ : Z ‚ü∂ T) {i‚ÇÅ : W ‚ü∂ Y} {i‚ÇÇ : X ‚ü∂ Z}
  (H‚ÇÅ : embedding i‚ÇÅ) (H‚ÇÇ : embedding i‚ÇÇ) (i‚ÇÉ : S ‚ü∂ T)
  (eq‚ÇÅ : f‚ÇÅ ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ g‚ÇÅ) (eq‚ÇÇ : f‚ÇÇ ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g‚ÇÇ) :
  embedding (pullback.map f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ eq‚ÇÅ eq‚ÇÇ) :=
begin
  refine embedding_of_embedding_compose (continuous_map.continuous_to_fun _)
    (show continuous (prod.lift pullback.fst pullback.snd : pullback g‚ÇÅ g‚ÇÇ ‚ü∂ Y ‚®Ø Z), from
      continuous_map.continuous_to_fun _) _,
  suffices : embedding
    (prod.lift pullback.fst pullback.snd ‚â´ limits.prod.map i‚ÇÅ i‚ÇÇ : pullback f‚ÇÅ f‚ÇÇ ‚ü∂ _),
  { simpa [‚Üêcoe_comp] using this },
  rw coe_comp,
  refine embedding.comp (embedding_prod_map H‚ÇÅ H‚ÇÇ)
    (embedding_pullback_to_prod _ _)
end

/--
If there is a diagram where the morphisms `W ‚ü∂ Y` and `X ‚ü∂ Z` are open embeddings, and `S ‚ü∂ T`
is mono, then the induced morphism `W √ó‚Çõ X ‚ü∂ Y √ó‚Çú Z` is also an open embedding.
  W  ‚ü∂  Y
    ‚Üò      ‚Üò
      S  ‚ü∂  T
    ‚Üó       ‚Üó
  X  ‚ü∂  Z
-/
lemma pullback_map_open_embedding_of_open_embeddings {W X Y Z S T : Top}
  (f‚ÇÅ : W ‚ü∂ S) (f‚ÇÇ : X ‚ü∂ S) (g‚ÇÅ : Y ‚ü∂ T) (g‚ÇÇ : Z ‚ü∂ T) {i‚ÇÅ : W ‚ü∂ Y} {i‚ÇÇ : X ‚ü∂ Z}
  (H‚ÇÅ : open_embedding i‚ÇÅ) (H‚ÇÇ : open_embedding i‚ÇÇ) (i‚ÇÉ : S ‚ü∂ T) [H‚ÇÉ : mono i‚ÇÉ]
  (eq‚ÇÅ : f‚ÇÅ ‚â´ i‚ÇÉ = i‚ÇÅ ‚â´ g‚ÇÅ) (eq‚ÇÇ : f‚ÇÇ ‚â´ i‚ÇÉ = i‚ÇÇ ‚â´ g‚ÇÇ) :
  open_embedding (pullback.map f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ i‚ÇÅ i‚ÇÇ i‚ÇÉ eq‚ÇÅ eq‚ÇÇ) :=
begin
  split,
  { apply pullback_map_embedding_of_embeddings
      f‚ÇÅ f‚ÇÇ g‚ÇÅ g‚ÇÇ H‚ÇÅ.to_embedding H‚ÇÇ.to_embedding i‚ÇÉ eq‚ÇÅ eq‚ÇÇ },
  { rw range_pullback_map,
    apply is_open.inter; apply continuous.is_open_preimage,
    continuity,
    exacts [H‚ÇÅ.open_range, H‚ÇÇ.open_range] }
end

lemma snd_embedding_of_left_embedding {X Y S : Top}
  {f : X ‚ü∂ S} (H : embedding f) (g : Y ‚ü∂ S) :
  embedding ‚áë(pullback.snd : pullback f g ‚ü∂ Y) :=
begin
  convert (homeo_of_iso (as_iso (pullback.snd : pullback (ùüô S) g ‚ü∂ _))).embedding.comp
    (pullback_map_embedding_of_embeddings f g (ùüô _) g H
      (homeo_of_iso (iso.refl _)).embedding (ùüô _) rfl (by simp)),
  erw ‚Üêcoe_comp,
  simp
end

lemma fst_embedding_of_right_embedding {X Y S : Top}
  (f : X ‚ü∂ S) {g : Y ‚ü∂ S} (H : embedding g) :
  embedding ‚áë(pullback.fst : pullback f g ‚ü∂ X) :=
begin
  convert (homeo_of_iso (as_iso (pullback.fst : pullback f (ùüô S) ‚ü∂ _))).embedding.comp
    (pullback_map_embedding_of_embeddings f g f (ùüô _)
      (homeo_of_iso (iso.refl _)).embedding H (ùüô _) rfl (by simp)),
  erw ‚Üêcoe_comp,
  simp
end

lemma embedding_of_pullback_embeddings {X Y S : Top}
  {f : X ‚ü∂ S} {g : Y ‚ü∂ S} (H‚ÇÅ : embedding f) (H‚ÇÇ : embedding g) :
  embedding (limit.œÄ (cospan f g) walking_cospan.one) :=
begin
  convert H‚ÇÇ.comp (snd_embedding_of_left_embedding H‚ÇÅ g),
  erw ‚Üêcoe_comp,
  congr,
  exact (limit.w _ walking_cospan.hom.inr).symm
end

lemma snd_open_embedding_of_left_open_embedding {X Y S : Top}
  {f : X ‚ü∂ S} (H : open_embedding f) (g : Y ‚ü∂ S) :
  open_embedding ‚áë(pullback.snd : pullback f g ‚ü∂ Y) :=
begin
  convert (homeo_of_iso (as_iso (pullback.snd : pullback (ùüô S) g ‚ü∂ _))).open_embedding.comp
    (pullback_map_open_embedding_of_open_embeddings f g (ùüô _) g H
      (homeo_of_iso (iso.refl _)).open_embedding (ùüô _) rfl (by simp)),
  erw ‚Üêcoe_comp,
  simp
end

lemma fst_open_embedding_of_right_open_embedding {X Y S : Top}
  (f : X ‚ü∂ S) {g : Y ‚ü∂ S} (H : open_embedding g) :
  open_embedding ‚áë(pullback.fst : pullback f g ‚ü∂ X) :=
begin
  convert (homeo_of_iso (as_iso (pullback.fst : pullback f (ùüô S) ‚ü∂ _))).open_embedding.comp
    (pullback_map_open_embedding_of_open_embeddings f g f (ùüô _)
      (homeo_of_iso (iso.refl _)).open_embedding H (ùüô _) rfl (by simp)),
  erw ‚Üêcoe_comp,
  simp
end

/-- If `X ‚ü∂ S`, `Y ‚ü∂ S` are open embeddings, then so is `X √ó‚Çõ Y ‚ü∂ S`. -/
lemma open_embedding_of_pullback_open_embeddings {X Y S : Top}
  {f : X ‚ü∂ S} {g : Y ‚ü∂ S} (H‚ÇÅ : open_embedding f) (H‚ÇÇ : open_embedding g) :
  open_embedding (limit.œÄ (cospan f g) walking_cospan.one) :=
begin
  convert H‚ÇÇ.comp (snd_open_embedding_of_left_open_embedding H‚ÇÅ g),
  erw ‚Üêcoe_comp,
  congr,
  exact (limit.w _ walking_cospan.hom.inr).symm
end

lemma fst_iso_of_right_embedding_range_subset {X Y S : Top} (f : X ‚ü∂ S) {g : Y ‚ü∂ S}
  (hg : embedding g) (H : set.range f ‚äÜ set.range g) : is_iso (pullback.fst : pullback f g ‚ü∂ X) :=
begin
  let : (pullback f g : Top) ‚âÉ‚Çú X :=
    (homeomorph.of_embedding _ (fst_embedding_of_right_embedding f hg)).trans
    { to_fun := coe,
      inv_fun := (Œª x, ‚ü®x,
        by { rw pullback_fst_range, exact ‚ü®_, (H (set.mem_range_self x)).some_spec.symm‚ü© }‚ü©),
      left_inv := Œª ‚ü®_,_‚ü©, rfl,
      right_inv := Œª x, rfl },
  convert is_iso.of_iso (iso_of_homeo this),
  ext,
  refl
end

lemma snd_iso_of_left_embedding_range_subset {X Y S : Top} {f : X ‚ü∂ S} (hf : embedding f)
  (g : Y ‚ü∂ S) (H : set.range g ‚äÜ set.range f) : is_iso (pullback.snd : pullback f g ‚ü∂ Y) :=
begin
  let : (pullback f g : Top) ‚âÉ‚Çú Y :=
    (homeomorph.of_embedding _ (snd_embedding_of_left_embedding hf g)).trans
    { to_fun := coe,
      inv_fun := (Œª x, ‚ü®x,
        by { rw pullback_snd_range, exact ‚ü®_, (H (set.mem_range_self x)).some_spec‚ü© }‚ü©),
      left_inv := Œª ‚ü®_,_‚ü©, rfl,
      right_inv := Œª x, rfl },
  convert is_iso.of_iso (iso_of_homeo this),
  ext,
  refl
end

lemma pullback_snd_image_fst_preimage (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (U : set X) :
  (pullback.snd : pullback f g ‚ü∂ _) '' ((pullback.fst : pullback f g ‚ü∂ _) ‚Åª¬π' U) =
    g ‚Åª¬π' (f '' U) :=
begin
  ext x,
  split,
  { rintros ‚ü®y, hy, rfl‚ü©,
    exact ‚ü®(pullback.fst : pullback f g ‚ü∂ _) y, hy,
    concrete_category.congr_hom pullback.condition y‚ü© },
  { rintros ‚ü®y, hy, eq‚ü©,
    exact ‚ü®(Top.pullback_iso_prod_subtype f g).inv ‚ü®‚ü®_,_‚ü©, eq‚ü©, by simpa, by simp‚ü© },
end

lemma pullback_fst_image_snd_preimage (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) (U : set Y) :
  (pullback.fst : pullback f g ‚ü∂ _) '' ((pullback.snd : pullback f g ‚ü∂ _) ‚Åª¬π' U) =
    f ‚Åª¬π' (g '' U) :=
begin
  ext x,
  split,
  { rintros ‚ü®y, hy, rfl‚ü©,
    exact ‚ü®(pullback.snd : pullback f g ‚ü∂ _) y, hy,
    (concrete_category.congr_hom pullback.condition y).symm‚ü© },
  { rintros ‚ü®y, hy, eq‚ü©,
    exact ‚ü®(Top.pullback_iso_prod_subtype f g).inv ‚ü®‚ü®_,_‚ü©,eq.symm‚ü©, by simpa, by simp‚ü© },
end

end pullback

--TODO: Add analogous constructions for `coprod` and `pushout`.

lemma coinduced_of_is_colimit {F : J ‚•§ Top.{u}} (c : cocone F) (hc : is_colimit c) :
  c.X.topological_space = ‚®Ü j, (F.obj j).topological_space.coinduced (c.Œπ.app j) :=
begin
  let homeo := homeo_of_iso (hc.cocone_point_unique_up_to_iso (colimit_cocone_is_colimit F)),
  ext,
  refine homeo.symm.is_open_preimage.symm.trans (iff.trans _ is_open_supr_iff.symm),
  exact is_open_supr_iff
end

lemma colimit_topology (F : J ‚•§ Top.{u}) :
  (colimit F).topological_space = ‚®Ü j, (F.obj j).topological_space.coinduced (colimit.Œπ F j) :=
coinduced_of_is_colimit _ (colimit.is_colimit F)

lemma colimit_is_open_iff (F : J ‚•§ Top.{u}) (U : set ((colimit F : _) : Type u)) :
  is_open U ‚Üî ‚àÄ j, is_open (colimit.Œπ F j ‚Åª¬π' U) :=
begin
  conv_lhs { rw colimit_topology F },
  exact is_open_supr_iff
end

lemma coequalizer_is_open_iff (F : walking_parallel_pair.{u} ‚•§ Top.{u})
  (U : set ((colimit F : _) : Type u)) :
  is_open U ‚Üî is_open (colimit.Œπ F walking_parallel_pair.one ‚Åª¬π' U) :=
begin
  rw colimit_is_open_iff,
  split,
  { intro H, exact H _ },
  { intros H j,
    cases j,
    { rw ‚Üêcolimit.w F walking_parallel_pair_hom.left,
      exact (F.map walking_parallel_pair_hom.left).continuous_to_fun.is_open_preimage _ H },
    { exact H } }
end

end Top

namespace Top

section cofiltered_limit

variables {J : Type u} [small_category J] [is_cofiltered J] (F : J ‚•§ Top.{u})
  (C : cone F) (hC : is_limit C)

include hC

/--
Given a *compatible* collection of topological bases for the factors in a cofiltered limit
which contain `set.univ` and are closed under intersections, the induced *naive* collection
of sets in the limit is, in fact, a topological basis.
-/
theorem is_topological_basis_cofiltered_limit
  (T : Œ† j, set (set (F.obj j))) (hT : ‚àÄ j, is_topological_basis (T j))
  (univ : ‚àÄ (i : J), set.univ ‚àà T i)
  (inter : ‚àÄ i (U1 U2 : set (F.obj i)), U1 ‚àà T i ‚Üí U2 ‚àà T i ‚Üí U1 ‚à© U2 ‚àà T i)
  (compat : ‚àÄ (i j : J) (f : i ‚ü∂ j) (V : set (F.obj j)) (hV : V ‚àà T j), (F.map f) ‚Åª¬π' V ‚àà T i) :
  is_topological_basis { U : set C.X | ‚àÉ j (V : set (F.obj j)), V ‚àà T j ‚àß U = C.œÄ.app j ‚Åª¬π' V } :=
begin
  classical,
  -- The limit cone for `F` whose topology is defined as an infimum.
  let D := limit_cone_infi F,
  -- The isomorphism between the cone point of `C` and the cone point of `D`.
  let E : C.X ‚âÖ D.X := hC.cone_point_unique_up_to_iso (limit_cone_infi_is_limit _),
  have hE : inducing E.hom := (Top.homeo_of_iso E).inducing,
  -- Reduce to the assertion of the theorem with `D` instead of `C`.
  suffices : is_topological_basis
    { U : set D.X | ‚àÉ j (V : set (F.obj j)), V ‚àà T j ‚àß U = D.œÄ.app j ‚Åª¬π' V },
  { convert this.inducing hE,
    ext U0,
    split,
    { rintro ‚ü®j, V, hV, rfl‚ü©,
      refine ‚ü®D.œÄ.app j ‚Åª¬π' V, ‚ü®j, V, hV, rfl‚ü©, rfl‚ü© },
    { rintro ‚ü®W, ‚ü®j, V, hV, rfl‚ü©, rfl‚ü©,
      refine ‚ü®j, V, hV, rfl‚ü© } },
  -- Using `D`, we can apply the characterization of the topological basis of a
  -- topology defined as an infimum...
  convert is_topological_basis_infi hT (Œª j (x : D.X), D.œÄ.app j x),
  ext U0,
  split,
  { rintros  ‚ü®j, V, hV, rfl‚ü©,
    let U : Œ† i, set (F.obj i) := Œª i, if h : i = j then (by {rw h, exact V}) else set.univ,
    refine ‚ü®U,{j},_,_‚ü©,
    { rintro i h,
      rw finset.mem_singleton at h,
      dsimp [U],
      rw dif_pos h,
      subst h,
      exact hV },
    { dsimp [U],
      simp } },
  { rintros ‚ü®U, G, h1, h2‚ü©,
    obtain ‚ü®j, hj‚ü© := is_cofiltered.inf_objs_exists G,
    let g : ‚àÄ e (he : e ‚àà G), j ‚ü∂ e := Œª _ he, (hj he).some,
    let Vs : J ‚Üí set (F.obj j) := Œª e, if h : e ‚àà G then F.map (g e h) ‚Åª¬π' (U e) else set.univ,
    let V : set (F.obj j) := ‚ãÇ (e : J) (he : e ‚àà G), Vs e,
    refine ‚ü®j, V, _, _‚ü©,
    { -- An intermediate claim used to apply induction along `G : finset J` later on.
      have : ‚àÄ (S : set (set (F.obj j))) (E : finset J) (P : J ‚Üí set (F.obj j))
        (univ : set.univ ‚àà S)
        (inter : ‚àÄ A B : set (F.obj j), A ‚àà S ‚Üí B ‚àà S ‚Üí A ‚à© B ‚àà S)
        (cond : ‚àÄ (e : J) (he : e ‚àà E), P e ‚àà S), (‚ãÇ e (he : e ‚àà E), P e) ‚àà S,
      { intros S E,
        apply E.induction_on,
        { intros P he hh,
          simpa },
        { intros a E ha hh1 hh2 hh3 hh4 hh5,
          rw finset.set_bInter_insert,
          refine hh4 _ _ (hh5 _ (finset.mem_insert_self _ _)) (hh1 _ hh3 hh4 _),
          intros e he,
          exact hh5 e (finset.mem_insert_of_mem he) } },
      -- use the intermediate claim to finish off the goal using `univ` and `inter`.
      refine this _ _ _ (univ _) (inter _) _,
      intros e he,
      dsimp [Vs],
      rw dif_pos he,
      exact compat j e (g e he) (U e) (h1 e he), },
    { -- conclude...
      rw h2,
      dsimp [V],
      rw set.preimage_Inter,
      congr' 1,
      ext1 e,
      rw set.preimage_Inter,
      congr' 1,
      ext1 he,
      dsimp [Vs],
      rw [dif_pos he, ‚Üê set.preimage_comp],
      congr' 1,
      change _ = ‚áë(D.œÄ.app j ‚â´ F.map (g e he)),
      rw D.w } }
end

end cofiltered_limit

section topological_konig

/-!
## Topological K≈ënig's lemma

A topological version of K≈ënig's lemma is that the inverse limit of nonempty compact Hausdorff
spaces is nonempty.  (Note: this can be generalized further to inverse limits of nonempty compact
T0 spaces, where all the maps are closed maps; see [Stone1979] --- however there is an erratum
for Theorem 4 that the element in the inverse limit can have cofinally many components that are
not closed points.)

We give this in a more general form, which is that cofiltered limits
of nonempty compact Hausdorff spaces are nonempty
(`nonempty_limit_cone_of_compact_t2_cofiltered_system`).

This also applies to inverse limits, where `{J : Type u} [preorder J] [is_directed J (‚â§)]` and
`F : J·µí·µñ ‚•§ Top`.

The theorem is specialized to nonempty finite types (which are compact Hausdorff with the
discrete topology) in `nonempty_sections_of_fintype_cofiltered_system` and
`nonempty_sections_of_fintype_inverse_system`.

(See https://stacks.math.columbia.edu/tag/086J for the Set version.)
-/

variables {J : Type u} [small_category J]
variables (F : J ‚•§ Top.{u})

private abbreviation finite_diagram_arrow {J : Type u} [small_category J] (G : finset J) :=
Œ£' (X Y : J) (mX : X ‚àà G) (mY : Y ‚àà G), X ‚ü∂ Y
private abbreviation finite_diagram (J : Type u) [small_category J] :=
Œ£ (G : finset J), finset (finite_diagram_arrow G)

/--
Partial sections of a cofiltered limit are sections when restricted to
a finite subset of objects and morphisms of `J`.
-/
def partial_sections {J : Type u} [small_category J] (F : J ‚•§ Top.{u})
  {G : finset J} (H : finset (finite_diagram_arrow G)) : set (Œ† j, F.obj j) :=
{ u | ‚àÄ {f : finite_diagram_arrow G} (hf : f ‚àà H), F.map f.2.2.2.2 (u f.1) = u f.2.1 }

lemma partial_sections.nonempty [is_cofiltered J] [h : Œ† (j : J), nonempty (F.obj j)]
  {G : finset J} (H : finset (finite_diagram_arrow G)) :
  (partial_sections F H).nonempty :=
begin
  classical,
  use Œª (j : J), if hj : j ‚àà G
                 then F.map (is_cofiltered.inf_to G H hj) (h (is_cofiltered.inf G H)).some
                 else (h _).some,
  rintros ‚ü®X, Y, hX, hY, f‚ü© hf,
  dsimp only,
  rwa [dif_pos hX, dif_pos hY, ‚Üêcomp_app, ‚ÜêF.map_comp,
       @is_cofiltered.inf_to_commutes _ _ _ G H],
end

lemma partial_sections.directed :
  directed superset (Œª (G : finite_diagram J), partial_sections F G.2) :=
begin
  classical,
  intros A B,
  let ŒπA : finite_diagram_arrow A.1 ‚Üí finite_diagram_arrow (A.1 ‚äî B.1) :=
    Œª f, ‚ü®f.1, f.2.1, finset.mem_union_left _ f.2.2.1, finset.mem_union_left _ f.2.2.2.1,
          f.2.2.2.2‚ü©,
  let ŒπB : finite_diagram_arrow B.1 ‚Üí finite_diagram_arrow (A.1 ‚äî B.1) :=
    Œª f, ‚ü®f.1, f.2.1, finset.mem_union_right _ f.2.2.1, finset.mem_union_right _ f.2.2.2.1,
          f.2.2.2.2‚ü©,
  refine ‚ü®‚ü®A.1 ‚äî B.1, A.2.image ŒπA ‚äî B.2.image ŒπB‚ü©, _, _‚ü©,
  { rintro u hu f hf,
    have : ŒπA f ‚àà A.2.image ŒπA ‚äî B.2.image ŒπB,
    { apply finset.mem_union_left,
      rw finset.mem_image,
      refine ‚ü®f, hf, rfl‚ü© },
    exact hu this },
  { rintro u hu f hf,
    have : ŒπB f ‚àà A.2.image ŒπA ‚äî B.2.image ŒπB,
    { apply finset.mem_union_right,
      rw finset.mem_image,
      refine ‚ü®f, hf, rfl‚ü© },
    exact hu this }
end

lemma partial_sections.closed [Œ† (j : J), t2_space (F.obj j)]
  {G : finset J} (H : finset (finite_diagram_arrow G)) :
  is_closed (partial_sections F H) :=
begin
  have : partial_sections F H =
    ‚ãÇ {f : finite_diagram_arrow G} (hf : f ‚àà H), { u | F.map f.2.2.2.2 (u f.1) = u f.2.1 },
  { ext1,
    simp only [set.mem_Inter, set.mem_set_of_eq],
    refl, },
  rw this,
  apply is_closed_bInter,
  intros f hf,
  apply is_closed_eq,
  continuity,
end

/--
Cofiltered limits of nonempty compact Hausdorff spaces are nonempty topological spaces.
--/
lemma nonempty_limit_cone_of_compact_t2_cofiltered_system
  [is_cofiltered J]
  [Œ† (j : J), nonempty (F.obj j)]
  [Œ† (j : J), compact_space (F.obj j)]
  [Œ† (j : J), t2_space (F.obj j)] :
  nonempty (Top.limit_cone F).X :=
begin
  classical,
  obtain ‚ü®u, hu‚ü© := is_compact.nonempty_Inter_of_directed_nonempty_compact_closed
    (Œª G, partial_sections F _)
    (partial_sections.directed F)
    (Œª G, partial_sections.nonempty F _)
    (Œª G, is_closed.is_compact (partial_sections.closed F _))
    (Œª G, partial_sections.closed F _),
  use u,
  intros X Y f,
  let G : finite_diagram J :=
    ‚ü®{X, Y},
     {‚ü®X, Y,
      by simp only [true_or, eq_self_iff_true, finset.mem_insert],
      by simp only [eq_self_iff_true, or_true, finset.mem_insert, finset.mem_singleton],
      f‚ü©}‚ü©,
  exact hu _ ‚ü®G, rfl‚ü© (finset.mem_singleton_self _),
end

end topological_konig

end Top

section fintype_konig

/-- This bootstraps `nonempty_sections_of_fintype_inverse_system`. In this version,
the `F` functor is between categories of the same universe, and it is an easy
corollary to `Top.nonempty_limit_cone_of_compact_t2_inverse_system`. -/
lemma nonempty_sections_of_fintype_cofiltered_system.init
  {J : Type u} [small_category J] [is_cofiltered J] (F : J ‚•§ Type u)
  [hf : Œ† (j : J), fintype (F.obj j)] [hne : Œ† (j : J), nonempty (F.obj j)] :
  F.sections.nonempty :=
begin
  let F' : J ‚•§ Top := F ‚ãô Top.discrete,
  haveI : Œ† (j : J), fintype (F'.obj j) := hf,
  haveI : Œ† (j : J), nonempty (F'.obj j) := hne,
  obtain ‚ü®‚ü®u, hu‚ü©‚ü© := Top.nonempty_limit_cone_of_compact_t2_cofiltered_system F',
  exact ‚ü®u, Œª _ _ f, hu f‚ü©,
end

/-- The cofiltered limit of nonempty finite types is nonempty.

See `nonempty_sections_of_fintype_inverse_system` for a specialization to inverse limits. -/
theorem nonempty_sections_of_fintype_cofiltered_system
  {J : Type u} [category.{w} J] [is_cofiltered J] (F : J ‚•§ Type v)
  [Œ† (j : J), fintype (F.obj j)] [Œ† (j : J), nonempty (F.obj j)] :
  F.sections.nonempty :=
begin
  -- Step 1: lift everything to the `max u v w` universe.
  let J' : Type (max w v u) := as_small.{max w v} J,
  let down : J' ‚•§ J := as_small.down,
  let F' : J' ‚•§ Type (max u v w) := down ‚ãô F ‚ãô ulift_functor.{(max u w) v},
  haveI : ‚àÄ i, nonempty (F'.obj i) := Œª i, ‚ü®‚ü®classical.arbitrary (F.obj (down.obj i))‚ü©‚ü©,
  haveI : ‚àÄ i, fintype (F'.obj i) := Œª i, fintype.of_equiv (F.obj (down.obj i)) equiv.ulift.symm,
  -- Step 2: apply the bootstrap theorem
  obtain ‚ü®u, hu‚ü© := nonempty_sections_of_fintype_cofiltered_system.init F',
  -- Step 3: interpret the results
  use Œª j, (u ‚ü®j‚ü©).down,
  intros j j' f,
  have h := @hu (‚ü®j‚ü© : J') (‚ü®j'‚ü© : J') (ulift.up f),
  simp only [as_small.down, functor.comp_map, ulift_functor_map, functor.op_map] at h,
  simp_rw [‚Üêh],
  refl,
end

/-- The inverse limit of nonempty finite types is nonempty.

See `nonempty_sections_of_fintype_cofiltered_system` for a generalization to cofiltered limits.
That version applies in almost all cases, and the only difference is that this version
allows `J` to be empty.

This may be regarded as a generalization of K≈ënig's lemma.
To specialize: given a locally finite connected graph, take `J·µí·µñ` to be `‚Ñï` and
`F j` to be length-`j` paths that start from an arbitrary fixed vertex.
Elements of `F.sections` can be read off as infinite rays in the graph. -/
theorem nonempty_sections_of_fintype_inverse_system
  {J : Type u} [preorder J] [is_directed J (‚â§)] (F : J·µí·µñ ‚•§ Type v)
  [Œ† (j : J·µí·µñ), fintype (F.obj j)] [Œ† (j : J·µí·µñ), nonempty (F.obj j)] :
  F.sections.nonempty :=
begin
  casesI is_empty_or_nonempty J,
  { haveI : is_empty J·µí·µñ := ‚ü®Œª j, is_empty_elim j.unop‚ü©,  -- TODO: this should be a global instance
    exact ‚ü®is_empty_elim, is_empty_elim‚ü©, },
  { exact nonempty_sections_of_fintype_cofiltered_system _, },
end

end fintype_konig
