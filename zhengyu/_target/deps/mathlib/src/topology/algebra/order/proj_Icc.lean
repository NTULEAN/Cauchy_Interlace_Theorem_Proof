/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov, Patrick Massot
-/
import data.set.intervals.proj_Icc
import topology.algebra.order.basic

/-!
# Projection onto a closed interval

In this file we prove that the projection `set.proj_Icc f a b h` is a quotient map, and use it
to show that `Icc_extend h f` is continuous if and only if `f` is continuous.
-/

open set filter
open_locale filter topological_space

variables {Œ± Œ≤ Œ≥ : Type*} [linear_order Œ±] [topological_space Œ≥] {a b c : Œ±} {h : a ‚â§ b}

lemma filter.tendsto.Icc_extend (f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤) {z : Œ≥} {l : filter Œ±} {l' : filter Œ≤}
  (hf : tendsto ‚Üøf (ùìù z √ó·∂† l.map (proj_Icc a b h)) l') :
  tendsto ‚Üø(Icc_extend h ‚àò f) (ùìù z √ó·∂† l) l' :=
show tendsto (‚Üøf ‚àò prod.map id (proj_Icc a b h)) (ùìù z √ó·∂† l) l', from
hf.comp $ tendsto_id.prod_map tendsto_map

variables [topological_space Œ±] [order_topology Œ±] [topological_space Œ≤]

@[continuity]
lemma continuous_proj_Icc : continuous (proj_Icc a b h) :=
continuous_subtype_mk _ $ continuous_const.max $ continuous_const.min continuous_id

lemma quotient_map_proj_Icc : quotient_map (proj_Icc a b h) :=
quotient_map_iff.2 ‚ü®proj_Icc_surjective h, Œª s,
  ‚ü®Œª hs, hs.preimage continuous_proj_Icc,
   Œª hs, ‚ü®_, hs, by { ext, simp }‚ü©‚ü©‚ü©

@[simp] lemma continuous_Icc_extend_iff {f : Icc a b ‚Üí Œ≤} :
  continuous (Icc_extend h f) ‚Üî continuous f :=
quotient_map_proj_Icc.continuous_iff.symm

/-- See Note [continuity lemma statement]. -/
lemma continuous.Icc_extend {f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±}
  (hf : continuous ‚Üøf) (hg : continuous g) : continuous (Œª a, Icc_extend h (f a) (g a)) :=
hf.comp $ continuous_id.prod_mk $ continuous_proj_Icc.comp hg

/-- A useful special case of `continuous.Icc_extend`. -/
@[continuity]
lemma continuous.Icc_extend' {f : Icc a b ‚Üí Œ≤} (hf : continuous f) : continuous (Icc_extend h f) :=
hf.comp continuous_proj_Icc

lemma continuous_at.Icc_extend {x : Œ≥} (f : Œ≥ ‚Üí Icc a b ‚Üí Œ≤) {g : Œ≥ ‚Üí Œ±}
  (hf : continuous_at ‚Üøf (x, proj_Icc a b h (g x))) (hg : continuous_at g x) :
  continuous_at (Œª a, Icc_extend h (f a) (g a)) x :=
show continuous_at (‚Üøf ‚àò Œª x, (x, proj_Icc a b h (g x))) x, from
continuous_at.comp hf $ continuous_at_id.prod $ continuous_proj_Icc.continuous_at.comp hg
