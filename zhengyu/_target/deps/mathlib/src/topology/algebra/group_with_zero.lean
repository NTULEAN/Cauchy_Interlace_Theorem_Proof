/-
Copyright (c) 2020 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov
-/
import topology.algebra.monoid
import algebra.group.pi
import topology.homeomorph

/-!
# Topological group with zero

In this file we define `has_continuous_inv'` to be a mixin typeclass a type with `has_inv` and
`has_zero` (e.g., a `group_with_zero`) such that `Œª x, x‚Åª¬π` is continuous at all nonzero points. Any
normed (semi)field has this property. Currently the only example of `has_continuous_inv'` in
`mathlib` which is not a normed field is the type `nnnreal` (a.k.a. `‚Ñù‚â•0`) of nonnegative real
numbers.

Then we prove lemmas about continuity of `x ‚Ü¶ x‚Åª¬π` and `f / g` providing dot-style `*.inv'` and
`*.div` operations on `filter.tendsto`, `continuous_at`, `continuous_within_at`, `continuous_on`,
and `continuous`. As a special case, we provide `*.div_const` operations that require only
`group_with_zero` and `has_continuous_mul` instances.

All lemmas about `(‚Åª¬π)` use `inv'` in their names because lemmas without `'` are used for
`topological_group`s. We also use `'` in the typeclass name `has_continuous_inv'` for the sake of
consistency of notation.

On a `group_with_zero` with continuous multiplication, we also define left and right multiplication
as homeomorphisms.
-/

open_locale topological_space filter
open filter function

/-!
### A group with zero with continuous multiplication

If `G‚ÇÄ` is a group with zero with continuous `(*)`, then `(/y)` is continuous for any `y`. In this
section we prove lemmas that immediately follow from this fact providing `*.div_const` dot-style
operations on `filter.tendsto`, `continuous_at`, `continuous_within_at`, `continuous_on`, and
`continuous`.
-/

variables {Œ± Œ≤ G‚ÇÄ : Type*}

section div_const

variables [group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ] [has_continuous_mul G‚ÇÄ]
  {f : Œ± ‚Üí G‚ÇÄ} {s : set Œ±} {l : filter Œ±}

lemma filter.tendsto.div_const {x y : G‚ÇÄ} (hf : tendsto f l (ùìù x)) :
  tendsto (Œªa, f a / y) l (ùìù (x / y)) :=
by simpa only [div_eq_mul_inv] using hf.mul tendsto_const_nhds

variables [topological_space Œ±]

lemma continuous_at.div_const {a : Œ±} (hf : continuous_at f a) {y : G‚ÇÄ} :
  continuous_at (Œª x, f x / y) a :=
by simpa only [div_eq_mul_inv] using hf.mul continuous_at_const

lemma continuous_within_at.div_const {a} (hf : continuous_within_at f s a) {y : G‚ÇÄ} :
  continuous_within_at (Œª x, f x / y) s a :=
hf.div_const

lemma continuous_on.div_const (hf : continuous_on f s) {y : G‚ÇÄ} : continuous_on (Œª x, f x / y) s :=
by simpa only [div_eq_mul_inv] using hf.mul continuous_on_const

@[continuity] lemma continuous.div_const (hf : continuous f) {y : G‚ÇÄ} :
  continuous (Œª x, f x / y) :=
by simpa only [div_eq_mul_inv] using hf.mul continuous_const

end div_const

/-- A type with `0` and `has_inv` such that `Œª x, x‚Åª¬π` is continuous at all nonzero points. Any
normed (semi)field has this property. -/
class has_continuous_inv‚ÇÄ (G‚ÇÄ : Type*) [has_zero G‚ÇÄ] [has_inv G‚ÇÄ] [topological_space G‚ÇÄ] :=
(continuous_at_inv‚ÇÄ : ‚àÄ ‚¶Éx : G‚ÇÄ‚¶Ñ, x ‚â† 0 ‚Üí continuous_at has_inv.inv x)

export has_continuous_inv‚ÇÄ (continuous_at_inv‚ÇÄ)

section inv‚ÇÄ

variables [has_zero G‚ÇÄ] [has_inv G‚ÇÄ] [topological_space G‚ÇÄ] [has_continuous_inv‚ÇÄ G‚ÇÄ]
  {l : filter Œ±} {f : Œ± ‚Üí G‚ÇÄ} {s : set Œ±} {a : Œ±}

/-!
### Continuity of `Œª x, x‚Åª¬π` at a non-zero point

We define `topological_group_with_zero` to be a `group_with_zero` such that the operation `x ‚Ü¶ x‚Åª¬π`
is continuous at all nonzero points. In this section we prove dot-style `*.inv'` lemmas for
`filter.tendsto`, `continuous_at`, `continuous_within_at`, `continuous_on`, and `continuous`.
-/

lemma tendsto_inv‚ÇÄ {x : G‚ÇÄ}  (hx : x ‚â† 0) : tendsto has_inv.inv (ùìù x) (ùìù x‚Åª¬π) :=
continuous_at_inv‚ÇÄ hx

lemma continuous_on_inv‚ÇÄ : continuous_on (has_inv.inv : G‚ÇÄ ‚Üí G‚ÇÄ) {0}·∂ú :=
Œª x hx, (continuous_at_inv‚ÇÄ hx).continuous_within_at

/-- If a function converges to a nonzero value, its inverse converges to the inverse of this value.
We use the name `tendsto.inv‚ÇÄ` as `tendsto.inv` is already used in multiplicative topological
groups. -/
lemma filter.tendsto.inv‚ÇÄ {a : G‚ÇÄ} (hf : tendsto f l (ùìù a))
  (ha : a ‚â† 0) :
  tendsto (Œª x, (f x)‚Åª¬π) l (ùìù a‚Åª¬π) :=
(tendsto_inv‚ÇÄ ha).comp hf

variables [topological_space Œ±]

lemma continuous_within_at.inv‚ÇÄ (hf : continuous_within_at f s a) (ha : f a ‚â† 0) :
  continuous_within_at (Œª x, (f x)‚Åª¬π) s a :=
hf.inv‚ÇÄ ha

lemma continuous_at.inv‚ÇÄ (hf : continuous_at f a) (ha : f a ‚â† 0) :
  continuous_at (Œª x, (f x)‚Åª¬π) a :=
hf.inv‚ÇÄ ha

@[continuity] lemma continuous.inv‚ÇÄ (hf : continuous f) (h0 : ‚àÄ x, f x ‚â† 0) :
  continuous (Œª x, (f x)‚Åª¬π) :=
continuous_iff_continuous_at.2 $ Œª x, (hf.tendsto x).inv‚ÇÄ (h0 x)

lemma continuous_on.inv‚ÇÄ (hf : continuous_on f s) (h0 : ‚àÄ x ‚àà s, f x ‚â† 0) :
  continuous_on (Œª x, (f x)‚Åª¬π) s :=
Œª x hx, (hf x hx).inv‚ÇÄ (h0 x hx)

end inv‚ÇÄ

/-!
### Continuity of division

If `G‚ÇÄ` is a `group_with_zero` with `x ‚Ü¶ x‚Åª¬π` continuous at all nonzero points and `(*)`, then
division `(/)` is continuous at any point where the denominator is continuous.
-/

section div

variables [group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ] [has_continuous_inv‚ÇÄ G‚ÇÄ]
  [has_continuous_mul G‚ÇÄ] {f g : Œ± ‚Üí G‚ÇÄ}

lemma filter.tendsto.div {l : filter Œ±} {a b : G‚ÇÄ} (hf : tendsto f l (ùìù a))
  (hg : tendsto g l (ùìù b)) (hy : b ‚â† 0) :
  tendsto (f / g) l (ùìù (a / b)) :=
by simpa only [div_eq_mul_inv] using hf.mul (hg.inv‚ÇÄ hy)

variables [topological_space Œ±] [topological_space Œ≤] {s : set Œ±} {a : Œ±}

lemma continuous_within_at.div (hf : continuous_within_at f s a) (hg : continuous_within_at g s a)
  (h‚ÇÄ : g a ‚â† 0) :
  continuous_within_at (f / g) s a :=
hf.div hg h‚ÇÄ

lemma continuous_on.div (hf : continuous_on f s) (hg : continuous_on g s) (h‚ÇÄ : ‚àÄ x ‚àà s, g x ‚â† 0) :
  continuous_on (f / g) s :=
Œª x hx, (hf x hx).div (hg x hx) (h‚ÇÄ x hx)

/-- Continuity at a point of the result of dividing two functions continuous at that point, where
the denominator is nonzero. -/
lemma continuous_at.div (hf : continuous_at f a) (hg : continuous_at g a) (h‚ÇÄ : g a ‚â† 0) :
  continuous_at (f / g) a :=
hf.div hg h‚ÇÄ

@[continuity] lemma continuous.div (hf : continuous f) (hg : continuous g) (h‚ÇÄ : ‚àÄ x, g x ‚â† 0) :
  continuous (f / g) :=
by simpa only [div_eq_mul_inv] using hf.mul (hg.inv‚ÇÄ h‚ÇÄ)

lemma continuous_on_div : continuous_on (Œª p : G‚ÇÄ √ó G‚ÇÄ, p.1 / p.2) {p | p.2 ‚â† 0} :=
continuous_on_fst.div continuous_on_snd $ Œª _, id

/-- The function `f x / g x` is discontinuous when `g x = 0`.
However, under appropriate conditions, `h x (f x / g x)` is still continuous.
The condition is that if `g a = 0` then `h x y` must tend to `h a 0` when `x` tends to `a`,
with no information about `y`. This is represented by the `‚ä§` filter.
Note: `filter.tendsto_prod_top_iff` characterizes this convergence in uniform spaces.
See also `filter.prod_top` and `filter.mem_prod_top`. -/
lemma continuous_at.comp_div_cases {f g : Œ± ‚Üí G‚ÇÄ} (h : Œ± ‚Üí G‚ÇÄ ‚Üí Œ≤)
  (hf : continuous_at f a) (hg : continuous_at g a)
  (hh : g a ‚â† 0 ‚Üí continuous_at ‚Üøh (a, f a / g a))
  (h2h : g a = 0 ‚Üí tendsto ‚Üøh (ùìù a √ó·∂† ‚ä§) (ùìù (h a 0))) :
  continuous_at (Œª x, h x (f x / g x)) a :=
begin
  show continuous_at (‚Üøh ‚àò (Œª x, (x, f x / g x))) a,
  by_cases hga : g a = 0,
  { rw [continuous_at], simp_rw [comp_app, hga, div_zero],
    exact (h2h hga).comp (continuous_at_id.prod_mk tendsto_top) },
  { exact continuous_at.comp (hh hga) (continuous_at_id.prod (hf.div hg hga)) }
end

/-- `h x (f x / g x)` is continuous under certain conditions, even if the denominator is sometimes
  `0`. See docstring of `continuous_at.comp_div_cases`. -/
lemma continuous.comp_div_cases {f g : Œ± ‚Üí G‚ÇÄ} (h : Œ± ‚Üí G‚ÇÄ ‚Üí Œ≤)
  (hf : continuous f) (hg : continuous g)
  (hh : ‚àÄ a, g a ‚â† 0 ‚Üí continuous_at ‚Üøh (a, f a / g a))
  (h2h : ‚àÄ a, g a = 0 ‚Üí tendsto ‚Üøh (ùìù a √ó·∂† ‚ä§) (ùìù (h a 0))) :
  continuous (Œª x, h x (f x / g x)) :=
continuous_iff_continuous_at.mpr $
  Œª a, hf.continuous_at.comp_div_cases _ hg.continuous_at (hh a) (h2h a)

end div

/-! ### Left and right multiplication as homeomorphisms -/

namespace homeomorph

variables [topological_space Œ±] [group_with_zero Œ±] [has_continuous_mul Œ±]

/-- Left multiplication by a nonzero element in a `group_with_zero` with continuous multiplication
is a homeomorphism of the underlying type. -/
protected def mul_left‚ÇÄ (c : Œ±) (hc : c ‚â† 0) : Œ± ‚âÉ‚Çú Œ± :=
{ continuous_to_fun := continuous_mul_left _,
  continuous_inv_fun := continuous_mul_left _,
  .. equiv.mul_left‚ÇÄ c hc }

/-- Right multiplication by a nonzero element in a `group_with_zero` with continuous multiplication
is a homeomorphism of the underlying type. -/
protected def mul_right‚ÇÄ (c : Œ±) (hc : c ‚â† 0) : Œ± ‚âÉ‚Çú Œ± :=
{ continuous_to_fun := continuous_mul_right _,
  continuous_inv_fun := continuous_mul_right _,
  .. equiv.mul_right‚ÇÄ c hc }

@[simp] lemma coe_mul_left‚ÇÄ (c : Œ±) (hc : c ‚â† 0) : ‚áë(homeomorph.mul_left‚ÇÄ c hc) = (*) c := rfl

@[simp] lemma mul_left‚ÇÄ_symm_apply (c : Œ±) (hc : c ‚â† 0) :
  ((homeomorph.mul_left‚ÇÄ c hc).symm : Œ± ‚Üí Œ±) = (*) c‚Åª¬π := rfl

@[simp] lemma coe_mul_right‚ÇÄ (c : Œ±) (hc : c ‚â† 0) :
  ‚áë(homeomorph.mul_right‚ÇÄ c hc) = Œª x, x * c := rfl

@[simp] lemma mul_right‚ÇÄ_symm_apply (c : Œ±) (hc : c ‚â† 0) :
  ((homeomorph.mul_right‚ÇÄ c hc).symm : Œ± ‚Üí Œ±) = Œª x, x * c‚Åª¬π := rfl

end homeomorph

section zpow

variables [group_with_zero G‚ÇÄ] [topological_space G‚ÇÄ] [has_continuous_inv‚ÇÄ G‚ÇÄ]
  [has_continuous_mul G‚ÇÄ]

lemma continuous_at_zpow (x : G‚ÇÄ) (m : ‚Ñ§) (h : x ‚â† 0 ‚à® 0 ‚â§ m) : continuous_at (Œª x, x ^ m) x :=
begin
  cases m,
  { simpa only [zpow_of_nat] using continuous_at_pow x m },
  { simp only [zpow_neg_succ_of_nat],
    have hx : x ‚â† 0, from h.resolve_right (int.neg_succ_of_nat_lt_zero m).not_le,
    exact (continuous_at_pow x (m + 1)).inv‚ÇÄ (pow_ne_zero _ hx) }
end

lemma continuous_on_zpow (m : ‚Ñ§) : continuous_on (Œª x : G‚ÇÄ, x ^ m) {0}·∂ú :=
Œª x hx, (continuous_at_zpow _ _ (or.inl hx)).continuous_within_at

lemma filter.tendsto.zpow {f : Œ± ‚Üí G‚ÇÄ} {l : filter Œ±} {a : G‚ÇÄ} (hf : tendsto f l (ùìù a)) (m : ‚Ñ§)
  (h : a ‚â† 0 ‚à® 0 ‚â§ m) :
  tendsto (Œª x, (f x) ^ m) l (ùìù (a ^ m)) :=
(continuous_at_zpow _ m h).tendsto.comp hf

variables {X : Type*} [topological_space X] {a : X} {s : set X} {f : X ‚Üí G‚ÇÄ}

lemma continuous_at.zpow (hf : continuous_at f a) (m : ‚Ñ§) (h : f a ‚â† 0 ‚à® 0 ‚â§ m) :
  continuous_at (Œª x, (f x) ^ m) a :=
hf.zpow m h

lemma continuous_within_at.zpow (hf : continuous_within_at f s a) (m : ‚Ñ§) (h : f a ‚â† 0 ‚à® 0 ‚â§ m) :
  continuous_within_at (Œª x, f x ^ m) s a :=
hf.zpow m h

lemma continuous_on.zpow (hf : continuous_on f s) (m : ‚Ñ§) (h : ‚àÄ a ‚àà s, f a ‚â† 0 ‚à® 0 ‚â§ m) :
  continuous_on (Œª x, f x ^ m) s :=
Œª a ha, (hf a ha).zpow m (h a ha)

@[continuity] lemma continuous.zpow (hf : continuous f) (m : ‚Ñ§) (h0 : ‚àÄ a, f a ‚â† 0 ‚à® 0 ‚â§ m) :
  continuous (Œª x, (f x) ^ m) :=
continuous_iff_continuous_at.2 $ Œª x, (hf.tendsto x).zpow m (h0 x)

end zpow
