/-
Copyright (c) 2019 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot
-/
import topology.uniform_space.cauchy
import topology.uniform_space.separation

/-!
# Indexed product of uniform spaces
-/

noncomputable theory

open_locale uniformity topological_space

section
open filter uniform_space
universe u
variables {Œπ : Type*} (Œ± : Œπ ‚Üí Type u) [U : Œ†i, uniform_space (Œ± i)]
include U

instance Pi.uniform_space : uniform_space (Œ†i, Œ± i) :=
uniform_space.of_core_eq
  (‚®Öi, uniform_space.comap (Œª a : Œ†i, Œ± i, a i) (U i)).to_core
  Pi.topological_space $ eq.symm to_topological_space_infi

lemma Pi.uniformity :
  ùì§ (Œ† i, Œ± i) = ‚®Ö i : Œπ, filter.comap (Œª a, (a.1 i, a.2 i)) $ ùì§ (Œ± i) :=
infi_uniformity

variable {Œ±}

lemma uniform_continuous_pi {Œ≤ : Type*} [uniform_space Œ≤] {f : Œ≤ ‚Üí Œ† i, Œ± i} :
  uniform_continuous f ‚Üî ‚àÄ i, uniform_continuous (Œª x, f x i) :=
by simp only [uniform_continuous, Pi.uniformity, tendsto_infi, tendsto_comap_iff]

variable (Œ±)

lemma Pi.uniform_continuous_proj (i : Œπ) : uniform_continuous (Œª (a : Œ† (i : Œπ), Œ± i), a i) :=
uniform_continuous_pi.1 uniform_continuous_id i

instance Pi.complete [‚àÄ i, complete_space (Œ± i)] : complete_space (Œ† i, Œ± i) :=
‚ü®begin
  intros f hf,
  haveI := hf.1,
  have : ‚àÄ i, ‚àÉ x : Œ± i, filter.map (Œª a : Œ†i, Œ± i, a i) f ‚â§ ùìù x,
  { intro i,
    have key : cauchy (map (Œª (a : Œ† (i : Œπ), Œ± i), a i) f),
      from hf.map (Pi.uniform_continuous_proj Œ± i),
    exact cauchy_iff_exists_le_nhds.1 key },
  choose x hx using this,
  use x,
  rwa [nhds_pi, le_pi],
end‚ü©

instance Pi.separated [‚àÄ i, separated_space (Œ± i)] : separated_space (Œ† i, Œ± i) :=
separated_def.2 $ assume x y H,
begin
  ext i,
  apply eq_of_separated_of_uniform_continuous (Pi.uniform_continuous_proj Œ± i),
  apply H,
end
end
