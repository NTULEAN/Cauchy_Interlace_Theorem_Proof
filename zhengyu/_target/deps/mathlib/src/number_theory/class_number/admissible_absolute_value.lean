/-
Copyright (c) 2021 Anne Baanen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Anne Baanen
-/
import data.fin.tuple
import data.real.basic
import combinatorics.pigeonhole
import algebra.order.euclidean_absolute_value

/-!
# Admissible absolute values
This file defines a structure `absolute_value.is_admissible` which we use to show the class number
of the ring of integers of a global field is finite.

## Main definitions

 * `absolute_value.is_admissible abv` states the absolute value `abv : R ‚Üí ‚Ñ§`
   respects the Euclidean domain structure on `R`, and that a large enough set
   of elements of `R^n` contains a pair of elements whose remainders are
   pointwise close together.

## Main results

 * `absolute_value.abs_is_admissible` shows the "standard" absolute value on `‚Ñ§`,
   mapping negative `x` to `-x`, is admissible.
 * `polynomial.card_pow_degree_is_admissible` shows `card_pow_degree`,
   mapping `p : polynomial ùîΩ_q` to `q ^ degree p`, is admissible
-/

local infix ` ‚â∫ `:50 := euclidean_domain.r

namespace absolute_value

variables {R : Type*} [euclidean_domain R]
variables (abv : absolute_value R ‚Ñ§)

/-- An absolute value `R ‚Üí ‚Ñ§` is admissible if it respects the Euclidean domain
structure and a large enough set of elements in `R^n` will contain a pair of
elements whose remainders are pointwise close together. -/
structure is_admissible extends is_euclidean abv :=
(card : ‚Ñù ‚Üí ‚Ñï)
(exists_partition' : ‚àÄ (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : fin n ‚Üí R),
                     ‚àÉ (t : fin n ‚Üí fin (card Œµ)),
                     ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < abv b ‚Ä¢ Œµ)

attribute [protected] is_admissible.card

namespace is_admissible

variables {abv}

/-- For all `Œµ > 0` and finite families `A`, we can partition the remainders of `A` mod `b`
into `abv.card Œµ` sets, such that all elements in each part of remainders are close together. -/
lemma exists_partition {Œπ : Type*} [fintype Œπ] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0)
  (A : Œπ ‚Üí R) (h : abv.is_admissible) :
  ‚àÉ (t : Œπ ‚Üí fin (h.card Œµ)),
  ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
begin
  let e := fintype.equiv_fin Œπ,
  obtain ‚ü®t, ht‚ü© := h.exists_partition' (fintype.card Œπ) hŒµ hb (A ‚àò e.symm),
  refine ‚ü®t ‚àò e, Œª i‚ÇÄ i‚ÇÅ h, _‚ü©,
  convert ht (e i‚ÇÄ) (e i‚ÇÅ) h; simp only [e.symm_apply_apply]
end

/-- Any large enough family of vectors in `R^n` has a pair of elements
whose remainders are close together, pointwise. -/
lemma exists_approx_aux (n : ‚Ñï) (h : abv.is_admissible) :
  ‚àÄ {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : fin (h.card Œµ ^ n).succ ‚Üí (fin n ‚Üí R)),
  ‚àÉ (i‚ÇÄ i‚ÇÅ), (i‚ÇÄ ‚â† i‚ÇÅ) ‚àß ‚àÄ k, (abv (A i‚ÇÅ k % b - A i‚ÇÄ k % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
begin
  haveI := classical.dec_eq R,
  induction n with n ih,
  { intros Œµ hŒµ b hb A,
    refine ‚ü®0, 1, _, _‚ü©,
    { simp },
    rintros ‚ü®i, ‚ü®‚ü©‚ü© },
  intros Œµ hŒµ b hb A,
  set M := h.card Œµ with hM,
  -- By the "nicer" pigeonhole principle, we can find a collection `s`
  -- of more than `M^n` remainders where the first components lie close together:
  obtain ‚ü®s, s_inj, hs‚ü© : ‚àÉ s : fin (M ^ n).succ ‚Üí fin (M ^ n.succ).succ,
    function.injective s ‚àß
    ‚àÄ i‚ÇÄ i‚ÇÅ, (abv (A (s i‚ÇÅ) 0 % b - A (s i‚ÇÄ) 0 % b) : ‚Ñù) < abv b ‚Ä¢ Œµ,
  { -- We can partition the `A`s into `M` subsets where
    -- the first components lie close together:
    obtain ‚ü®t, ht‚ü© : ‚àÉ (t : fin (M ^ n.succ).succ ‚Üí fin M),
      ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ 0 % b - A i‚ÇÄ 0 % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
      h.exists_partition hŒµ hb (Œª x, A x 0),
    -- Since the `M` subsets contain more than `M * M^n` elements total,
    -- there must be a subset that contains more than `M^n` elements.
    obtain ‚ü®s, hs‚ü© := @fintype.exists_lt_card_fiber_of_mul_lt_card _ _ _ _ _ t (M ^ n)
      (by simpa only [fintype.card_fin, pow_succ] using nat.lt_succ_self (M ^ n.succ) ),
    refine ‚ü®Œª i, (finset.univ.filter (Œª x, t x = s)).to_list.nth_le i _, _, Œª i‚ÇÄ i‚ÇÅ, ht _ _ _‚ü©,
    { refine i.2.trans_le _, rwa finset.length_to_list },
    { intros i j h, ext, exact list.nodup_iff_nth_le_inj.mp (finset.nodup_to_list _) _ _ _ _ h },
    have : ‚àÄ i h, (finset.univ.filter (Œª x, t x = s)).to_list.nth_le i h ‚àà
      finset.univ.filter (Œª x, t x = s),
    { intros i h, exact (finset.mem_to_list _).mp (list.nth_le_mem _ _ _) },
    obtain ‚ü®_, h‚ÇÄ‚ü© := finset.mem_filter.mp (this i‚ÇÄ _),
    obtain ‚ü®_, h‚ÇÅ‚ü© := finset.mem_filter.mp (this i‚ÇÅ _),
    exact h‚ÇÄ.trans h‚ÇÅ.symm },
  -- Since `s` is large enough, there are two elements of `A ‚àò s`
  -- where the second components lie close together.
  obtain ‚ü®k‚ÇÄ, k‚ÇÅ, hk, h‚ü© := ih hŒµ hb (Œª x, fin.tail (A (s x))),
  refine ‚ü®s k‚ÇÄ, s k‚ÇÅ, Œª h, hk (s_inj h), Œª i, fin.cases _ (Œª i, _) i‚ü©,
  { exact hs k‚ÇÄ k‚ÇÅ },
  { exact h i },
end

/-- Any large enough family of vectors in `R^Œπ` has a pair of elements
whose remainders are close together, pointwise. -/
lemma exists_approx {Œπ : Type*} [fintype Œπ] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0)
  (h : abv.is_admissible)
  (A : fin (h.card Œµ ^ fintype.card Œπ).succ ‚Üí Œπ ‚Üí R) :
  ‚àÉ (i‚ÇÄ i‚ÇÅ), (i‚ÇÄ ‚â† i‚ÇÅ) ‚àß ‚àÄ k, (abv (A i‚ÇÅ k % b - A i‚ÇÄ k % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
begin
  let e := fintype.equiv_fin Œπ,
  obtain ‚ü®i‚ÇÄ, i‚ÇÅ, ne, h‚ü© := h.exists_approx_aux (fintype.card Œπ) hŒµ hb (Œª x y, A x (e.symm y)),
  refine ‚ü®i‚ÇÄ, i‚ÇÅ, ne, Œª k, _‚ü©,
  convert h (e k); simp only [e.symm_apply_apply]
end

end is_admissible

end absolute_value
