/-
Copyright (c) 2021 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel
-/
import measure_theory.covering.vitali_family
import measure_theory.measure.regular
import measure_theory.function.ae_measurable_order
import measure_theory.integral.lebesgue
import measure_theory.decomposition.radon_nikodym

/-!
# Differentiation of measures

On a metric space with a measure `Œº`, consider a Vitali family (i.e., for each `x` one has a family
of sets shrinking to `x`, with a good behavior with respect to covering theorems).
Consider also another measure `œÅ`. Then, for almost every `x`, the ratio `œÅ a / Œº a` converges when
`a` shrinks to `x` along the Vitali family, towards the Radon-Nikodym derivative of `œÅ` with
respect to `Œº`. This is the main theorem on differentiation of measures.

This theorem is proved in this file, under the name `vitali_family.ae_tendsto_rn_deriv`. Note that,
almost surely, `Œº a` is eventually positive and finite (see
`vitali_family.ae_eventually_measure_pos` and `vitali_family.eventually_measure_lt_top`), so the
ratio really makes sense.

For concrete applications, one needs concrete instances of Vitali families, as provided for instance
by `besicovitch.vitali_family` (for balls) or by `vitali.vitali_family` (for doubling measures).

## Sketch of proof

Let `v` be a Vitali family for `Œº`. Assume for simplicity that `œÅ` is absolutely continuous with
respect to `Œº`, as the case of a singular measure is easier.

It is easy to see that a set `s` on which `liminf œÅ a / Œº a < q` satisfies `œÅ s ‚â§ q * Œº s`, by using
a disjoint subcovering provided by the definition of Vitali families. Similarly for the limsup.
It follows that a set on which `œÅ a / Œº a` oscillates has measure `0`, and therefore that
`œÅ a / Œº a` converges almost surely (`vitali_family.ae_tendsto_div`). Moreover, on a set where the
limit is close to a constant `c`, one gets `œÅ s ‚àº c Œº s`, using again a covering lemma as above.
It follows that `œÅ` is equal to `Œº.with_density (v.lim_ratio œÅ x)`, where `v.lim_ratio œÅ x` is the
limit of `œÅ a / Œº a` at `x` (which is well defined almost everywhere). By uniqueness of the
Radon-Nikodym derivative, one gets `v.lim_ratio œÅ x = œÅ.rn_deriv Œº x` almost everywhere, completing
the proof.

There is a difficulty in this sketch: this argument works well when `v.lim_ratio œÅ` is measurable,
but there is no guarantee that this is the case, especially if one doesn't make further assumptions
on the Vitali family. We use an indirect argument to show that `v.lim_ratio œÅ` is always
almost everywhere measurable, again based on the disjoint subcovering argument
(see `vitali_family.exists_measurable_supersets_lim_ratio`), and then proceed as sketched above
but replacing `v.lim_ratio œÅ` by a measurable version called `v.lim_ratio_meas œÅ`.

## References

* [Herbert Federer, Geometric Measure Theory, Chapter 2.9][Federer1996]
-/

open measure_theory metric set filter topological_space measure_theory.measure
open_locale filter ennreal measure_theory nnreal topological_space

local attribute [instance] emetric.second_countable_of_sigma_compact

variables {Œ± : Type*} [metric_space Œ±] {m0 : measurable_space Œ±}
{Œº : measure Œ±} (v : vitali_family Œº)
include v

namespace vitali_family

/-- The limit along a Vitali family of `œÅ a / Œº a` where it makes sense, and garbage otherwise.
Do *not* use this definition: it is only a temporary device to show that this ratio tends almost
everywhere to the Radon-Nikodym derivative. -/
noncomputable def lim_ratio (œÅ : measure Œ±) (x : Œ±) : ‚Ñù‚â•0‚àû :=
lim (v.filter_at x) (Œª a, œÅ a / Œº a)

/-- For almost every point `x`, sufficiently small sets in a Vitali family around `x` have positive
measure. (This is a nontrivial result, following from the covering property of Vitali families). -/
theorem ae_eventually_measure_pos [second_countable_topology Œ±] :
  ‚àÄ·µê x ‚àÇŒº, ‚àÄ·∂† a in v.filter_at x, 0 < Œº a :=
begin
  set s := {x | ¬¨ (‚àÄ·∂† a in v.filter_at x, 0 < Œº a)} with hs,
  simp only [not_lt, not_eventually, nonpos_iff_eq_zero] at hs,
  change Œº s = 0,
  let f : Œ± ‚Üí set (set Œ±) := Œª x, {a | Œº a = 0},
  have h : v.fine_subfamily_on f s,
  { assume x hx Œµ Œµpos,
    rw hs at hx,
    simp only [frequently_filter_at_iff, exists_prop, gt_iff_lt, mem_set_of_eq] at hx,
    rcases hx Œµ Œµpos with ‚ü®a, a_sets, ax, Œºa‚ü©,
    exact ‚ü®a, ‚ü®a_sets, Œºa‚ü©, ax‚ü© },
  refine le_antisymm _ bot_le,
  calc Œº s ‚â§ ‚àë' (x : h.index), Œº (h.covering x) : h.measure_le_tsum
  ... = ‚àë' (x : h.index), 0 : by { congr, ext1 x, exact h.covering_mem x.2 }
  ... = 0 : by simp only [tsum_zero, add_zero]
end

/-- For every point `x`, sufficiently small sets in a Vitali family around `x` have finite measure.
(This is a trivial result, following from the fact that the measure is locally finite). -/
theorem eventually_measure_lt_top [is_locally_finite_measure Œº] (x : Œ±) :
  ‚àÄ·∂† a in v.filter_at x, Œº a < ‚àû :=
begin
  obtain ‚ü®Œµ, Œµpos, ŒºŒµ‚ü© : ‚àÉ (Œµ : ‚Ñù) (hi : 0 < Œµ), Œº (closed_ball x Œµ) < ‚àû :=
    (Œº.finite_at_nhds x).exists_mem_basis nhds_basis_closed_ball,
  exact v.eventually_filter_at_iff.2 ‚ü®Œµ, Œµpos, Œª a ha haŒµ, (measure_mono haŒµ).trans_lt ŒºŒµ‚ü©,
end

/-- If two measures `œÅ` and `ŒΩ` have, at every point of a set `s`, arbitrarily small sets in a
Vitali family satisfying `œÅ a ‚â§ ŒΩ a`, then `œÅ s ‚â§ ŒΩ s` if `œÅ ‚â™ Œº`.-/
theorem measure_le_of_frequently_le [sigma_compact_space Œ±] [borel_space Œ±]
  {œÅ : measure Œ±} (ŒΩ : measure Œ±) [is_locally_finite_measure ŒΩ]
  (hœÅ : œÅ ‚â™ Œº) (s : set Œ±) (hs : ‚àÄ x ‚àà s, ‚àÉ·∂† a in v.filter_at x, œÅ a ‚â§ ŒΩ a) :
  œÅ s ‚â§ ŒΩ s :=
begin
  -- this follows from a covering argument using the sets satisfying `œÅ a ‚â§ ŒΩ a`.
  apply ennreal.le_of_forall_pos_le_add (Œª Œµ Œµpos hc, _),
  obtain ‚ü®U, sU, U_open, ŒΩU‚ü© : ‚àÉ (U : set Œ±) (H : s ‚äÜ U), is_open U ‚àß ŒΩ U ‚â§ ŒΩ s + Œµ :=
    exists_is_open_le_add s ŒΩ (ennreal.coe_pos.2 Œµpos).ne',
  let f : Œ± ‚Üí set (set Œ±) := Œª x, {a | œÅ a ‚â§ ŒΩ a ‚àß a ‚äÜ U},
  have h : v.fine_subfamily_on f s,
  { apply v.fine_subfamily_on_of_frequently f s (Œª x hx, _),
    have := (hs x hx).and_eventually ((v.eventually_filter_at_mem_sets x).and
      (v.eventually_filter_at_subset_of_nhds (U_open.mem_nhds (sU hx)))),
    apply frequently.mono this,
    rintros a ‚ü®œÅa, av, aU‚ü©,
    exact ‚ü®œÅa, aU‚ü© },
  haveI : encodable h.index := h.index_countable.to_encodable,
  calc œÅ s ‚â§ ‚àë' (x : h.index), œÅ (h.covering x) : h.measure_le_tsum_of_absolutely_continuous hœÅ
  ... ‚â§ ‚àë' (x : h.index), ŒΩ (h.covering x) : ennreal.tsum_le_tsum (Œª x, (h.covering_mem x.2).1)
  ... = ŒΩ (‚ãÉ (x : h.index), h.covering x) :
    by rw [measure_Union h.covering_disjoint_subtype (Œª i, h.measurable_set_u i.2)]
  ... ‚â§ ŒΩ U : measure_mono (Union_subset (Œª i, (h.covering_mem i.2).2))
  ... ‚â§ ŒΩ s + Œµ : ŒΩU
end

section

variables [sigma_compact_space Œ±] [borel_space Œ±] [is_locally_finite_measure Œº]
  {œÅ : measure Œ±} [is_locally_finite_measure œÅ]

/-- If a measure `œÅ` is singular with respect to `Œº`, then for `Œº` almost every `x`, the ratio
`œÅ a / Œº a` tends to zero when `a` shrinks to `x` along the Vitali family. This makes sense
as `Œº a` is eventually positive by `ae_eventually_measure_pos`. -/
lemma ae_eventually_measure_zero_of_singular (hœÅ : œÅ ‚ä•‚Çò Œº) :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù 0) :=
begin
  have A : ‚àÄ Œµ > (0 : ‚Ñù‚â•0), ‚àÄ·µê x ‚àÇŒº, ‚àÄ·∂† a in v.filter_at x, œÅ a < Œµ * Œº a,
  { assume Œµ Œµpos,
    set s := {x | ¬¨(‚àÄ·∂† a in v.filter_at x, œÅ a < Œµ * Œº a) } with hs,
    change Œº s = 0,
    obtain ‚ü®o, o_meas, œÅo, Œºo‚ü© : ‚àÉ (o : set Œ±), measurable_set o ‚àß œÅ o = 0 ‚àß Œº o·∂ú = 0 := hœÅ,
    apply le_antisymm _ bot_le,
    calc Œº s ‚â§ Œº ((s ‚à© o) ‚à™ o·∂ú) : begin
      conv_lhs { rw ‚Üê inter_union_compl s o },
      exact measure_mono (union_subset_union_right _ (inter_subset_right _ _))
    end
    ... ‚â§ Œº (s ‚à© o) + Œº (o·∂ú) : measure_union_le _ _
    ... = Œº (s ‚à© o) : by rw [Œºo, add_zero]
    ... = Œµ‚Åª¬π * (Œµ ‚Ä¢ Œº) (s ‚à© o) : begin
      simp only [coe_nnreal_smul_apply, ‚Üê mul_assoc, mul_comm _ (Œµ : ‚Ñù‚â•0‚àû)],
      rw [ennreal.mul_inv_cancel (ennreal.coe_pos.2 Œµpos).ne' ennreal.coe_ne_top, one_mul],
    end
    ... ‚â§ Œµ‚Åª¬π * œÅ (s ‚à© o) : begin
      apply ennreal.mul_le_mul le_rfl,
      refine v.measure_le_of_frequently_le œÅ ((measure.absolutely_continuous.refl Œº).smul Œµ) _ _,
      assume x hx,
      rw hs at hx,
      simp only [mem_inter_eq, not_lt, not_eventually, mem_set_of_eq] at hx,
      exact hx.1
    end
    ... ‚â§ Œµ‚Åª¬π * œÅ o : ennreal.mul_le_mul le_rfl (measure_mono (inter_subset_right _ _))
    ... = 0 : by rw [œÅo, mul_zero] },
  obtain ‚ü®u, u_anti, u_pos, u_lim‚ü© :
    ‚àÉ (u : ‚Ñï ‚Üí ‚Ñù‚â•0), strict_anti u ‚àß (‚àÄ (n : ‚Ñï), 0 < u n) ‚àß tendsto u at_top (ùìù 0) :=
      exists_seq_strict_anti_tendsto (0 : ‚Ñù‚â•0),
  have B : ‚àÄ·µê x ‚àÇŒº, ‚àÄ n, ‚àÄ·∂† a in v.filter_at x, œÅ a < u n * Œº a :=
    ae_all_iff.2 (Œª n, A (u n) (u_pos n)),
  filter_upwards [B, v.ae_eventually_measure_pos],
  assume x hx h'x,
  refine tendsto_order.2 ‚ü®Œª z hz, (ennreal.not_lt_zero hz).elim, Œª z hz, _‚ü©,
  obtain ‚ü®w, w_pos, w_lt‚ü© : ‚àÉ (w : ‚Ñù‚â•0), (0 : ‚Ñù‚â•0‚àû) < w ‚àß (w : ‚Ñù‚â•0‚àû) < z :=
    ennreal.lt_iff_exists_nnreal_btwn.1 hz,
  obtain ‚ü®n, hn‚ü© : ‚àÉ n, u n < w :=
    ((tendsto_order.1 u_lim).2 w (ennreal.coe_pos.1 w_pos)).exists,
  filter_upwards [hx n, h'x, v.eventually_measure_lt_top x],
  assume a ha Œºa_pos Œºa_lt_top,
  rw ennreal.div_lt_iff (or.inl Œºa_pos.ne') (or.inl Œºa_lt_top.ne),
  exact ha.trans_le (ennreal.mul_le_mul ((ennreal.coe_le_coe.2 hn.le).trans w_lt.le) le_rfl)
end

section absolutely_continuous

variable (hœÅ : œÅ ‚â™ Œº)
include hœÅ

/-- A set of points `s` satisfying both `œÅ a ‚â§ c * Œº a` and `œÅ a ‚â• d * Œº a` at arbitrarily small
sets in a Vitali family has measure `0` if `c < d`. Indeed, the first inequality should imply
that `œÅ s ‚â§ c * Œº s`, and the second one that `œÅ s ‚â• d * Œº s`, a contradiction if `0 < Œº s`. -/
theorem null_of_frequently_le_of_frequently_ge {c d : ‚Ñù‚â•0} (hcd : c < d) (s : set Œ±)
  (hc : ‚àÄ x ‚àà s, ‚àÉ·∂† a in v.filter_at x, œÅ a ‚â§ c * Œº a)
  (hd : ‚àÄ x ‚àà s, ‚àÉ·∂† a in v.filter_at x, (d : ‚Ñù‚â•0‚àû) * Œº a ‚â§ œÅ a) :
  Œº s = 0 :=
begin
  apply null_of_locally_null s (Œª x hx, _),
  obtain ‚ü®o, xo, o_open, Œºo‚ü© : ‚àÉ o : set Œ±, x ‚àà o ‚àß is_open o ‚àß Œº o < ‚àû :=
    measure.exists_is_open_measure_lt_top Œº x,
  refine ‚ü®s ‚à© o, inter_mem_nhds_within _ (o_open.mem_nhds xo), _‚ü©,
  let s' := s ‚à© o,
  by_contra,
  apply lt_irrefl (œÅ s'),
  calc œÅ s' ‚â§ c * Œº s' : v.measure_le_of_frequently_le (c ‚Ä¢ Œº) hœÅ s' (Œª x hx, hc x hx.1)
  ... < d * Œº s' : begin
    apply (ennreal.mul_lt_mul_right h _).2 (ennreal.coe_lt_coe.2 hcd),
    exact (lt_of_le_of_lt (measure_mono (inter_subset_right _ _)) Œºo).ne,
  end
  ... ‚â§ œÅ s' : v.measure_le_of_frequently_le œÅ
    ((measure.absolutely_continuous.refl Œº).smul d) s' (Œª x hx, hd x hx.1)
end

/-- If `œÅ` is absolutely continuous with respect to `Œº`, then for almost every `x`,
the ratio `œÅ a / Œº a` converges as `a` shrinks to `x` along a Vitali family for `Œº`. -/
theorem ae_tendsto_div :
  ‚àÄ·µê x ‚àÇŒº, ‚àÉ c, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù c) :=
begin
  obtain ‚ü®w, w_count, w_dense, w_zero, w_top‚ü© : ‚àÉ w : set ‚Ñù‚â•0‚àû, countable w ‚àß dense w ‚àß
    0 ‚àâ w ‚àß ‚àû ‚àâ w := ennreal.exists_countable_dense_no_zero_top,
  have I : ‚àÄ x ‚àà w, x ‚â† ‚àû := Œª x xs hx, w_top (hx ‚ñ∏ xs),
  have A : ‚àÄ (c ‚àà w) (d ‚àà w), (c < d) ‚Üí ‚àÄ·µê x ‚àÇŒº,
    ¬¨((‚àÉ·∂† a in v.filter_at x, œÅ a / Œº a < c) ‚àß (‚àÉ·∂† a in v.filter_at x, d < œÅ a / Œº a)),
  { assume c hc d hd hcd,
    lift c to ‚Ñù‚â•0 using I c hc,
    lift d to ‚Ñù‚â•0 using I d hd,
    apply v.null_of_frequently_le_of_frequently_ge hœÅ (ennreal.coe_lt_coe.1 hcd),
    { simp only [and_imp, exists_prop, not_frequently, not_and, not_lt, not_le, not_eventually,
        mem_set_of_eq, mem_compl_eq, not_forall],
      assume x h1x h2x,
      apply h1x.mono (Œª a ha, _),
      refine (ennreal.div_le_iff_le_mul _ (or.inr (bot_le.trans_lt ha).ne')).1 ha.le,
      simp only [ennreal.coe_ne_top, ne.def, or_true, not_false_iff] },
    { simp only [and_imp, exists_prop, not_frequently, not_and, not_lt, not_le, not_eventually,
        mem_set_of_eq, mem_compl_eq, not_forall],
      assume x h1x h2x,
      apply h2x.mono (Œª a ha, _),
      exact ennreal.mul_le_of_le_div ha.le } },
  have B : ‚àÄ·µê x ‚àÇŒº, ‚àÄ (c ‚àà w) (d ‚àà w), (c < d) ‚Üí
    ¬¨((‚àÉ·∂† a in v.filter_at x, œÅ a / Œº a < c) ‚àß (‚àÉ·∂† a in v.filter_at x, d < œÅ a / Œº a)),
    by simpa only [ae_ball_iff w_count, ae_imp_iff],
  filter_upwards [B],
  assume x hx,
  exact tendsto_of_no_upcrossings w_dense hx,
end

lemma ae_tendsto_lim_ratio :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù (v.lim_ratio œÅ x)) :=
begin
  filter_upwards [v.ae_tendsto_div hœÅ],
  assume x hx,
  exact tendsto_nhds_lim hx,
end

/-- Given two thresholds `p < q`, the sets `{x | v.lim_ratio œÅ x < p}`
and `{x | q < v.lim_ratio œÅ x}` are obviously disjoint. The key to proving that `v.lim_ratio œÅ` is
almost everywhere measurable is to show that these sets have measurable supersets which are also
disjoint, up to zero measure. This is the content of this lemma. -/
lemma exists_measurable_supersets_lim_ratio {p q : ‚Ñù‚â•0} (hpq : p < q) :
  ‚àÉ a b, measurable_set a ‚àß measurable_set b ‚àß {x | v.lim_ratio œÅ x < p} ‚äÜ a
    ‚àß {x | (q : ‚Ñù‚â•0‚àû) < v.lim_ratio œÅ x} ‚äÜ b ‚àß Œº (a ‚à© b) = 0 :=
begin
  /- Here is a rough sketch, assuming that the measure is finite and the limit is well defined
  everywhere. Let `u := {x | v.lim_ratio œÅ x < p}` and `w := {x | q < v.lim_ratio œÅ x}`. They
  have measurable supersets `u'` and `w'` of the same measure. We will show that these satisfy
  the conclusion of the theorem, i.e., `Œº (u' ‚à© w') = 0`. For this, note that
  `œÅ (u' ‚à© w') = œÅ (u ‚à© w')` (as `w'` is measurable, see `measure_to_measurable_add_inter_left`).
  The latter set is included in the set where the limit of the ratios is `< p`, and therefore
  its measure is `‚â§ p * Œº (u ‚à© w')`. Using the same trick in the other direction gives that this is
  `p * Œº (u' ‚à© w')`. We have shown that `œÅ (u' ‚à© w') ‚â§ p * Œº (u' ‚à© w')`. Arguing in the same way but
  using the `w` part gives `q * Œº (u' ‚à© w') ‚â§ œÅ (u' ‚à© w')`. If `Œº (u' ‚à© w')` were nonzero, this
  would be a contradiction as `p < q`.

  For the rigorous proof, we need to work on a part of the space where the measure is finite
  (provided by `spanning_sets (œÅ + Œº)`) and to restrict to the set where the limit is well defined
  (called `s` below, of full measure). Otherwise, the argument goes through.
  -/
  let s := {x | ‚àÉ c, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù c)},
  let o : ‚Ñï ‚Üí set Œ± := spanning_sets (œÅ + Œº),
  let u := Œª n, s ‚à© {x | v.lim_ratio œÅ x < p} ‚à© o n,
  let w := Œª n, s ‚à© {x | (q : ‚Ñù‚â•0‚àû) < v.lim_ratio œÅ x} ‚à© o n,
  -- the supersets are obtained by restricting to the set `s` where the limit is well defined, to
  -- a finite measure part `o n`, taking a measurable superset here, and then taking the union over
  -- `n`.
  refine ‚ü®to_measurable Œº s·∂ú ‚à™ (‚ãÉ n, to_measurable (œÅ + Œº) (u n)),
    to_measurable Œº s·∂ú ‚à™ (‚ãÉ n, to_measurable (œÅ + Œº) (w n)), _, _, _, _, _‚ü©,
  -- check that these sets are measurable supersets as required
  { exact (measurable_set_to_measurable _ _).union
      (measurable_set.Union (Œª n, (measurable_set_to_measurable _ _))) },
  { exact (measurable_set_to_measurable _ _).union
      (measurable_set.Union (Œª n, (measurable_set_to_measurable _ _))) },
  { assume x hx,
    by_cases h : x ‚àà s,
    { refine or.inr (mem_Union.2 ‚ü®spanning_sets_index (œÅ + Œº) x, _‚ü©),
      exact subset_to_measurable _ _ ‚ü®‚ü®h, hx‚ü©, mem_spanning_sets_index _ _‚ü© },
    { exact or.inl (subset_to_measurable Œº s·∂ú h) } },
  { assume x hx,
    by_cases h : x ‚àà s,
    { refine or.inr (mem_Union.2 ‚ü®spanning_sets_index (œÅ + Œº) x, _‚ü©),
      exact subset_to_measurable _ _ ‚ü®‚ü®h, hx‚ü©, mem_spanning_sets_index _ _‚ü© },
    { exact or.inl (subset_to_measurable Œº s·∂ú h) } },
  -- it remains to check the nontrivial part that these sets have zero measure intersection.
  -- it suffices to do it for fixed `m` and `n`, as one is taking countable unions.
  suffices H : ‚àÄ (m n : ‚Ñï), Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) = 0,
  { have A : (to_measurable Œº s·∂ú ‚à™ (‚ãÉ n, to_measurable (œÅ + Œº) (u n))) ‚à©
      (to_measurable Œº s·∂ú ‚à™ (‚ãÉ n, to_measurable (œÅ + Œº) (w n))) ‚äÜ
      to_measurable Œº s·∂ú ‚à™ (‚ãÉ m n, (to_measurable (œÅ + Œº) (u m)) ‚à© (to_measurable (œÅ + Œº) (w n))),
    { simp only [inter_distrib_left, inter_distrib_right, true_and, subset_union_left,
        union_subset_iff, inter_self],
      refine ‚ü®_, _, _‚ü©,
      { exact (inter_subset_left _ _).trans (subset_union_left _ _) },
      { exact (inter_subset_right _ _).trans (subset_union_left _ _) },
      { simp_rw [Union_inter, inter_Union], exact subset_union_right _ _ } },
    refine le_antisymm ((measure_mono A).trans _) bot_le,
    calc
    Œº (to_measurable Œº s·∂ú ‚à™ (‚ãÉ m n, (to_measurable (œÅ + Œº) (u m)) ‚à© (to_measurable (œÅ + Œº) (w n))))
    ‚â§ Œº (to_measurable Œº s·∂ú)
        + Œº (‚ãÉ m n, (to_measurable (œÅ + Œº) (u m)) ‚à© (to_measurable (œÅ + Œº) (w n))) :
      measure_union_le _ _
    ... = Œº (‚ãÉ m n, (to_measurable (œÅ + Œº) (u m)) ‚à© (to_measurable (œÅ + Œº) (w n))) :
      by { have : Œº s·∂ú = 0 := v.ae_tendsto_div hœÅ, rw [measure_to_measurable, this, zero_add] }
    ... ‚â§ ‚àë' m n, Œº ((to_measurable (œÅ + Œº) (u m)) ‚à© (to_measurable (œÅ + Œº) (w n))) :
      (measure_Union_le _).trans (ennreal.tsum_le_tsum (Œª m, measure_Union_le _))
    ... = 0 : by simp only [H, tsum_zero] },
  -- now starts the nontrivial part of the argument. We fix `m` and `n`, and show that the
  -- measurable supersets of `u m` and `w n` have zero measure intersection by using the lemmas
  -- `measure_to_measurable_add_inter_left` (to reduce to `u m` or `w n` instead of the measurable
  -- superset) and `measure_le_of_frequently_le` to compare their measures for `œÅ` and `Œº`.
  assume m n,
  have I : (œÅ + Œº) (u m) ‚â† ‚àû,
  { apply (lt_of_le_of_lt (measure_mono _) (measure_spanning_sets_lt_top (œÅ + Œº) m)).ne,
    exact inter_subset_right _ _ },
  have J : (œÅ + Œº) (w n) ‚â† ‚àû,
  { apply (lt_of_le_of_lt (measure_mono _) (measure_spanning_sets_lt_top (œÅ + Œº) n)).ne,
    exact inter_subset_right _ _ },
  have A : œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n))
            ‚â§ p * Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) := calc
    œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n))
        = œÅ (u m ‚à© to_measurable (œÅ + Œº) (w n)) :
          measure_to_measurable_add_inter_left (measurable_set_to_measurable _ _) I
    ... ‚â§ (p ‚Ä¢ Œº) (u m ‚à© to_measurable (œÅ + Œº) (w n)) : begin
        refine v.measure_le_of_frequently_le _ hœÅ _ (Œª x hx, _),
        have L : tendsto (Œª (a : set Œ±), œÅ a / Œº a) (v.filter_at x) (ùìù (v.lim_ratio œÅ x)) :=
          tendsto_nhds_lim hx.1.1.1,
        have I : ‚àÄ·∂† (b : set Œ±) in v.filter_at x, œÅ b / Œº b < p :=
          (tendsto_order.1 L).2 _ hx.1.1.2,
        apply I.frequently.mono (Œª a ha, _),
        rw [coe_nnreal_smul_apply],
        refine (ennreal.div_le_iff_le_mul _ (or.inr (bot_le.trans_lt ha).ne')).1 ha.le,
        simp only [ennreal.coe_ne_top, ne.def, or_true, not_false_iff]
      end
    ... = p * Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) :
       by simp only [coe_nnreal_smul_apply,
          (measure_to_measurable_add_inter_right (measurable_set_to_measurable _ _) I)],
  have B : (q : ‚Ñù‚â•0‚àû) * Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n))
              ‚â§ œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) := calc
    (q : ‚Ñù‚â•0‚àû) * Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n))
        = (q : ‚Ñù‚â•0‚àû) * Œº (to_measurable (œÅ + Œº) (u m) ‚à© w n) : begin
        conv_rhs { rw inter_comm },
        rw [inter_comm, measure_to_measurable_add_inter_right (measurable_set_to_measurable _ _) J]
      end
    ... ‚â§ œÅ (to_measurable (œÅ + Œº) (u m) ‚à© w n) : begin
        rw [‚Üê coe_nnreal_smul_apply],
        refine v.measure_le_of_frequently_le _ (absolutely_continuous.rfl.coe_nnreal_smul _) _ _,
        assume x hx,
        have L : tendsto (Œª (a : set Œ±), œÅ a / Œº a) (v.filter_at x) (ùìù (v.lim_ratio œÅ x)) :=
          tendsto_nhds_lim hx.2.1.1,
        have I : ‚àÄ·∂† (b : set Œ±) in v.filter_at x, (q : ‚Ñù‚â•0‚àû) < œÅ b / Œº b :=
          (tendsto_order.1 L).1 _ hx.2.1.2,
        apply I.frequently.mono (Œª a ha, _),
        rw [coe_nnreal_smul_apply],
        exact ennreal.mul_le_of_le_div ha.le
      end
    ... = œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) : begin
        conv_rhs { rw inter_comm },
        rw inter_comm,
        exact (measure_to_measurable_add_inter_left (measurable_set_to_measurable _ _) J).symm,
      end,
  by_contra,
  apply lt_irrefl (œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n))),
  calc œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n))
      ‚â§ p * Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) : A
  ... < q * Œº (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) : begin
    apply (ennreal.mul_lt_mul_right h _).2 (ennreal.coe_lt_coe.2 hpq),
    suffices H : (œÅ + Œº) (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) ‚â† ‚àû,
    { simp only [not_or_distrib, ennreal.add_eq_top, pi.add_apply, ne.def, coe_add] at H,
      exact H.2 },
    apply (lt_of_le_of_lt (measure_mono (inter_subset_left _ _)) _).ne,
    rw measure_to_measurable,
    apply lt_of_le_of_lt (measure_mono _) (measure_spanning_sets_lt_top (œÅ + Œº) m),
    exact inter_subset_right _ _
  end
  ... ‚â§ œÅ (to_measurable (œÅ + Œº) (u m) ‚à© to_measurable (œÅ + Œº) (w n)) : B
end

theorem ae_measurable_lim_ratio : ae_measurable (v.lim_ratio œÅ) Œº :=
begin
  apply ennreal.ae_measurable_of_exist_almost_disjoint_supersets _ _ (Œª p q hpq, _),
  exact v.exists_measurable_supersets_lim_ratio hœÅ hpq,
end

/-- A measurable version of `v.lim_ratio œÅ`. Do *not* use this definition: it is only a temporary
device to show that `v.lim_ratio` is almost everywhere equal to the Radon-Nikodym derivative. -/
noncomputable def lim_ratio_meas : Œ± ‚Üí ‚Ñù‚â•0‚àû :=
(v.ae_measurable_lim_ratio hœÅ).mk _

lemma lim_ratio_meas_measurable : measurable (v.lim_ratio_meas hœÅ) :=
ae_measurable.measurable_mk _

lemma ae_tendsto_lim_ratio_meas :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù (v.lim_ratio_meas hœÅ x)) :=
begin
  filter_upwards [v.ae_tendsto_lim_ratio hœÅ, ae_measurable.ae_eq_mk (v.ae_measurable_lim_ratio hœÅ)],
  assume x hx h'x,
  rwa h'x at hx,
end

/-- If, for all `x` in a set `s`, one has frequently `œÅ a / Œº a < p`, then `œÅ s ‚â§ p * Œº s`, as
proved in `measure_le_of_frequently_le`. Since `œÅ a / Œº a` tends almost everywhere to
`v.lim_ratio_meas hœÅ x`, the same property holds for sets `s` on which `v.lim_ratio_meas hœÅ < p`. -/
lemma measure_le_mul_of_subset_lim_ratio_meas_lt
  {p : ‚Ñù‚â•0} {s : set Œ±} (h : s ‚äÜ {x | v.lim_ratio_meas hœÅ x < p}) :
  œÅ s ‚â§ p * Œº s :=
begin
  let t := {x : Œ± | tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù (v.lim_ratio_meas hœÅ x))},
  have A : Œº t·∂ú = 0 := v.ae_tendsto_lim_ratio_meas hœÅ,
  suffices H : œÅ (s ‚à© t) ‚â§ (p ‚Ä¢ Œº) (s ‚à© t), from calc
    œÅ s = œÅ ((s ‚à© t) ‚à™ (s ‚à© t·∂ú)) : by rw inter_union_compl
    ... ‚â§ œÅ (s ‚à© t) + œÅ (s ‚à© t·∂ú) : measure_union_le _ _
    ... ‚â§ p * Œº (s ‚à© t) + 0 :
      add_le_add H ((measure_mono (inter_subset_right _ _)).trans (hœÅ A).le)
    ... ‚â§ p * Œº s :
      by { rw add_zero, exact ennreal.mul_le_mul le_rfl (measure_mono (inter_subset_left _ _)) },
  refine v.measure_le_of_frequently_le _ hœÅ _ (Œª x hx, _),
  have I : ‚àÄ·∂† (b : set Œ±) in v.filter_at x, œÅ b / Œº b < p := (tendsto_order.1 hx.2).2 _ (h hx.1),
  apply I.frequently.mono (Œª a ha, _),
  rw [coe_nnreal_smul_apply],
  refine (ennreal.div_le_iff_le_mul _ (or.inr (bot_le.trans_lt ha).ne')).1 ha.le,
  simp only [ennreal.coe_ne_top, ne.def, or_true, not_false_iff]
end

/-- If, for all `x` in a set `s`, one has frequently `q < œÅ a / Œº a`, then `q * Œº s ‚â§ œÅ s`, as
proved in `measure_le_of_frequently_le`. Since `œÅ a / Œº a` tends almost everywhere to
`v.lim_ratio_meas hœÅ x`, the same property holds for sets `s` on which `q < v.lim_ratio_meas hœÅ`. -/
lemma mul_measure_le_of_subset_lt_lim_ratio_meas
  {q : ‚Ñù‚â•0} {s : set Œ±} (h : s ‚äÜ {x | (q : ‚Ñù‚â•0‚àû) < v.lim_ratio_meas hœÅ x}) :
  (q : ‚Ñù‚â•0‚àû) * Œº s ‚â§ œÅ s :=
begin
  let t := {x : Œ± | tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù (v.lim_ratio_meas hœÅ x))},
  have A : Œº t·∂ú = 0 := v.ae_tendsto_lim_ratio_meas hœÅ,
  suffices H : (q ‚Ä¢ Œº) (s ‚à© t) ‚â§ œÅ (s ‚à© t), from calc
    (q ‚Ä¢ Œº) s = (q ‚Ä¢ Œº) ((s ‚à© t) ‚à™ (s ‚à© t·∂ú)) : by rw inter_union_compl
    ... ‚â§ (q ‚Ä¢ Œº) (s ‚à© t) + (q ‚Ä¢ Œº) (s ‚à© t·∂ú) : measure_union_le _ _
    ... ‚â§ œÅ (s ‚à© t) + q * Œº t·∂ú : begin
        apply add_le_add H,
        rw [coe_nnreal_smul_apply],
        exact ennreal.mul_le_mul le_rfl (measure_mono (inter_subset_right _ _)),
      end
    ... ‚â§ œÅ s :
      by { rw [A, mul_zero, add_zero], exact measure_mono (inter_subset_left _ _) },
  refine v.measure_le_of_frequently_le _ (absolutely_continuous.rfl.coe_nnreal_smul _) _ _,
  assume x hx,
  have I : ‚àÄ·∂† a in v.filter_at x, (q : ‚Ñù‚â•0‚àû) < œÅ a / Œº a := (tendsto_order.1 hx.2).1 _ (h hx.1),
  apply I.frequently.mono (Œª a ha, _),
  rw [coe_nnreal_smul_apply],
  exact ennreal.mul_le_of_le_div ha.le
end

/-- The points with `v.lim_ratio_meas hœÅ x = ‚àû` have measure `0` for `Œº`. -/
lemma measure_lim_ratio_meas_top : Œº {x | v.lim_ratio_meas hœÅ x = ‚àû} = 0 :=
begin
  refine null_of_locally_null _ (Œª x hx, _),
  obtain ‚ü®o, xo, o_open, Œºo‚ü© : ‚àÉ o : set Œ±, x ‚àà o ‚àß is_open o ‚àß œÅ o < ‚àû :=
    measure.exists_is_open_measure_lt_top œÅ x,
  let s := {x : Œ± | v.lim_ratio_meas hœÅ x = ‚àû} ‚à© o,
  refine ‚ü®s, inter_mem_nhds_within _ (o_open.mem_nhds xo), le_antisymm _ bot_le‚ü©,
  have œÅs : œÅ s ‚â† ‚àû := ((measure_mono (inter_subset_right _ _)).trans_lt Œºo).ne,
  have A : ‚àÄ (q : ‚Ñù‚â•0), 1 ‚â§ q ‚Üí Œº s ‚â§ q‚Åª¬π * œÅ s,
  { assume q hq,
    rw [mul_comm, ‚Üê div_eq_mul_inv, ennreal.le_div_iff_mul_le _ (or.inr œÅs), mul_comm],
    { apply v.mul_measure_le_of_subset_lt_lim_ratio_meas hœÅ,
      assume y hy,
      have : v.lim_ratio_meas hœÅ y = ‚àû := hy.1,
      simp only [this, ennreal.coe_lt_top, mem_set_of_eq], },
    { simp only [(zero_lt_one.trans_le hq).ne', true_or, ennreal.coe_eq_zero, ne.def,
        not_false_iff] } },
  have B : tendsto (Œª (q : ‚Ñù‚â•0), (q : ‚Ñù‚â•0‚àû)‚Åª¬π * œÅ s) at_top (ùìù (‚àû‚Åª¬π * œÅ s)),
  { apply ennreal.tendsto.mul_const _ (or.inr œÅs),
    exact ennreal.tendsto_inv_iff.2 (ennreal.tendsto_coe_nhds_top.2 tendsto_id) },
  simp only [zero_mul, ennreal.inv_top] at B,
  apply ge_of_tendsto B,
  exact eventually_at_top.2 ‚ü®1, A‚ü©,
end

/-- The points with `v.lim_ratio_meas hœÅ x = 0` have measure `0` for `œÅ`. -/
lemma measure_lim_ratio_meas_zero : œÅ {x | v.lim_ratio_meas hœÅ x = 0} = 0 :=
begin
  refine null_of_locally_null _ (Œª x hx, _),
  obtain ‚ü®o, xo, o_open, Œºo‚ü© : ‚àÉ o : set Œ±, x ‚àà o ‚àß is_open o ‚àß Œº o < ‚àû :=
    measure.exists_is_open_measure_lt_top Œº x,
  let s := {x : Œ± | v.lim_ratio_meas hœÅ x = 0} ‚à© o,
  refine ‚ü®s, inter_mem_nhds_within _ (o_open.mem_nhds xo), le_antisymm _ bot_le‚ü©,
  have Œºs : Œº s ‚â† ‚àû := ((measure_mono (inter_subset_right _ _)).trans_lt Œºo).ne,
  have A : ‚àÄ (q : ‚Ñù‚â•0), 0 < q ‚Üí œÅ s ‚â§ q * Œº s,
  { assume q hq,
    apply v.measure_le_mul_of_subset_lim_ratio_meas_lt hœÅ,
    assume y hy,
    have : v.lim_ratio_meas hœÅ y = 0 := hy.1,
    simp only [this, mem_set_of_eq, hq, ennreal.coe_pos], },
  have B : tendsto (Œª (q : ‚Ñù‚â•0), (q : ‚Ñù‚â•0‚àû) * Œº s) (ùìù[>] (0 : ‚Ñù‚â•0)) (ùìù ((0 : ‚Ñù‚â•0) * Œº s)),
  { apply ennreal.tendsto.mul_const _ (or.inr Œºs),
    rw ennreal.tendsto_coe,
    exact nhds_within_le_nhds },
  simp only [zero_mul, ennreal.coe_zero] at B,
  apply ge_of_tendsto B,
  filter_upwards [self_mem_nhds_within] using A,
end

/-- As an intermediate step to show that `Œº.with_density (v.lim_ratio_meas hœÅ) = œÅ`, we show here
that `Œº.with_density (v.lim_ratio_meas hœÅ) ‚â§ t^2 œÅ` for any `t > 1`. -/
lemma with_density_le_mul {s : set Œ±} (hs : measurable_set s) {t : ‚Ñù‚â•0} (ht : 1 < t) :
  Œº.with_density (v.lim_ratio_meas hœÅ) s ‚â§ t^2 * œÅ s :=
begin
  /- We cut `s` into the sets where `v.lim_ratio_meas hœÅ = 0`, where `v.lim_ratio_meas hœÅ = ‚àû`, and
  where `v.lim_ratio_meas hœÅ ‚àà [t^n, t^(n+1))` for `n : ‚Ñ§`. The first and second have measure `0`.
  For the latter, since `v.lim_ratio_meas hœÅ` fluctuates by at most `t` on this slice, we can use
  `measure_le_mul_of_subset_lim_ratio_meas_lt` and `mul_measure_le_of_subset_lt_lim_ratio_meas` to
  show that the two measures are comparable up to `t` (in fact `t^2` for technical reasons of
  strict inequalities). -/
  have t_ne_zero' : t ‚â† 0 := (zero_lt_one.trans ht).ne',
  have t_ne_zero : (t : ‚Ñù‚â•0‚àû) ‚â† 0, by simpa only [ennreal.coe_eq_zero, ne.def] using t_ne_zero',
  let ŒΩ := Œº.with_density (v.lim_ratio_meas hœÅ),
  let f := v.lim_ratio_meas hœÅ,
  have f_meas : measurable f := v.lim_ratio_meas_measurable hœÅ,
  have A : ŒΩ (s ‚à© f ‚Åª¬π' ({0})) ‚â§ ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) (s ‚à© f‚Åª¬π' {0}),
  { apply le_trans _ (zero_le _),
    have M : measurable_set (s ‚à© f ‚Åª¬π' ({0})) := hs.inter (f_meas (measurable_set_singleton _)),
    simp only [ŒΩ, f, nonpos_iff_eq_zero, M, with_density_apply, lintegral_eq_zero_iff f_meas],
    apply (ae_restrict_iff' M).2,
    exact eventually_of_forall (Œª x hx, hx.2) },
  have B : ŒΩ (s ‚à© f ‚Åª¬π' ({‚àû})) ‚â§ ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) (s ‚à© f‚Åª¬π' {‚àû}),
  { apply le_trans (le_of_eq _) (zero_le _),
    apply with_density_absolutely_continuous Œº _,
    rw ‚Üê nonpos_iff_eq_zero,
    exact (measure_mono (inter_subset_right _ _)).trans (v.measure_lim_ratio_meas_top hœÅ).le },
  have C : ‚àÄ (n : ‚Ñ§), ŒΩ (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1))))
                        ‚â§ ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1)))),
  { assume n,
    let I := Ico ((t : ‚Ñù‚â•0‚àû)^n) (t^(n+1)),
    have M : measurable_set (s ‚à© f ‚Åª¬π' I) := hs.inter (f_meas measurable_set_Ico),
    simp only [f, M, with_density_apply, coe_nnreal_smul_apply],
    calc
    ‚à´‚Åª x in s ‚à© f‚Åª¬π' I, f x ‚àÇŒº
        ‚â§ ‚à´‚Åª x in s ‚à© f‚Åª¬π' I, t^(n+1) ‚àÇŒº :
          lintegral_mono_ae ((ae_restrict_iff' M).2 (eventually_of_forall (Œª x hx, hx.2.2.le)))
    ... = t^(n+1) * Œº (s ‚à© f‚Åª¬π' I) :
          by simp only [lintegral_const, measurable_set.univ, measure.restrict_apply, univ_inter]
    ... = t^(2 : ‚Ñ§) * (t^(n-1) * Œº (s ‚à© f‚Åª¬π' I)) : begin
        rw [‚Üê mul_assoc, ‚Üê ennreal.zpow_add t_ne_zero ennreal.coe_ne_top],
        congr' 2,
        abel,
      end
    ... ‚â§ t^2 * œÅ (s ‚à© f ‚Åª¬π' I) : begin
        apply ennreal.mul_le_mul le_rfl _,
        rw ‚Üê ennreal.coe_zpow (zero_lt_one.trans ht).ne',
        apply v.mul_measure_le_of_subset_lt_lim_ratio_meas hœÅ,
        assume x hx,
        apply lt_of_lt_of_le _ hx.2.1,
        rw [‚Üê ennreal.coe_zpow (zero_lt_one.trans ht).ne', ennreal.coe_lt_coe, sub_eq_add_neg,
          zpow_add‚ÇÄ t_ne_zero'],
        conv_rhs { rw ‚Üê mul_one (t^ n) },
        refine mul_lt_mul' le_rfl _ (zero_le _) (nnreal.zpow_pos t_ne_zero' _),
        rw zpow_neg_one,
        exact nnreal.inv_lt_one ht,
      end },
  calc ŒΩ s = ŒΩ (s ‚à© f‚Åª¬π' {0}) + ŒΩ (s ‚à© f‚Åª¬π' {‚àû}) + ‚àë' (n : ‚Ñ§), ŒΩ (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1)))) :
    measure_eq_measure_preimage_add_measure_tsum_Ico_zpow ŒΩ f_meas hs ht
  ... ‚â§ ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) (s ‚à© f‚Åª¬π' {0}) + ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) (s ‚à© f‚Åª¬π' {‚àû})
          + ‚àë' (n : ‚Ñ§), ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1)))) :
            add_le_add (add_le_add A B) (ennreal.tsum_le_tsum C)
  ... = ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) s :
    (measure_eq_measure_preimage_add_measure_tsum_Ico_zpow ((t : ‚Ñù‚â•0‚àû)^2 ‚Ä¢ œÅ) f_meas hs ht).symm
end

/-- As an intermediate step to show that `Œº.with_density (v.lim_ratio_meas hœÅ) = œÅ`, we show here
that `œÅ ‚â§ t Œº.with_density (v.lim_ratio_meas hœÅ)` for any `t > 1`. -/
lemma le_mul_with_density {s : set Œ±} (hs : measurable_set s) {t : ‚Ñù‚â•0} (ht : 1 < t) :
  œÅ s ‚â§ t * Œº.with_density (v.lim_ratio_meas hœÅ) s :=
begin
  /- We cut `s` into the sets where `v.lim_ratio_meas hœÅ = 0`, where `v.lim_ratio_meas hœÅ = ‚àû`, and
  where `v.lim_ratio_meas hœÅ ‚àà [t^n, t^(n+1))` for `n : ‚Ñ§`. The first and second have measure `0`.
  For the latter, since `v.lim_ratio_meas hœÅ` fluctuates by at most `t` on this slice, we can use
  `measure_le_mul_of_subset_lim_ratio_meas_lt` and `mul_measure_le_of_subset_lt_lim_ratio_meas` to
  show that the two measures are comparable up to `t`. -/
  have t_ne_zero' : t ‚â† 0 := (zero_lt_one.trans ht).ne',
  have t_ne_zero : (t : ‚Ñù‚â•0‚àû) ‚â† 0, by simpa only [ennreal.coe_eq_zero, ne.def] using t_ne_zero',
  let ŒΩ := Œº.with_density (v.lim_ratio_meas hœÅ),
  let f := v.lim_ratio_meas hœÅ,
  have f_meas : measurable f := v.lim_ratio_meas_measurable hœÅ,
  have A : œÅ (s ‚à© f ‚Åª¬π' ({0})) ‚â§ (t ‚Ä¢ ŒΩ) (s ‚à© f‚Åª¬π' {0}),
  { refine le_trans (measure_mono (inter_subset_right _ _)) (le_trans (le_of_eq _) (zero_le _)),
    exact v.measure_lim_ratio_meas_zero hœÅ },
  have B : œÅ (s ‚à© f ‚Åª¬π' ({‚àû})) ‚â§ (t ‚Ä¢ ŒΩ) (s ‚à© f‚Åª¬π' {‚àû}),
  { apply le_trans (le_of_eq _) (zero_le _),
    apply hœÅ,
    rw ‚Üê nonpos_iff_eq_zero,
    exact (measure_mono (inter_subset_right _ _)).trans (v.measure_lim_ratio_meas_top hœÅ).le },
  have C : ‚àÄ (n : ‚Ñ§), œÅ (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1))))
                        ‚â§ (t ‚Ä¢ ŒΩ) (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1)))),
  { assume n,
    let I := Ico ((t : ‚Ñù‚â•0‚àû)^n) (t^(n+1)),
    have M : measurable_set (s ‚à© f ‚Åª¬π' I) := hs.inter (f_meas measurable_set_Ico),
    simp only [f, M, with_density_apply, coe_nnreal_smul_apply],
    calc œÅ (s ‚à© f ‚Åª¬π' I) ‚â§ t^ (n+1) * Œº (s ‚à© f ‚Åª¬π' I) : begin
        rw ‚Üê ennreal.coe_zpow t_ne_zero',
        apply v.measure_le_mul_of_subset_lim_ratio_meas_lt hœÅ,
        assume x hx,
        apply hx.2.2.trans_le (le_of_eq _),
        rw ennreal.coe_zpow t_ne_zero',
      end
    ... = ‚à´‚Åª x in s ‚à© f‚Åª¬π' I, t^(n+1) ‚àÇŒº :
      by simp only [lintegral_const, measurable_set.univ, measure.restrict_apply, univ_inter]
    ... ‚â§ ‚à´‚Åª x in s ‚à© f‚Åª¬π' I, t * f x ‚àÇŒº : begin
        apply lintegral_mono_ae ((ae_restrict_iff' M).2 (eventually_of_forall (Œª x hx, _))),
        rw [add_comm, ennreal.zpow_add t_ne_zero ennreal.coe_ne_top, zpow_one],
        exact ennreal.mul_le_mul le_rfl hx.2.1,
      end
    ... = t * ‚à´‚Åª x in s ‚à© f‚Åª¬π' I, f x ‚àÇŒº : lintegral_const_mul _ f_meas },
  calc œÅ s = œÅ (s ‚à© f‚Åª¬π' {0}) + œÅ (s ‚à© f‚Åª¬π' {‚àû}) + ‚àë' (n : ‚Ñ§), œÅ (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1)))) :
    measure_eq_measure_preimage_add_measure_tsum_Ico_zpow œÅ f_meas hs ht
  ... ‚â§ (t ‚Ä¢ ŒΩ) (s ‚à© f‚Åª¬π' {0}) + (t ‚Ä¢ ŒΩ) (s ‚à© f‚Åª¬π' {‚àû})
          + ‚àë' (n : ‚Ñ§), (t ‚Ä¢ ŒΩ) (s ‚à© f‚Åª¬π' (Ico (t^n) (t^(n+1)))) :
            add_le_add (add_le_add A B) (ennreal.tsum_le_tsum C)
  ... = (t ‚Ä¢ ŒΩ) s :
    (measure_eq_measure_preimage_add_measure_tsum_Ico_zpow (t ‚Ä¢ ŒΩ) f_meas hs ht).symm
end

theorem with_density_lim_ratio_meas_eq : Œº.with_density (v.lim_ratio_meas hœÅ) = œÅ :=
begin
  ext1 s hs,
  refine le_antisymm _ _,
  { have : tendsto (Œª (t : ‚Ñù‚â•0), (t^2 * œÅ s : ‚Ñù‚â•0‚àû)) (ùìù[>] 1) (ùìù ((1 : ‚Ñù‚â•0)^2 * œÅ s)),
    { refine ennreal.tendsto.mul _ _ tendsto_const_nhds _,
      { exact ennreal.tendsto.pow (ennreal.tendsto_coe.2 nhds_within_le_nhds) },
      { simp only [one_pow, ennreal.coe_one, true_or, ne.def, not_false_iff, one_ne_zero] },
      { simp only [one_pow, ennreal.coe_one, ne.def, or_true, ennreal.one_ne_top,
                   not_false_iff] } },
    simp only [one_pow, one_mul, ennreal.coe_one] at this,
    refine ge_of_tendsto this _,
    filter_upwards [self_mem_nhds_within] with _ ht,
    exact v.with_density_le_mul hœÅ hs ht, },
  { have : tendsto (Œª (t : ‚Ñù‚â•0), (t : ‚Ñù‚â•0‚àû) * Œº.with_density (v.lim_ratio_meas hœÅ) s) (ùìù[>] 1)
            (ùìù ((1 : ‚Ñù‚â•0) * Œº.with_density (v.lim_ratio_meas hœÅ) s)),
    { refine ennreal.tendsto.mul_const (ennreal.tendsto_coe.2 nhds_within_le_nhds) _,
      simp only [ennreal.coe_one, true_or, ne.def, not_false_iff, one_ne_zero], },
    simp only [one_mul, ennreal.coe_one] at this,
    refine ge_of_tendsto this _,
    filter_upwards [self_mem_nhds_within] with _ ht,
    exact v.le_mul_with_density hœÅ hs ht }
end

/-- Weak version of the main theorem on differentiation of measures: given a Vitali family `v`
for a locally finite measure `Œº`, and another locally finite measure `œÅ`, then for `Œº`-almost
every `x` the ratio `œÅ a / Œº a` converges, when `a` shrinks to `x` along the Vitali family,
towards the Radon-Nikodym derivative of `œÅ` with respect to `Œº`.

This version assumes that `œÅ` is absolutely continuous with respect to `Œº`. The general version
without this superfluous assumption is `vitali_family.ae_tendsto_rn_deriv`.
-/
theorem ae_tendsto_rn_deriv_of_absolutely_continuous :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù (œÅ.rn_deriv Œº x)) :=
begin
  have A : (Œº.with_density (v.lim_ratio_meas hœÅ)).rn_deriv Œº =·µê[Œº] v.lim_ratio_meas hœÅ :=
    rn_deriv_with_density Œº (v.lim_ratio_meas_measurable hœÅ),
  rw v.with_density_lim_ratio_meas_eq hœÅ at A,
  filter_upwards [v.ae_tendsto_lim_ratio_meas hœÅ, A] with _ _ h'x,
  rwa h'x,
end

end absolutely_continuous

variable (œÅ)

/-- Main theorem on differentiation of measures: given a Vitali family `v` for a locally finite
measure `Œº`, and another locally finite measure `œÅ`, then for `Œº`-almost every `x` the
ratio `œÅ a / Œº a` converges, when `a` shrinks to `x` along the Vitali family, towards the
Radon-Nikodym derivative of `œÅ` with respect to `Œº`. -/
theorem ae_tendsto_rn_deriv :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, œÅ a / Œº a) (v.filter_at x) (ùìù (œÅ.rn_deriv Œº x)) :=
begin
  let t := Œº.with_density (œÅ.rn_deriv Œº),
  have eq_add : œÅ = œÅ.singular_part Œº + t := have_lebesgue_decomposition_add _ _,
  have A : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, œÅ.singular_part Œº a / Œº a) (v.filter_at x) (ùìù 0) :=
    v.ae_eventually_measure_zero_of_singular (mutually_singular_singular_part œÅ Œº),
  have B : ‚àÄ·µê x ‚àÇŒº, t.rn_deriv Œº x = œÅ.rn_deriv Œº x :=
    rn_deriv_with_density Œº (measurable_rn_deriv œÅ Œº),
  have C : ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, t a / Œº a) (v.filter_at x) (ùìù (t.rn_deriv Œº x)) :=
    v.ae_tendsto_rn_deriv_of_absolutely_continuous (with_density_absolutely_continuous _ _),
  filter_upwards [A, B, C] with _ Ax Bx Cx,
  convert Ax.add Cx,
  { ext1 a,
    conv_lhs { rw [eq_add] },
    simp only [pi.add_apply, coe_add, ennreal.add_div] },
  { simp only [Bx, zero_add] }
end

/-- Given a measurable set `s`, then `Œº (s ‚à© a) / Œº a` converges when `a` shrinks to a typical
point `x` along a Vitali family. The limit is `1` for `x ‚àà s` and `0` for `x ‚àâ s`. This shows that
almost every point of `s` is a Lebesgue density point for `s`. A version for non-measurable sets
holds, but it only gives the first conclusion, see `ae_tendsto_measure_inter_div`. -/
lemma ae_tendsto_measure_inter_div_of_measurable_set {s : set Œ±} (hs : measurable_set s) :
  ‚àÄ·µê x ‚àÇŒº, tendsto (Œª a, Œº (s ‚à© a) / Œº a) (v.filter_at x) (ùìù (s.indicator 1 x)) :=
begin
  haveI : is_locally_finite_measure (Œº.restrict s) :=
    is_locally_finite_measure_of_le restrict_le_self,
  filter_upwards [ae_tendsto_rn_deriv v (Œº.restrict s), rn_deriv_restrict Œº hs],
  assume x hx h'x,
  simpa only [h'x, restrict_apply' hs, inter_comm] using hx,
end

/-- Given an arbitrary set `s`, then `Œº (s ‚à© a) / Œº a` converges to `1` when `a` shrinks to a
typical point of `s` along a Vitali family. This shows that almost every point of `s` is a
Lebesgue density point for `s`. A stronger version for measurable sets is given
in `ae_tendsto_measure_inter_div_of_measurable_set`. -/
lemma ae_tendsto_measure_inter_div (s : set Œ±) :
  ‚àÄ·µê x ‚àÇ(Œº.restrict s), tendsto (Œª a, Œº (s ‚à© a) / Œº a) (v.filter_at x) (ùìù 1) :=
begin
  let t := to_measurable Œº s,
  have A : ‚àÄ·µê x ‚àÇ(Œº.restrict s),
    tendsto (Œª a, Œº (t ‚à© a) / Œº a) (v.filter_at x) (ùìù (t.indicator 1 x)),
  { apply ae_mono restrict_le_self,
    apply ae_tendsto_measure_inter_div_of_measurable_set,
    exact measurable_set_to_measurable _ _ },
  have B : ‚àÄ·µê x ‚àÇ(Œº.restrict s), t.indicator 1 x = (1 : ‚Ñù‚â•0‚àû),
  { refine ae_restrict_of_ae_restrict_of_subset (subset_to_measurable Œº s) _,
    filter_upwards [ae_restrict_mem (measurable_set_to_measurable Œº s)] with _ hx,
    simp only [hx, pi.one_apply, indicator_of_mem] },
  filter_upwards [A, B] with x hx h'x,
  rw [h'x] at hx,
  apply hx.congr' _,
  filter_upwards [v.eventually_filter_at_measurable_set x] with _ ha,
  congr' 1,
  exact measure_to_measurable_inter_of_sigma_finite ha _,
end

end

end vitali_family
