/-
Copyright (c) 2020 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import analysis.specific_limits

/-!
# The group of units of a complete normed ring

This file contains the basic theory for the group of units (invertible elements) of a complete
normed ring (Banach algebras being a notable special case).

## Main results

The constructions `one_sub`, `add` and `unit_of_nearby` state, in varying forms, that perturbations
of a unit are units.  The latter two are not stated in their optimal form; more precise versions
would use the spectral radius.

The first main result is `is_open`:  the group of units of a complete normed ring is an open subset
of the ring.

The function `inverse` (defined in `algebra.ring`), for a ring `R`, sends `a : R` to `a‚Åª¬π` if `a` is
a unit and 0 if not.  The other major results of this file (notably `inverse_add`,
`inverse_add_norm` and `inverse_add_norm_diff_nth_order`) cover the asymptotic properties of
`inverse (x + t)` as `t ‚Üí 0`.

-/

noncomputable theory
open_locale topological_space
variables {R : Type*} [normed_ring R] [complete_space R]

namespace units

/-- In a complete normed ring, a perturbation of `1` by an element `t` of distance less than `1`
from `1` is a unit.  Here we construct its `units` structure.  -/
@[simps coe]
def one_sub (t : R) (h : ‚à•t‚à• < 1) : RÀ£ :=
{ val := 1 - t,
  inv := ‚àë' n : ‚Ñï, t ^ n,
  val_inv := mul_neg_geom_series t h,
  inv_val := geom_series_mul_neg t h }

/-- In a complete normed ring, a perturbation of a unit `x` by an element `t` of distance less than
`‚à•x‚Åª¬π‚à•‚Åª¬π` from `x` is a unit.  Here we construct its `units` structure. -/
@[simps coe]
def add (x : RÀ£) (t : R) (h : ‚à•t‚à• < ‚à•(‚Üëx‚Åª¬π : R)‚à•‚Åª¬π) : RÀ£ :=
units.copy  -- to make `coe_add` true definitionally, for convenience
  (x * (units.one_sub (-(‚Üëx‚Åª¬π * t)) begin
      nontriviality R using [zero_lt_one],
      have hpos : 0 < ‚à•(‚Üëx‚Åª¬π : R)‚à• := units.norm_pos x‚Åª¬π,
      calc ‚à•-(‚Üëx‚Åª¬π * t)‚à•
          = ‚à•‚Üëx‚Åª¬π * t‚à•                    : by { rw norm_neg }
      ... ‚â§ ‚à•(‚Üëx‚Åª¬π : R)‚à• * ‚à•t‚à•            : norm_mul_le ‚Üëx‚Åª¬π _
      ... < ‚à•(‚Üëx‚Åª¬π : R)‚à• * ‚à•(‚Üëx‚Åª¬π : R)‚à•‚Åª¬π : by nlinarith only [h, hpos]
      ... = 1                             : mul_inv_cancel (ne_of_gt hpos)
    end))
  (x + t) (by simp [mul_add]) _ rfl

/-- In a complete normed ring, an element `y` of distance less than `‚à•x‚Åª¬π‚à•‚Åª¬π` from `x` is a unit.
Here we construct its `units` structure. -/
@[simps coe]
def unit_of_nearby (x : RÀ£) (y : R) (h : ‚à•y - x‚à• < ‚à•(‚Üëx‚Åª¬π : R)‚à•‚Åª¬π) : RÀ£ :=
units.copy (x.add (y - x : R) h) y (by simp) _ rfl

/-- The group of units of a complete normed ring is an open subset of the ring. -/
protected lemma is_open : is_open {x : R | is_unit x} :=
begin
  nontriviality R,
  apply metric.is_open_iff.mpr,
  rintros x' ‚ü®x, rfl‚ü©,
  refine ‚ü®‚à•(‚Üëx‚Åª¬π : R)‚à•‚Åª¬π, _root_.inv_pos.mpr (units.norm_pos x‚Åª¬π), _‚ü©,
  intros y hy,
  rw [metric.mem_ball, dist_eq_norm] at hy,
  exact (x.unit_of_nearby y hy).is_unit
end

protected lemma nhds (x : RÀ£) : {x : R | is_unit x} ‚àà ùìù (x : R) :=
is_open.mem_nhds units.is_open x.is_unit

end units

namespace normed_ring
open_locale classical big_operators
open asymptotics filter metric finset ring

lemma inverse_one_sub (t : R) (h : ‚à•t‚à• < 1) : inverse (1 - t) = ‚Üë(units.one_sub t h)‚Åª¬π :=
by rw [‚Üê inverse_unit (units.one_sub t h), units.coe_one_sub]

/-- The formula `inverse (x + t) = inverse (1 + x‚Åª¬π * t) * x‚Åª¬π` holds for `t` sufficiently small. -/
lemma inverse_add (x : RÀ£) :
  ‚àÄ·∂† t in (ùìù 0), inverse ((x : R) + t) = inverse (1 + ‚Üëx‚Åª¬π * t) * ‚Üëx‚Åª¬π :=
begin
  nontriviality R,
  rw [eventually_iff, metric.mem_nhds_iff],
  have hinv : 0 < ‚à•(‚Üëx‚Åª¬π : R)‚à•‚Åª¬π, by cancel_denoms,
  use [‚à•(‚Üëx‚Åª¬π : R)‚à•‚Åª¬π, hinv],
  intros t ht,
  simp only [mem_ball, dist_zero_right] at ht,
  have ht' : ‚à•-‚Üëx‚Åª¬π * t‚à• < 1,
  { refine lt_of_le_of_lt (norm_mul_le _ _) _,
    rw norm_neg,
    refine lt_of_lt_of_le (mul_lt_mul_of_pos_left ht x‚Åª¬π.norm_pos) _,
    cancel_denoms },
  have hright := inverse_one_sub (-‚Üëx‚Åª¬π * t) ht',
  have hleft := inverse_unit (x.add t ht),
  simp only [neg_mul, sub_neg_eq_add] at hright,
  simp only [units.coe_add] at hleft,
  simp [hleft, hright, units.add]
end

lemma inverse_one_sub_nth_order (n : ‚Ñï) :
  ‚àÄ·∂† t in (ùìù 0), inverse ((1:R) - t) = (‚àë i in range n, t ^ i) + (t ^ n) * inverse (1 - t) :=
begin
  simp only [eventually_iff, metric.mem_nhds_iff],
  use [1, by norm_num],
  intros t ht,
  simp only [mem_ball, dist_zero_right] at ht,
  simp only [inverse_one_sub t ht, set.mem_set_of_eq],
  have h : 1 = ((range n).sum (Œª i, t ^ i)) * (units.one_sub t ht) + t ^ n,
  { simp only [units.coe_one_sub],
    rw [‚Üê geom_sum, geom_sum_mul_neg],
    simp },
  rw [‚Üê one_mul ‚Üë(units.one_sub t ht)‚Åª¬π, h, add_mul],
  congr,
  { rw [mul_assoc, (units.one_sub t ht).mul_inv],
    simp },
  { simp only [units.coe_one_sub],
    rw [‚Üê add_mul, ‚Üê geom_sum, geom_sum_mul_neg],
    simp }
end

/-- The formula
`inverse (x + t) = (‚àë i in range n, (- x‚Åª¬π * t) ^ i) * x‚Åª¬π + (- x‚Åª¬π * t) ^ n * inverse (x + t)`
holds for `t` sufficiently small. -/
lemma inverse_add_nth_order (x : RÀ£) (n : ‚Ñï) :
  ‚àÄ·∂† t in (ùìù 0), inverse ((x : R) + t)
  = (‚àë i in range n, (- ‚Üëx‚Åª¬π * t) ^ i) * ‚Üëx‚Åª¬π + (- ‚Üëx‚Åª¬π * t) ^ n * inverse (x + t) :=
begin
  refine (inverse_add x).mp _,
  have hzero : tendsto (Œª (t : R), - ‚Üëx‚Åª¬π * t) (ùìù 0) (ùìù 0),
  { convert ((mul_left_continuous (- (‚Üëx‚Åª¬π : R))).tendsto 0).comp tendsto_id,
    simp },
  refine (hzero.eventually (inverse_one_sub_nth_order n)).mp (eventually_of_forall _),
  simp only [neg_mul, sub_neg_eq_add],
  intros t h1 h2,
  have h := congr_arg (Œª (a : R), a * ‚Üëx‚Åª¬π) h1,
  dsimp at h,
  convert h,
  rw [add_mul, mul_assoc],
  simp [h2.symm]
end

lemma inverse_one_sub_norm : is_O (Œª t, inverse ((1:R) - t)) (Œª t, (1:‚Ñù)) (ùìù (0:R)) :=
begin
  simp only [is_O, is_O_with, eventually_iff, metric.mem_nhds_iff],
  refine ‚ü®‚à•(1:R)‚à• + 1, (2:‚Ñù)‚Åª¬π, by norm_num, _‚ü©,
  intros t ht,
  simp only [ball, dist_zero_right, set.mem_set_of_eq] at ht,
  have ht' : ‚à•t‚à• < 1,
  { have : (2:‚Ñù)‚Åª¬π < 1 := by cancel_denoms,
    linarith },
  simp only [inverse_one_sub t ht', norm_one, mul_one, set.mem_set_of_eq],
  change ‚à•‚àë' n : ‚Ñï, t ^ n‚à• ‚â§ _,
  have := normed_ring.tsum_geometric_of_norm_lt_1 t ht',
  have : (1 - ‚à•t‚à•)‚Åª¬π ‚â§ 2,
  { rw ‚Üê inv_inv‚ÇÄ (2:‚Ñù),
    refine inv_le_inv_of_le (by norm_num) _,
    have : (2:‚Ñù)‚Åª¬π + (2:‚Ñù)‚Åª¬π = 1 := by ring,
    linarith },
  linarith
end

/-- The function `Œª t, inverse (x + t)` is O(1) as `t ‚Üí 0`. -/
lemma inverse_add_norm (x : RÀ£) : is_O (Œª t, inverse (‚Üëx + t)) (Œª t, (1:‚Ñù)) (ùìù (0:R)) :=
begin
  simp only [is_O_iff, norm_one, mul_one],
  cases is_O_iff.mp (@inverse_one_sub_norm R _ _) with C hC,
  use C * ‚à•((x‚Åª¬π:RÀ£):R)‚à•,
  have hzero : tendsto (Œª t, - (‚Üëx‚Åª¬π : R) * t) (ùìù 0) (ùìù 0),
  { convert ((mul_left_continuous (-‚Üëx‚Åª¬π : R)).tendsto 0).comp tendsto_id,
    simp },
  refine (inverse_add x).mp ((hzero.eventually hC).mp (eventually_of_forall _)),
  intros t bound iden,
  rw iden,
  simp at bound,
  have hmul := norm_mul_le (inverse (1 + ‚Üëx‚Åª¬π * t)) ‚Üëx‚Åª¬π,
  nlinarith [norm_nonneg (‚Üëx‚Åª¬π : R)]
end

/-- The function
`Œª t, inverse (x + t) - (‚àë i in range n, (- x‚Åª¬π * t) ^ i) * x‚Åª¬π`
is `O(t ^ n)` as `t ‚Üí 0`. -/
lemma inverse_add_norm_diff_nth_order (x : RÀ£) (n : ‚Ñï) :
  is_O (Œª (t : R), inverse (‚Üëx + t) - (‚àë i in range n, (- ‚Üëx‚Åª¬π * t) ^ i) * ‚Üëx‚Åª¬π)
  (Œª t, ‚à•t‚à• ^ n) (ùìù (0:R)) :=
begin
  by_cases h : n = 0,
  { simpa [h] using inverse_add_norm x },
  have hn : 0 < n := nat.pos_of_ne_zero h,
  simp [is_O_iff],
  cases (is_O_iff.mp (inverse_add_norm x)) with C hC,
  use C * ‚à•(1:‚Ñù)‚à• * ‚à•(‚Üëx‚Åª¬π : R)‚à• ^ n,
  have h : eventually_eq (ùìù (0:R))
    (Œª t, inverse (‚Üëx + t) - (‚àë i in range n, (- ‚Üëx‚Åª¬π * t) ^ i) * ‚Üëx‚Åª¬π)
    (Œª t, ((- ‚Üëx‚Åª¬π * t) ^ n) * inverse (x + t)),
  { refine (inverse_add_nth_order x n).mp (eventually_of_forall _),
    intros t ht,
    convert congr_arg (Œª a, a - (range n).sum (pow (-‚Üëx‚Åª¬π * t)) * ‚Üëx‚Åª¬π) ht,
    simp },
  refine h.mp (hC.mp (eventually_of_forall _)),
  intros t _ hLHS,
  simp only [neg_mul] at hLHS,
  rw hLHS,
  refine le_trans (norm_mul_le _ _ ) _,
  have h' : ‚à•(-(‚Üëx‚Åª¬π * t)) ^ n‚à• ‚â§ ‚à•(‚Üëx‚Åª¬π : R)‚à• ^ n * ‚à•t‚à• ^ n,
  { calc ‚à•(-(‚Üëx‚Åª¬π * t)) ^ n‚à• ‚â§ ‚à•(-(‚Üëx‚Åª¬π * t))‚à• ^ n : norm_pow_le' _ hn
    ... = ‚à•‚Üëx‚Åª¬π * t‚à• ^ n : by rw norm_neg
    ... ‚â§ (‚à•(‚Üëx‚Åª¬π : R)‚à• * ‚à•t‚à•) ^ n : _
    ... =  ‚à•(‚Üëx‚Åª¬π : R)‚à• ^ n * ‚à•t‚à• ^ n : mul_pow _ _ n,
    exact pow_le_pow_of_le_left (norm_nonneg _) (norm_mul_le ‚Üëx‚Åª¬π t) n },
  have h'' : 0 ‚â§ ‚à•(‚Üëx‚Åª¬π : R)‚à• ^ n * ‚à•t‚à• ^ n,
  { refine mul_nonneg _ _;
    exact pow_nonneg (norm_nonneg _) n },
  nlinarith [norm_nonneg (inverse (‚Üëx + t))],
end

/-- The function `Œª t, inverse (x + t) - x‚Åª¬π` is `O(t)` as `t ‚Üí 0`. -/
lemma inverse_add_norm_diff_first_order (x : RÀ£) :
  is_O (Œª t, inverse (‚Üëx + t) - ‚Üëx‚Åª¬π) (Œª t, ‚à•t‚à•) (ùìù (0:R)) :=
by simpa using inverse_add_norm_diff_nth_order x 1

/-- The function
`Œª t, inverse (x + t) - x‚Åª¬π + x‚Åª¬π * t * x‚Åª¬π`
is `O(t ^ 2)` as `t ‚Üí 0`. -/
lemma inverse_add_norm_diff_second_order (x : RÀ£) :
  is_O (Œª t, inverse (‚Üëx + t) - ‚Üëx‚Åª¬π + ‚Üëx‚Åª¬π * t * ‚Üëx‚Åª¬π) (Œª t, ‚à•t‚à• ^ 2) (ùìù (0:R)) :=
begin
  convert inverse_add_norm_diff_nth_order x 2,
  ext t,
  simp only [range_succ, range_one, sum_insert, mem_singleton, sum_singleton, not_false_iff,
    one_ne_zero, pow_zero, add_mul, pow_one, one_mul, neg_mul,
    sub_add_eq_sub_sub_swap, sub_neg_eq_add],
end

/-- The function `inverse` is continuous at each unit of `R`. -/
lemma inverse_continuous_at (x : RÀ£) : continuous_at inverse (x : R) :=
begin
  have h_is_o : is_o (Œª (t : R), inverse (‚Üëx + t) - ‚Üëx‚Åª¬π) (Œª _, 1 : R ‚Üí ‚Ñù) (ùìù 0),
    from ((inverse_add_norm_diff_first_order x).trans_is_o
      (is_o_id_const (@one_ne_zero ‚Ñù _ _)).norm_left),
  have h_lim : tendsto (Œª (y:R), y - x) (ùìù x) (ùìù 0),
  { refine tendsto_zero_iff_norm_tendsto_zero.mpr _,
    exact tendsto_iff_norm_tendsto_zero.mp tendsto_id },
  rw [continuous_at, tendsto_iff_norm_tendsto_zero, inverse_unit],
  simpa [(‚àò)] using h_is_o.norm_left.tendsto_div_nhds_zero.comp h_lim
end

end normed_ring

namespace units
open mul_opposite filter normed_ring

/-- In a normed ring, the coercion from `RÀ£` (equipped with the induced topology from the
embedding in `R √ó R`) to `R` is an open map. -/
lemma is_open_map_coe : is_open_map (coe : RÀ£ ‚Üí R) :=
begin
  rw is_open_map_iff_nhds_le,
  intros x s,
  rw [mem_map, mem_nhds_induced],
  rintros ‚ü®t, ht, hts‚ü©,
  obtain ‚ü®u, hu, v, hv, huvt‚ü© :
    ‚àÉ (u : set R), u ‚àà ùìù ‚Üëx ‚àß ‚àÉ (v : set R·µê·µí·µñ), v ‚àà ùìù (op ‚Üëx‚Åª¬π) ‚àß u √óÀ¢ v ‚äÜ t,
  { simpa [embed_product, mem_nhds_prod_iff] using ht },
  have : u ‚à© (op ‚àò ring.inverse) ‚Åª¬π' v ‚à© (set.range (coe : RÀ£ ‚Üí R)) ‚àà ùìù ‚Üëx,
  { refine inter_mem (inter_mem hu _) (units.nhds x),
    refine (continuous_op.continuous_at.comp (inverse_continuous_at x)).preimage_mem_nhds _,
    simpa using hv },
  refine mem_of_superset this _,
  rintros _ ‚ü®‚ü®huy, hvy‚ü©, ‚ü®y, rfl‚ü©‚ü©,
  have : embed_product R y ‚àà u √óÀ¢ v := ‚ü®huy, by simpa using hvy‚ü©,
  simpa using hts (huvt this)
end

/-- In a normed ring, the coercion from `RÀ£` (equipped with the induced topology from the
embedding in `R √ó R`) to `R` is an open embedding. -/
lemma open_embedding_coe : open_embedding (coe : RÀ£ ‚Üí R) :=
open_embedding_of_continuous_injective_open continuous_coe ext is_open_map_coe

end units
