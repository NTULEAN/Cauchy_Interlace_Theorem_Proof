/-
Copyright (c) 2021 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Riccardo Brasca
-/
import analysis.normed.group.hom
import category_theory.limits.shapes.zero

/-!
# The category of seminormed groups

We define `SemiNormedGroup`, the category of seminormed groups and normed group homs between them,
as well as `SemiNormedGroup‚ÇÅ`, the subcategory of norm non-increasing morphisms.
-/

noncomputable theory

universes u

open category_theory

/-- The category of seminormed abelian groups and bounded group homomorphisms. -/
def SemiNormedGroup : Type (u+1) := bundled semi_normed_group

namespace SemiNormedGroup

instance bundled_hom : bundled_hom @normed_group_hom :=
‚ü®@normed_group_hom.to_fun, @normed_group_hom.id, @normed_group_hom.comp, @normed_group_hom.coe_inj‚ü©

attribute [derive [large_category, concrete_category]] SemiNormedGroup

instance : has_coe_to_sort SemiNormedGroup (Type u) := bundled.has_coe_to_sort

/-- Construct a bundled `SemiNormedGroup` from the underlying type and typeclass. -/
def of (M : Type u) [semi_normed_group M] : SemiNormedGroup := bundled.of M

instance (M : SemiNormedGroup) : semi_normed_group M := M.str

@[simp] lemma coe_of (V : Type u) [semi_normed_group V] : (SemiNormedGroup.of V : Type u) = V := rfl
@[simp] lemma coe_id (V : SemiNormedGroup) : ‚áë(ùüô V) = id := rfl
@[simp] lemma coe_comp {M N K : SemiNormedGroup} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
  ((f ‚â´ g) : M ‚Üí K) = g ‚àò f := rfl

instance : has_zero SemiNormedGroup := ‚ü®of punit‚ü©
instance : inhabited SemiNormedGroup := ‚ü®0‚ü©

instance : limits.has_zero_morphisms.{u (u+1)} SemiNormedGroup := {}

@[simp] lemma zero_apply {V W : SemiNormedGroup} (x : V) : (0 : V ‚ü∂ W) x = 0 := rfl

instance has_zero_object : limits.has_zero_object SemiNormedGroup.{u} :=
{ zero := 0,
  unique_to := Œª X,
  { default := 0,
    uniq := Œª a, by { ext ‚ü®‚ü©, exact a.map_zero, }, },
  unique_from := Œª X,
  { default := 0,
    uniq := Œª f, by ext } }

lemma iso_isometry_of_norm_noninc {V W : SemiNormedGroup} (i : V ‚âÖ W)
  (h1 : i.hom.norm_noninc) (h2 : i.inv.norm_noninc) :
  isometry i.hom :=
begin
  apply normed_group_hom.isometry_of_norm,
  intro v,
  apply le_antisymm (h1 v),
  calc ‚à•v‚à• = ‚à•i.inv (i.hom v)‚à• : by rw [coe_hom_inv_id]
  ... ‚â§ ‚à•i.hom v‚à• : h2 _,
end

end SemiNormedGroup

/--
`SemiNormedGroup‚ÇÅ` is a type synonym for `SemiNormedGroup`,
which we shall equip with the category structure consisting only of the norm non-increasing maps.
-/
def SemiNormedGroup‚ÇÅ : Type (u+1) := bundled semi_normed_group

namespace SemiNormedGroup‚ÇÅ

instance : has_coe_to_sort SemiNormedGroup‚ÇÅ (Type u) := bundled.has_coe_to_sort

instance : large_category.{u} SemiNormedGroup‚ÇÅ :=
{ hom := Œª X Y, { f : normed_group_hom X Y // f.norm_noninc },
  id := Œª X, ‚ü®normed_group_hom.id X, normed_group_hom.norm_noninc.id‚ü©,
  comp := Œª X Y Z f g, ‚ü®(g : normed_group_hom Y Z).comp (f : normed_group_hom X Y), g.2.comp f.2‚ü©, }

@[ext] lemma hom_ext {M N : SemiNormedGroup‚ÇÅ} (f g : M ‚ü∂ N) (w : (f : M ‚Üí N) = (g : M ‚Üí N)) :
  f = g :=
subtype.eq (normed_group_hom.ext (congr_fun w))

instance : concrete_category.{u} SemiNormedGroup‚ÇÅ :=
{ forget :=
  { obj := Œª X, X,
    map := Œª X Y f, f, },
  forget_faithful := {} }

/-- Construct a bundled `SemiNormedGroup‚ÇÅ` from the underlying type and typeclass. -/
def of (M : Type u) [semi_normed_group M] : SemiNormedGroup‚ÇÅ := bundled.of M

instance (M : SemiNormedGroup‚ÇÅ) : semi_normed_group M := M.str

/-- Promote a morphism in `SemiNormedGroup` to a morphism in `SemiNormedGroup‚ÇÅ`. -/
def mk_hom {M N : SemiNormedGroup} (f : M ‚ü∂ N) (i : f.norm_noninc) :
  SemiNormedGroup‚ÇÅ.of M ‚ü∂ SemiNormedGroup‚ÇÅ.of N :=
‚ü®f, i‚ü©

@[simp] lemma mk_hom_apply {M N : SemiNormedGroup} (f : M ‚ü∂ N) (i : f.norm_noninc) (x) :
  mk_hom f i x = f x := rfl

/-- Promote an isomorphism in `SemiNormedGroup` to an isomorphism in `SemiNormedGroup‚ÇÅ`. -/
@[simps]
def mk_iso {M N : SemiNormedGroup} (f : M ‚âÖ N) (i : f.hom.norm_noninc) (i' : f.inv.norm_noninc) :
  SemiNormedGroup‚ÇÅ.of M ‚âÖ SemiNormedGroup‚ÇÅ.of N :=
{ hom := mk_hom f.hom i,
  inv := mk_hom f.inv i',
  hom_inv_id' := by { apply subtype.eq, exact f.hom_inv_id, },
  inv_hom_id' := by { apply subtype.eq, exact f.inv_hom_id, }, }

instance : has_forget‚ÇÇ SemiNormedGroup‚ÇÅ SemiNormedGroup :=
{ forget‚ÇÇ :=
  { obj := Œª X, X,
    map := Œª X Y f, f.1, }, }

@[simp] lemma coe_of (V : Type u) [semi_normed_group V] : (SemiNormedGroup‚ÇÅ.of V : Type u) = V :=
rfl
@[simp] lemma coe_id (V : SemiNormedGroup‚ÇÅ) : ‚áë(ùüô V) = id := rfl
@[simp] lemma coe_comp {M N K : SemiNormedGroup‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
  ((f ‚â´ g) : M ‚Üí K) = g ‚àò f := rfl
-- If `coe_fn_coe_base` fires before `coe_comp`, `coe_comp'` puts us back in normal form.
@[simp] lemma coe_comp' {M N K : SemiNormedGroup‚ÇÅ} (f : M ‚ü∂ N) (g : N ‚ü∂ K) :
  ((f ‚â´ g) : normed_group_hom M K) = (‚Üëg : normed_group_hom N K).comp ‚Üëf := rfl

instance : has_zero SemiNormedGroup‚ÇÅ := ‚ü®of punit‚ü©
instance : inhabited SemiNormedGroup‚ÇÅ := ‚ü®0‚ü©

instance : limits.has_zero_morphisms.{u (u+1)} SemiNormedGroup‚ÇÅ :=
{ has_zero := Œª X Y, { zero := ‚ü®0, normed_group_hom.norm_noninc.zero‚ü©, },
  comp_zero' := Œª X Y f Z, by { ext, refl, },
  zero_comp' := Œª X Y Z f, by { ext, simp [coe_fn_coe_base'] } }

@[simp] lemma zero_apply {V W : SemiNormedGroup‚ÇÅ} (x : V) : (0 : V ‚ü∂ W) x = 0 := rfl

instance has_zero_object : limits.has_zero_object SemiNormedGroup‚ÇÅ.{u} :=
{ zero := 0,
  unique_to := Œª X,
  { default := 0,
    uniq := Œª a, by { ext ‚ü®‚ü©, exact a.1.map_zero, }, },
  unique_from := Œª X,
  { default := 0,
    uniq := Œª f, by ext } }

lemma iso_isometry {V W : SemiNormedGroup‚ÇÅ} (i : V ‚âÖ W) :
  isometry i.hom :=
begin
  apply normed_group_hom.isometry_of_norm,
  intro v,
  apply le_antisymm (i.hom.2 v),
  calc ‚à•v‚à• = ‚à•i.inv (i.hom v)‚à• : by rw [coe_hom_inv_id]
      ... ‚â§ ‚à•i.hom v‚à• : i.inv.2 _,
end

end SemiNormedGroup‚ÇÅ
