/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import analysis.box_integral.box.basic
import analysis.specific_limits

/-!
# Induction on subboxes

In this file we prove the following induction principle for `box_integral.box`, see
`box_integral.box.subbox_induction_on`. Let `p` be a predicate on `box_integral.box Œπ`, let `I` be a
box. Suppose that the following two properties hold true.

* Consider a smaller box `J ‚â§ I`. The hyperplanes passing through the center of `J` split it into
  `2 ^ n` boxes. If `p` holds true on each of these boxes, then it is true on `J`.
* For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within `I.Icc` such
  that for every box `J ‚â§ I` such that `z ‚àà J.Icc ‚äÜ U`, if `J` is homothetic to `I` with a
  coefficient of the form `1 / 2 ^ m`, then `p` is true on `J`.

Then `p I` is true.

## Tags

rectangular box, induction
-/

open set finset function filter metric
open_locale classical topological_space filter ennreal
noncomputable theory

namespace box_integral

namespace box

variables {Œπ : Type*} {I J : box Œπ}

/-- For a box `I`, the hyperplanes passing through its center split `I` into `2 ^ card Œπ` boxes.
`box_integral.box.split_center_box I s` is one of these boxes. See also
`box_integral.partition.split_center` for the corresponding `box_integral.partition`. -/
def split_center_box (I : box Œπ) (s : set Œπ) : box Œπ :=
{ lower := s.piecewise (Œª i, (I.lower i + I.upper i) / 2) I.lower,
  upper := s.piecewise I.upper (Œª i, (I.lower i + I.upper i) / 2),
  lower_lt_upper := Œª i, by { dunfold set.piecewise, split_ifs;
    simp only [left_lt_add_div_two, add_div_two_lt_right, I.lower_lt_upper] } }

lemma mem_split_center_box {s : set Œπ} {y : Œπ ‚Üí ‚Ñù} :
  y ‚àà I.split_center_box s ‚Üî y ‚àà I ‚àß ‚àÄ i, (I.lower i + I.upper i) / 2 < y i ‚Üî i ‚àà s :=
begin
  simp only [split_center_box, mem_def, ‚Üê forall_and_distrib],
  refine forall_congr (Œª i, _),
  dunfold set.piecewise,
  split_ifs with hs; simp only [hs, iff_true, iff_false, not_lt],
  exacts [‚ü®Œª H, ‚ü®‚ü®(left_lt_add_div_two.2 (I.lower_lt_upper i)).trans H.1, H.2‚ü©, H.1‚ü©,
    Œª H, ‚ü®H.2, H.1.2‚ü©‚ü©,
    ‚ü®Œª H, ‚ü®‚ü®H.1, H.2.trans (add_div_two_lt_right.2 (I.lower_lt_upper i)).le‚ü©, H.2‚ü©,
      Œª H, ‚ü®H.1.1, H.2‚ü©‚ü©]
end

lemma split_center_box_le (I : box Œπ) (s : set Œπ) : I.split_center_box s ‚â§ I :=
Œª x hx, (mem_split_center_box.1 hx).1

lemma disjoint_split_center_box (I : box Œπ) {s t : set Œπ} (h : s ‚â† t) :
  disjoint (I.split_center_box s : set (Œπ ‚Üí ‚Ñù)) (I.split_center_box t) :=
begin
  rintro y ‚ü®hs, ht‚ü©, apply h,
  ext i,
  rw [mem_coe, mem_split_center_box] at hs ht,
  rw [‚Üê hs.2, ‚Üê ht.2]
end

lemma injective_split_center_box (I : box Œπ) : injective I.split_center_box :=
Œª s t H, by_contra $ Œª Hne, (I.disjoint_split_center_box Hne).ne (nonempty_coe _).ne_empty (H ‚ñ∏ rfl)

@[simp] lemma exists_mem_split_center_box {I : box Œπ} {x : Œπ ‚Üí ‚Ñù} :
  (‚àÉ s, x ‚àà I.split_center_box s) ‚Üî x ‚àà I :=
‚ü®Œª ‚ü®s, hs‚ü©, I.split_center_box_le s hs,
  Œª hx, ‚ü®{i | (I.lower i + I.upper i) / 2 < x i}, mem_split_center_box.2 ‚ü®hx, Œª i, iff.rfl‚ü©‚ü©‚ü©

/-- `box_integral.box.split_center_box` bundled as a `function.embedding`. -/
@[simps] def split_center_box_emb (I : box Œπ) : set Œπ ‚Ü™ box Œπ :=
‚ü®split_center_box I, injective_split_center_box I‚ü©

@[simp] lemma Union_coe_split_center_box (I : box Œπ) :
  (‚ãÉ s, (I.split_center_box s : set (Œπ ‚Üí ‚Ñù))) = I :=
by { ext x, simp }

@[simp] lemma upper_sub_lower_split_center_box (I : box Œπ) (s : set Œπ) (i : Œπ) :
  (I.split_center_box s).upper i - (I.split_center_box s).lower i = (I.upper i - I.lower i) / 2 :=
by by_cases hs : i ‚àà s; field_simp [split_center_box, hs, mul_two, two_mul]

/-- Let `p` be a predicate on `box Œπ`, let `I` be a box. Suppose that the following two properties
hold true.

* `H_ind` : Consider a smaller box `J ‚â§ I`. The hyperplanes passing through the center of `J` split
  it into `2 ^ n` boxes. If `p` holds true on each of these boxes, then it true on `J`.

* `H_nhds` : For each `z` in the closed box `I.Icc` there exists a neighborhood `U` of `z` within
  `I.Icc` such that for every box `J ‚â§ I` such that `z ‚àà J.Icc ‚äÜ U`, if `J` is homothetic to `I`
  with a coefficient of the form `1 / 2 ^ m`, then `p` is true on `J`.

Then `p I` is true. See also `box_integral.box.subbox_induction_on` for a version using
`box_integral.prepartition.split_center` instead of `box_integral.box.split_center_box`.

The proof still works if we assume `H_ind` only for subboxes `J ‚â§ I` that are homothetic to `I` with
a coefficient of the form `2‚Åª·µê` but we do not need this generalization yet. -/
@[elab_as_eliminator]
lemma subbox_induction_on' {p : box Œπ ‚Üí Prop} (I : box Œπ)
  (H_ind : ‚àÄ J ‚â§ I, (‚àÄ s, p (split_center_box J s)) ‚Üí p J)
  (H_nhds : ‚àÄ z ‚àà I.Icc, ‚àÉ (U ‚àà ùìù[I.Icc] z), ‚àÄ (J ‚â§ I) (m : ‚Ñï), z ‚àà J.Icc ‚Üí J.Icc ‚äÜ U ‚Üí
    (‚àÄ i, J.upper i - J.lower i = (I.upper i - I.lower i) / 2 ^ m) ‚Üí p J) :
  p I :=
begin
  by_contra hpI,
  -- First we use `H_ind` to construct a decreasing sequence of boxes such that `‚àÄ m, ¬¨p (J m)`.
  replace H_ind := Œª J hJ, not_imp_not.2 (H_ind J hJ),
  simp only [exists_imp_distrib, not_forall] at H_ind,
  choose! s hs using H_ind,
  set J : ‚Ñï ‚Üí box Œπ := Œª m, (Œª J, split_center_box J (s J))^[m] I,
  have J_succ : ‚àÄ m, J (m + 1) = split_center_box (J m) (s $ J m) := Œª m, iterate_succ_apply' _ _ _,
  -- Now we prove some properties of `J`
  have hJmono : antitone J,
    from antitone_nat_of_succ_le (Œª n, by simpa [J_succ] using split_center_box_le _ _),
  have hJle : ‚àÄ m, J m ‚â§ I, from Œª m, hJmono (zero_le m),
  have hJp : ‚àÄ m, ¬¨p (J m),
    from Œª m, nat.rec_on m hpI (Œª m, by simpa only [J_succ] using hs (J m) (hJle m)),
  have hJsub : ‚àÄ m i, (J m).upper i - (J m).lower i = (I.upper i - I.lower i) / 2 ^ m,
  { intros m i, induction m with m ihm, { simp [J] },
    simp only [pow_succ', J_succ, upper_sub_lower_split_center_box, ihm, div_div_eq_div_mul] },
  have h0 : J 0 = I, from rfl,
  -- Now we clear unneeded assumptions
  clear_value J, clear hpI hs J_succ s,
  -- Let `z` be the unique common point of all `(J m).Icc`. Then `H_nhds` proves `p (J m)` for
  -- sufficiently large `m`. This contradicts `hJp`.
  set z : Œπ ‚Üí ‚Ñù := ‚®Ü m, (J m).lower,
  have hzJ : ‚àÄ m, z ‚àà (J m).Icc,
    from mem_Inter.1 (csupr_mem_Inter_Icc_of_antitone_Icc
      ((@box.Icc Œπ).monotone.comp_antitone hJmono) (Œª m, (J m).lower_le_upper)),
  have hJl_mem : ‚àÄ m, (J m).lower ‚àà I.Icc, from Œª m, le_iff_Icc.1 (hJle m) (J m).lower_mem_Icc,
  have hJu_mem : ‚àÄ m, (J m).upper ‚àà I.Icc, from Œª m, le_iff_Icc.1 (hJle m) (J m).upper_mem_Icc,
  have hJlz : tendsto (Œª m, (J m).lower) at_top (ùìù z),
    from tendsto_at_top_csupr (antitone_lower.comp hJmono)
      ‚ü®I.upper, Œª x ‚ü®m, hm‚ü©, hm ‚ñ∏ (hJl_mem m).2‚ü©,
  have hJuz : tendsto (Œª m, (J m).upper) at_top (ùìù z),
  { suffices : tendsto (Œª m, (J m).upper - (J m).lower) at_top (ùìù 0), by simpa using hJlz.add this,
    refine tendsto_pi_nhds.2 (Œª i, _),
    simpa [hJsub] using tendsto_const_nhds.div_at_top
      (tendsto_pow_at_top_at_top_of_one_lt (@one_lt_two ‚Ñù _ _)) },
  replace hJlz : tendsto (Œª m, (J m).lower) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ hJlz
      (eventually_of_forall hJl_mem),
  replace hJuz : tendsto (Œª m, (J m).upper) at_top (ùìù[Icc I.lower I.upper] z),
    from tendsto_nhds_within_of_tendsto_nhds_of_eventually_within _ hJuz
      (eventually_of_forall hJu_mem),
  rcases H_nhds z (h0 ‚ñ∏ hzJ 0) with ‚ü®U, hUz, hU‚ü©,
  rcases (tendsto_lift'.1 (hJlz.Icc hJuz) U hUz).exists with ‚ü®m, hUm‚ü©,
  exact hJp m (hU (J m) (hJle m) m (hzJ m) hUm (hJsub m))
end

end box

end box_integral
