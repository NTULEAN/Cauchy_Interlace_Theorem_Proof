/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.whiskering
import category_theory.fully_faithful
import category_theory.natural_isomorphism
import data.sigma.basic

/-!
# Disjoint union of categories

We define the category structure on a sigma-type (disjoint union) of categories.
-/

namespace category_theory
namespace sigma

universes w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables {I : Type w‚ÇÅ} {C : I ‚Üí Type u‚ÇÅ} [Œ† i, category.{v‚ÇÅ} (C i)]

/--
The type of morphisms of a disjoint union of categories: for `X : C i` and `Y : C j`, a morphism
`(i, X) ‚ü∂ (j, Y)` if `i = j` is just a morphism `X ‚ü∂ Y`, and if `i ‚â† j` there are no such morphisms.
-/
inductive sigma_hom : (Œ£ i, C i) ‚Üí (Œ£ i, C i) ‚Üí Type (max w‚ÇÅ v‚ÇÅ u‚ÇÅ)
| mk : Œ† {i : I} {X Y : C i}, (X ‚ü∂ Y) ‚Üí sigma_hom ‚ü®i, X‚ü© ‚ü®i, Y‚ü©

namespace sigma_hom

/-- The identity morphism on an object. -/
def id : Œ† (X : Œ£ i, C i), sigma_hom X X
| ‚ü®i, X‚ü© := mk (ùüô _)

instance (X : Œ£ i, C i) : inhabited (sigma_hom X X) := ‚ü®id X‚ü©

/-- Composition of sigma homomorphisms. -/
def comp : Œ† {X Y Z : Œ£ i, C i}, sigma_hom X Y ‚Üí sigma_hom Y Z ‚Üí sigma_hom X Z
| _ _ _ (mk f) (mk g) := mk (f ‚â´ g)

instance : category_struct (Œ£ i, C i) :=
{ hom := sigma_hom,
  id := id,
  comp := Œª X Y Z f g, comp f g }

@[simp]
lemma comp_def (i : I) (X Y Z : C i) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  comp (mk f) (mk g) = mk (f ‚â´ g) :=
rfl

lemma assoc : ‚àÄ (X Y Z W : Œ£ i, C i) (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ W), (f ‚â´ g) ‚â´ h = f ‚â´ g ‚â´ h
| _ _ _ _ (mk f) (mk g) (mk h) := congr_arg mk (category.assoc _ _ _)

lemma id_comp : ‚àÄ (X Y : Œ£ i, C i) (f : X ‚ü∂ Y), ùüô X ‚â´ f = f
| _ _ (mk f) := congr_arg mk (category.id_comp _)

lemma comp_id : ‚àÄ (X Y : Œ£ i, C i) (f : X ‚ü∂ Y), f ‚â´ ùüô Y = f
| _ _ (mk f) := congr_arg mk (category.comp_id _)

end sigma_hom

instance sigma : category (Œ£ i, C i) :=
{ id_comp' := sigma_hom.id_comp,
  comp_id' := sigma_hom.comp_id,
  assoc' := sigma_hom.assoc }

/-- The inclusion functor into the disjoint union of categories. -/
@[simps map]
def incl (i : I) : C i ‚•§ Œ£ i, C i :=
{ obj := Œª X, ‚ü®i, X‚ü©,
  map := Œª X Y, sigma_hom.mk }

@[simp] lemma incl_obj {i : I} (X : C i) : (incl i).obj X = ‚ü®i, X‚ü© := rfl

instance (i : I) : full (incl i : C i ‚•§ Œ£ i, C i) :=
{ preimage := Œª X Y ‚ü®f‚ü©, f,
  witness' := Œª X Y ‚ü®f‚ü©, rfl }.

instance (i : I) : faithful (incl i : C i ‚•§ Œ£ i, C i) := {}.

section
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D] (F : Œ† i, C i ‚•§ D)

/--
To build a natural transformation over the sigma category, it suffices to specify it restricted to
each subcategory.
-/
def nat_trans {F G : (Œ£ i, C i) ‚•§ D} (h : Œ† (i : I), incl i ‚ãô F ‚ü∂ incl i ‚ãô G) : F ‚ü∂ G :=
{ app := Œª ‚ü®j, X‚ü©, (h j).app X,
  naturality' := by { rintro ‚ü®j, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©, apply (h j).naturality } }

@[simp]
lemma nat_trans_app {F G : (Œ£ i, C i) ‚•§ D} (h : Œ† (i : I), incl i ‚ãô F ‚ü∂ incl i ‚ãô G)
  (i : I) (X : C i) :
  (nat_trans h).app ‚ü®i, X‚ü© = (h i).app X :=
rfl

/-- (Implementation). An auxiliary definition to build the functor `desc`. -/
def desc_map : ‚àÄ (X Y : Œ£ i, C i), (X ‚ü∂ Y) ‚Üí ((F X.1).obj X.2 ‚ü∂ (F Y.1).obj Y.2)
| _ _ (sigma_hom.mk g) := (F _).map g

/--
Given a collection of functors `F i : C i ‚•§ D`, we can produce a functor `(Œ£ i, C i) ‚•§ D`.

The produced functor `desc F` satisfies: `incl i ‚ãô desc F ‚âÖ F i`, i.e. restricted to just the
subcategory `C i`, `desc F` agrees with `F i`, and it is unique (up to natural isomorphism) with
this property.

This witnesses that the sigma-type is the coproduct in Cat.
-/
@[simps obj]
def desc : (Œ£ i, C i) ‚•§ D :=
{ obj := Œª X, (F X.1).obj X.2,
  map := Œª X Y g, desc_map F X Y g,
  map_id' := by { rintro ‚ü®i, X‚ü©, apply (F i).map_id },
  map_comp' := by { rintro ‚ü®i, X‚ü© ‚ü®_, Y‚ü© ‚ü®_, Z‚ü© ‚ü®i, _, Y, f‚ü© ‚ü®_, _, Z, g‚ü©, apply (F i).map_comp } }

@[simp]
lemma desc_map_mk {i : I} (X Y : C i) (f : X ‚ü∂ Y) :
  (desc F).map (sigma_hom.mk f) = (F i).map f :=
rfl

/--
This shows that when `desc F` is restricted to just the subcategory `C i`, `desc F` agrees with
`F i`.
-/
-- We hand-generate the simp lemmas about this since they come out cleaner.
def incl_desc (i : I) : incl i ‚ãô desc F ‚âÖ F i :=
nat_iso.of_components (Œª X, iso.refl _) (by tidy)

@[simp]
lemma incl_desc_hom_app (i : I) (X : C i) :
  (incl_desc F i).hom.app X = ùüô ((F i).obj X) :=
rfl

@[simp]
lemma incl_desc_inv_app (i : I) (X : C i) :
  (incl_desc F i).inv.app X = ùüô ((F i).obj X) :=
rfl

/--
If `q` when restricted to each subcategory `C i` agrees with `F i`, then `q` is isomorphic to
`desc F`.
-/
def desc_uniq (q : (Œ£ i, C i) ‚•§ D) (h : Œ† i, incl i ‚ãô q ‚âÖ F i) : q ‚âÖ desc F :=
nat_iso.of_components (Œª ‚ü®i, X‚ü©, (h i).app X) $
  by { rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©, apply (h i).hom.naturality f }

@[simp]
lemma desc_uniq_hom_app (q : (Œ£ i, C i) ‚•§ D) (h : Œ† i, incl i ‚ãô q ‚âÖ F i) (i : I) (X : C i) :
  (desc_uniq F q h).hom.app ‚ü®i, X‚ü© = (h i).hom.app X :=
rfl

@[simp]
lemma desc_uniq_inv_app (q : (Œ£ i, C i) ‚•§ D) (h : Œ† i, incl i ‚ãô q ‚âÖ F i) (i : I) (X : C i) :
  (desc_uniq F q h).inv.app ‚ü®i, X‚ü© = (h i).inv.app X :=
rfl

/--
If `q‚ÇÅ` and `q‚ÇÇ` when restricted to each subcategory `C i` agree, then `q‚ÇÅ` and `q‚ÇÇ` are isomorphic.
-/
@[simps]
def nat_iso {q‚ÇÅ q‚ÇÇ : (Œ£ i, C i) ‚•§ D} (h : Œ† i, incl i ‚ãô q‚ÇÅ ‚âÖ incl i ‚ãô q‚ÇÇ) :
  q‚ÇÅ ‚âÖ q‚ÇÇ :=
{ hom := nat_trans (Œª i, (h i).hom),
  inv := nat_trans (Œª i, (h i).inv) }

end

section

variables (C) {J : Type w‚ÇÇ} (g : J ‚Üí I)

/-- A function `J ‚Üí I` induces a functor `Œ£ j, C (g j) ‚•§ Œ£ i, C i`. -/
def map : (Œ£ (j : J), C (g j)) ‚•§ (Œ£ (i : I), C i) :=
desc (Œª j, incl (g j))

@[simp] lemma map_obj (j : J) (X : C (g j)) : (sigma.map C g).obj ‚ü®j, X‚ü© = ‚ü®g j, X‚ü© := rfl
@[simp] lemma map_map {j : J} {X Y : C (g j)} (f : X ‚ü∂ Y) :
  (sigma.map C g).map (sigma_hom.mk f) = sigma_hom.mk f :=
rfl

/--
The functor `sigma.map C g` restricted to the subcategory `C j` acts as the inclusion of `g j`.
-/
@[simps]
def incl_comp_map (j : J) : incl j ‚ãô map C g ‚âÖ incl (g j) := iso.refl _

variable (I)

/-- The functor `sigma.map` applied to the identity function is just the identity functor. -/
@[simps]
def map_id : map C (id : I ‚Üí I) ‚âÖ ùü≠ (Œ£ i, C i) :=
nat_iso (Œª i, nat_iso.of_components (Œª X, iso.refl _) (by tidy))

variables {I} {K : Type w‚ÇÉ}

/-- The functor `sigma.map` applied to a composition is a composition of functors. -/
@[simps]
def map_comp (f : K ‚Üí J) (g : J ‚Üí I) : map (C ‚àò g) f ‚ãô (map C g : _) ‚âÖ map C (g ‚àò f) :=
desc_uniq _ _ $ Œª k,
  (iso_whisker_right (incl_comp_map (C ‚àò g) f k) (map C g : _) : _) ‚â™‚â´ incl_comp_map _ _ _

end

namespace functor

variables {C}
variables {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, category.{v‚ÇÅ} (D i)]

/--
Assemble an `I`-indexed family of functors into a functor between the sigma types.
-/
def sigma (F : Œ† i, C i ‚•§ D i) : (Œ£ i, C i) ‚•§ (Œ£ i, D i) :=
desc (Œª i, F i ‚ãô incl i)

end functor

namespace nat_trans

variables {C}
variables {D : I ‚Üí Type u‚ÇÅ} [‚àÄ i, category.{v‚ÇÅ} (D i)]
variables {F G : Œ† i, C i ‚•§ D i}

/--
Assemble an `I`-indexed family of natural transformations into a single natural transformation.
-/
def sigma (Œ± : Œ† i, F i ‚ü∂ G i) : functor.sigma F ‚ü∂ functor.sigma G :=
{ app := Œª f, sigma_hom.mk ((Œ± f.1).app _),
  naturality' :=
  begin
    rintro ‚ü®i, X‚ü© ‚ü®_, _‚ü© ‚ü®_, _, Y, f‚ü©,
    change sigma_hom.mk _ = sigma_hom.mk _,
    rw (Œ± i).naturality,
  end }

end nat_trans

end sigma
end category_theory
