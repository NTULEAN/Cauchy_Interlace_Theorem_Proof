/-
Copyright (c) 2020 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison
-/
import category_theory.shift

/-!
# Differential objects in a category.

A differential object in a category with zero morphisms and a shift is
an object `X` equipped with
a morphism `d : X ‚ü∂ X‚ü¶1‚üß`, such that `d^2 = 0`.

We build the category of differential objects, and some basic constructions
such as the forgetful functor, zero morphisms and zero objects, and the shift functor
on differential objects.
-/

open category_theory.limits

universes v u

namespace category_theory

variables (C : Type u) [category.{v} C]

-- TODO: generaize to `has_shift C A` for an arbitrary `[add_monoid A]` `[has_one A]`.
variables [has_zero_morphisms C] [has_shift C ‚Ñ§]

/--
A differential object in a category with zero morphisms and a shift is
an object `X` equipped with
a morphism `d : X ‚ü∂ X‚ü¶1‚üß`, such that `d^2 = 0`.
-/
@[nolint has_inhabited_instance]
structure differential_object :=
(X : C)
(d : X ‚ü∂ X‚ü¶1‚üß)
(d_squared' : d ‚â´ d‚ü¶(1:‚Ñ§)‚üß' = 0 . obviously)

restate_axiom differential_object.d_squared'
attribute [simp] differential_object.d_squared

variables {C}

namespace differential_object

/--
A morphism of differential objects is a morphism commuting with the differentials.
-/
@[ext, nolint has_inhabited_instance]
structure hom (X Y : differential_object C) :=
(f : X.X ‚ü∂ Y.X)
(comm' : X.d ‚â´ f‚ü¶1‚üß' = f ‚â´ Y.d . obviously)

restate_axiom hom.comm'
attribute [simp, reassoc] hom.comm

namespace hom

/-- The identity morphism of a differential object. -/
@[simps]
def id (X : differential_object C) : hom X X :=
{ f := ùüô X.X }

/-- The composition of morphisms of differential objects. -/
@[simps]
def comp {X Y Z : differential_object C} (f : hom X Y) (g : hom Y Z) : hom X Z :=
{ f := f.f ‚â´ g.f, }

end hom

instance category_of_differential_objects : category (differential_object C) :=
{ hom := hom,
  id := hom.id,
  comp := Œª X Y Z f g, hom.comp f g, }

@[simp]
lemma id_f (X : differential_object C) : ((ùüô X) : X ‚ü∂ X).f = ùüô (X.X) := rfl

@[simp]
lemma comp_f {X Y Z : differential_object C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
  (f ‚â´ g).f = f.f ‚â´ g.f :=
rfl

@[simp]
lemma eq_to_hom_f {X Y : differential_object C} (h : X = Y) :
  hom.f (eq_to_hom h) = eq_to_hom (congr_arg _ h) :=
by { subst h, rw [eq_to_hom_refl, eq_to_hom_refl], refl }

variables (C)

/-- The forgetful functor taking a differential object to its underlying object. -/
def forget : (differential_object C) ‚•§ C :=
{ obj := Œª X, X.X,
  map := Œª X Y f, f.f, }

instance forget_faithful : faithful (forget C) :=
{ }

instance has_zero_morphisms : has_zero_morphisms (differential_object C) :=
{ has_zero := Œª X Y,
  ‚ü®{ f := 0 }‚ü©}

variables {C}

@[simp]
lemma zero_f (P Q : differential_object C) : (0 : P ‚ü∂ Q).f = 0 := rfl

/--
An isomorphism of differential objects gives an isomorphism of the underlying objects.
-/
@[simps] def iso_app {X Y : differential_object C} (f : X ‚âÖ Y) : X.X ‚âÖ Y.X :=
‚ü®f.hom.f, f.inv.f, by { dsimp, rw [‚Üê comp_f, iso.hom_inv_id, id_f] },
  by { dsimp, rw [‚Üê comp_f, iso.inv_hom_id, id_f] }‚ü©

@[simp] lemma iso_app_refl (X : differential_object C) : iso_app (iso.refl X) = iso.refl X.X := rfl
@[simp] lemma iso_app_symm {X Y : differential_object C} (f : X ‚âÖ Y) :
  iso_app f.symm = (iso_app f).symm := rfl
@[simp] lemma iso_app_trans {X Y Z : differential_object C} (f : X ‚âÖ Y) (g : Y ‚âÖ Z) :
  iso_app (f ‚â™‚â´ g) = iso_app f ‚â™‚â´ iso_app g := rfl

/-- An isomorphism of differential objects can be constructed
from an isomorphism of the underlying objects that commutes with the differentials. -/
@[simps] def mk_iso {X Y : differential_object C}
  (f : X.X ‚âÖ Y.X) (hf : X.d ‚â´ f.hom‚ü¶1‚üß' = f.hom ‚â´ Y.d) : X ‚âÖ Y :=
{ hom := ‚ü®f.hom, hf‚ü©,
  inv := ‚ü®f.inv, by { dsimp, rw [‚Üê functor.map_iso_inv, iso.comp_inv_eq, category.assoc,
    iso.eq_inv_comp, functor.map_iso_hom, hf] }‚ü©,
  hom_inv_id' := by { ext1, dsimp, exact f.hom_inv_id },
  inv_hom_id' := by { ext1, dsimp, exact f.inv_hom_id } }

end differential_object

namespace functor

universes v' u'
variables (D : Type u') [category.{v'} D]
variables [has_zero_morphisms D] [has_shift D ‚Ñ§]

/--
A functor `F : C ‚•§ D` which commutes with shift functors on `C` and `D` and preserves zero morphisms
can be lifted to a functor `differential_object C ‚•§ differential_object D`.
-/
@[simps]
def map_differential_object (F : C ‚•§ D)
  (Œ∑ : (shift_functor C (1:‚Ñ§)).comp F ‚ü∂ F.comp (shift_functor D (1:‚Ñ§)))
  (hF : ‚àÄ c c', F.map (0 : c ‚ü∂ c') = 0) :
  differential_object C ‚•§ differential_object D :=
{ obj := Œª X, { X := F.obj X.X,
    d := F.map X.d ‚â´ Œ∑.app X.X,
    d_squared' := begin
      rw [functor.map_comp, ‚Üê functor.comp_map F (shift_functor D (1:‚Ñ§))],
      slice_lhs 2 3 { rw [‚Üê Œ∑.naturality X.d] },
      rw [functor.comp_map],
      slice_lhs 1 2 { rw [‚Üê F.map_comp, X.d_squared, hF] },
      rw [zero_comp, zero_comp],
    end },
  map := Œª X Y f, { f := F.map f.f,
    comm' := begin
      dsimp,
      slice_lhs 2 3 { rw [‚Üê functor.comp_map F (shift_functor D (1:‚Ñ§)), ‚Üê Œ∑.naturality f.f] },
      slice_lhs 1 2 { rw [functor.comp_map, ‚Üê F.map_comp, f.comm, F.map_comp] },
      rw [category.assoc]
    end },
  map_id' := by { intros, ext, simp },
  map_comp' := by { intros, ext, simp }, }

end functor

end category_theory

namespace category_theory

namespace differential_object

variables (C : Type u) [category.{v} C]

variables [has_zero_object C] [has_zero_morphisms C] [has_shift C ‚Ñ§]

open_locale zero_object

instance has_zero_object : has_zero_object (differential_object C) :=
{ zero :=
  { X := (0 : C),
    d := 0, },
  unique_to := Œª X, ‚ü®‚ü®{ f := 0 }‚ü©, Œª f, (by ext)‚ü©,
  unique_from := Œª X, ‚ü®‚ü®{ f := 0 }‚ü©, Œª f, (by ext)‚ü©, }

end differential_object

namespace differential_object

variables (C : Type (u+1)) [large_category C] [concrete_category C]
  [has_zero_morphisms C] [has_shift C ‚Ñ§]

instance concrete_category_of_differential_objects :
  concrete_category (differential_object C) :=
{ forget := forget C ‚ãô category_theory.forget C }

instance : has_forget‚ÇÇ (differential_object C) C :=
{ forget‚ÇÇ := forget C }

end differential_object

/-! The category of differential objects itself has a shift functor. -/
namespace differential_object

variables (C : Type u) [category.{v} C]
variables [has_zero_morphisms C] [has_shift C ‚Ñ§]

noncomputable theory

/-- The shift functor on `differential_object C`. -/
@[simps]
def shift_functor (n : ‚Ñ§) : differential_object C ‚•§ differential_object C :=
{ obj := Œª X,
  { X := X.X‚ü¶n‚üß,
    d := X.d‚ü¶n‚üß' ‚â´ (shift_comm _ _ _).hom,
    d_squared' := by rw [functor.map_comp, category.assoc, shift_comm_hom_comp_assoc,
        ‚Üêfunctor.map_comp_assoc, X.d_squared, is_equivalence_preserves_zero_morphisms, zero_comp] },
  map := Œª X Y f,
  { f := f.f‚ü¶n‚üß',
    comm' := by { dsimp, rw [category.assoc, shift_comm_hom_comp, ‚Üê functor.map_comp_assoc,
      f.comm, functor.map_comp_assoc], }, },
  map_id' := by { intros X, ext1, dsimp, rw functor.map_id },
  map_comp' := by { intros X Y Z f g, ext1, dsimp, rw functor.map_comp } }

local attribute [instance] endofunctor_monoidal_category discrete.add_monoidal
local attribute [reducible] endofunctor_monoidal_category discrete.add_monoidal shift_comm

/-- The shift functor on `differential_object C` is additive. -/
@[simps] def shift_functor_add (m n : ‚Ñ§) :
  shift_functor C (m + n) ‚âÖ shift_functor C m ‚ãô shift_functor C n :=
begin
  refine nat_iso.of_components (Œª X, mk_iso (shift_add X.X _ _) _) _,
  { dsimp,
    simp only [obj_Œº_app, Œº_naturality_assoc, Œº_naturality‚Çó_assoc, Œº_inv_hom_app_assoc,
      category.assoc, obj_Œº_inv_app, functor.map_comp, Œº_inv_naturality·µ£_assoc],
    simp [opaque_eq_to_iso] },
  { intros X Y f, ext, dsimp, exact nat_trans.naturality _ _ }
end

/-- The shift by zero is naturally isomorphic to the identity. -/
@[simps]
def shift_Œµ : ùü≠ (differential_object C) ‚âÖ shift_functor C 0 :=
begin
  refine nat_iso.of_components (Œª X, mk_iso ((shift_monoidal_functor C ‚Ñ§).Œµ_iso.app X.X) _) _,
  { dsimp, simp, dsimp, simp },
  { introv, ext, dsimp, simp }
end

instance : has_shift (differential_object C) ‚Ñ§ :=
has_shift_mk _ _
{ F := shift_functor C,
  Œµ := shift_Œµ C,
  Œº := Œª m n, (shift_functor_add C m n).symm }

end differential_object

end category_theory
