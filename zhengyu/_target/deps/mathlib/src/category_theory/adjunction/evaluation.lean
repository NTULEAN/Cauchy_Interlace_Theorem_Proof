/-
Copyright (c) 2021 Adam Topaz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Adam Topaz
-/

import category_theory.limits.shapes.products
import category_theory.epi_mono

/-!

# Adjunctions involving evaluation

We show that evaluation of functors have adjoints, given the existence of (co)products.

-/

namespace category_theory

open category_theory.limits

universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ
variables {C : Type u‚ÇÅ} [category.{v‚ÇÅ} C] (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D]

noncomputable theory

section

variables [‚àÄ (a b : C), has_coproducts_of_shape (a ‚ü∂ b) D]

/-- The left adjoint of evaluation. -/
@[simps]
def evaluation_left_adjoint (c : C) : D ‚•§ C ‚•§ D :=
{ obj := Œª d,
  { obj := Œª t, ‚àê (Œª i : c ‚ü∂ t, d),
    map := Œª u v f, sigma.desc $ Œª g, sigma.Œπ (Œª _, d) $ g ‚â´ f,
    map_id' := begin
      intros, ext, simp only [cofan.mk_Œπ_app, colimit.Œπ_desc, category.comp_id],
      congr' 1, rw category.comp_id,
    end,
    map_comp' := begin
      intros, ext, simp only [cofan.mk_Œπ_app, colimit.Œπ_desc_assoc, colimit.Œπ_desc],
      congr' 1, rw category.assoc,
    end },
  map := Œª d‚ÇÅ d‚ÇÇ f,
  { app := Œª e, sigma.desc $ Œª h, f ‚â´ sigma.Œπ (Œª _, d‚ÇÇ) h,
    naturality' := by { intros, ext, dsimp, simp } },
  map_id' := by { intros, ext, dsimp, simp },
  map_comp' := by { intros, ext, dsimp, simp } }

/-- The adjunction showing that evaluation is a right adjoint. -/
@[simps unit_app counit_app_app]
def evaluation_adjunction_right (c : C) :
  evaluation_left_adjoint D c ‚ä£ (evaluation _ _).obj c :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª d F,
  { to_fun := Œª f, sigma.Œπ (Œª _, d) (ùüô _) ‚â´ f.app c,
    inv_fun := Œª f,
    { app := Œª e, sigma.desc $ Œª h, f ‚â´ F.map h,
      naturality' := by { intros, ext, dsimp, simp } },
    left_inv := begin
      intros f,
      ext x g,
      dsimp,
      simp only [colimit.Œπ_desc, limits.cofan.mk_Œπ_app, category.assoc, ‚Üê f.naturality,
        evaluation_left_adjoint_obj_map, colimit.Œπ_desc_assoc, cofan.mk_Œπ_app],
      congr' 2,
      rw category.id_comp
    end,
    right_inv := Œª f, by { dsimp, simp } },
  hom_equiv_naturality_left_symm' := by { intros, ext, dsimp, simp },
  hom_equiv_naturality_right' := by { intros, dsimp, simp } }

instance evaluation_is_right_adjoint (c : C) :
  is_right_adjoint ((evaluation _ D).obj c) :=
‚ü®_, evaluation_adjunction_right _ _‚ü©

lemma nat_trans.mono_iff_app_mono {F G : C ‚•§ D} (Œ∑ : F ‚ü∂ G) :
  mono Œ∑ ‚Üî (‚àÄ c, mono (Œ∑.app c)) :=
begin
  split,
  { intros h c,
    exact right_adjoint_preserves_mono (evaluation_adjunction_right D c) h },
  { introsI _,
    apply nat_trans.mono_app_of_mono }
end

end

section

variables [‚àÄ (a b : C), has_products_of_shape (a ‚ü∂ b) D]

/-- The right adjoint of evaluation. -/
@[simps]
def evaluation_right_adjoint (c : C) : D ‚•§ C ‚•§ D :=
{ obj := Œª d,
  { obj := Œª t, ‚àè (Œª i : t ‚ü∂ c, d),
    map := Œª u v f, pi.lift $ Œª g, pi.œÄ _ $ f ‚â´ g,
    map_id' := begin
      intros, ext, dsimp,
      simp only [limit.lift_œÄ, category.id_comp, fan.mk_œÄ_app],
      congr, simp,
    end,
    map_comp' := begin
      intros, ext, dsimp,
      simp only [limit.lift_œÄ, fan.mk_œÄ_app, category.assoc],
      congr' 1, simp,
    end },
  map := Œª d‚ÇÅ d‚ÇÇ f,
  { app := Œª t, pi.lift $ Œª g, pi.œÄ _ g ‚â´ f,
    naturality' := by { intros, ext, dsimp, simp } },
  map_id' := by { intros, ext, dsimp, simp },
  map_comp' := by { intros, ext, dsimp, simp } }

/-- The adjunction showing that evaluation is a left adjoint. -/
@[simps unit_app_app counit_app]
def evaluation_adjunction_left (c : C) :
  (evaluation _ _).obj c ‚ä£ evaluation_right_adjoint D c :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª F d,
  { to_fun := Œª f,
    { app := Œª t, pi.lift $ Œª g, F.map g ‚â´ f,
      naturality' := by { intros, ext, dsimp, simp } },
    inv_fun := Œª f, f.app _ ‚â´ pi.œÄ _ (ùüô _),
    left_inv := Œª f, by { dsimp, simp },
    right_inv := begin
      intros f,
      ext x g,
      dsimp,
      simp only [limit.lift_œÄ, evaluation_right_adjoint_obj_map,
        nat_trans.naturality_assoc, fan.mk_œÄ_app],
      congr,
      rw category.comp_id
    end },
  hom_equiv_naturality_left_symm' := by { intros, dsimp, simp },
  hom_equiv_naturality_right' := by { intros, ext, dsimp, simp } }

instance evaluation_is_left_adjoint (c : C) :
  is_left_adjoint ((evaluation _ D).obj c) :=
‚ü®_, evaluation_adjunction_left _ _‚ü©

lemma nat_trans.epi_iff_app_epi {F G : C ‚•§ D} (Œ∑ : F ‚ü∂ G) :
  epi Œ∑ ‚Üî (‚àÄ c, epi (Œ∑.app c)) :=
begin
  split,
  { intros h c,
    exact left_adjoint_preserves_epi (evaluation_adjunction_left D c) h },
  { introsI,
    apply nat_trans.epi_app_of_epi }
end

end

end category_theory
