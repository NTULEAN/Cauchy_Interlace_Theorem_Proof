/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import category_theory.bicategory.basic

/-!
# Oplax functors

An oplax functor `F` between bicategories `B` and `C` consists of
* a function between objects `F.obj : B ‚ü∂ C`,
* a family of functions between 1-morphisms `F.map : (a ‚ü∂ b) ‚Üí (obj a ‚ü∂ obj b)`,
* a family of functions between 2-morphisms `F.map‚ÇÇ : (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g)`,
* a family of 2-morphisms `F.map_id a : F.map (ùüô a) ‚ü∂ ùüô (F.obj a)`,
* a family of 2-morphisms `F.map_comp f g : F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`, and
* certain consistency conditions on them.

## Main definitions

* `oplax_functor B C` : an oplax functor between bicategories `B` and `C`
* `oplax_functor.comp F G` : the composition of oplax functors

## Future work

There are two types of functors between bicategories, called lax and oplax functors, depending on
the directions of `map_id` and `map_comp`. We may need both in mathlib in the future, but for
now we only define oplax functors.

In addition, if we require `map_id` and `map_comp` to be isomorphisms, we obtain the definition
of pseudofunctors. There are several possible design choices to implement pseudofunctors,
but the choice is left to future development.
-/

set_option old_structure_cmd true

namespace category_theory

open category bicategory
open_locale bicategory

universes w‚ÇÅ w‚ÇÇ w‚ÇÉ v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

section
variables (B : Type u‚ÇÅ) [quiver.{v‚ÇÅ+1} B] [‚àÄ a b : B, quiver.{w‚ÇÅ+1} (a ‚ü∂ b)]
variables (C : Type u‚ÇÇ) [quiver.{v‚ÇÇ+1} C] [‚àÄ a b : C, quiver.{w‚ÇÇ+1} (a ‚ü∂ b)]

/--
A prelax functor between bicategories consists of functions between objects,
1-morphisms, and 2-morphisms. This structure will be extended to define `oplax_functor`.
-/
structure prelax_functor extends prefunctor B C : Type (max w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(map‚ÇÇ {a b : B} {f g : a ‚ü∂ b} : (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g))

/-- The prefunctor between the underlying quivers. -/
add_decl_doc prelax_functor.to_prefunctor

namespace prelax_functor

variables {B C} {D : Type u‚ÇÉ} [quiver.{v‚ÇÉ+1} D] [‚àÄ a b : D, quiver.{w‚ÇÉ+1} (a ‚ü∂ b)]
variables (F : prelax_functor B C) (G : prelax_functor C D)

@[simp] lemma to_prefunctor_obj : F.to_prefunctor.obj = F.obj := rfl
@[simp] lemma to_prefunctor_map : F.to_prefunctor.map = F.map := rfl

variables (B)

/-- The identity prelax functor. -/
@[simps]
def id : prelax_functor B B :=
{ map‚ÇÇ := Œª a b f g Œ∑, Œ∑, .. prefunctor.id B }

instance : inhabited (prelax_functor B B) := ‚ü®prelax_functor.id B‚ü©

variables {B}

/-- Composition of prelax functors. -/
@[simps]
def comp : prelax_functor B D :=
{ map‚ÇÇ := Œª a b f g Œ∑, G.map‚ÇÇ (F.map‚ÇÇ Œ∑), .. F.to_prefunctor.comp G.to_prefunctor }

end prelax_functor

end

section
variables {B : Type u‚ÇÅ} [bicategory.{w‚ÇÅ v‚ÇÅ} B] {C : Type u‚ÇÇ} [bicategory.{w‚ÇÇ v‚ÇÇ} C]

/--
This auxiliary definition states that oplax functors preserve the associators
modulo some adjustments of domains and codomains of 2-morphisms.
-/
/-
We use this auxiliary definition instead of writing it directly in the definition
of oplax functors because doing so will cause a timeout.
-/
@[simp]
def oplax_functor.map‚ÇÇ_associator_aux
  (obj : B ‚Üí C) (map : Œ† {X Y : B}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y))
  (map‚ÇÇ : Œ† {a b : B} {f g : a ‚ü∂ b}, (f ‚ü∂ g) ‚Üí (map f ‚ü∂ map g))
  (map_comp : Œ† {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c), map (f ‚â´ g) ‚ü∂ map f ‚â´ map g)
  {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d) : Prop :=
map‚ÇÇ (Œ±_ f g h).hom ‚â´ map_comp f (g ‚â´ h) ‚â´ (map f ‚óÅ map_comp g h) =
  map_comp (f ‚â´ g) h ‚â´ (map_comp f g ‚ñ∑ map h) ‚â´ (Œ±_ (map f) (map g) (map h)).hom

variables (B C)

/--
An oplax functor `F` between bicategories `B` and `C` consists of functions between objects,
1-morphisms, and 2-morphisms.

Unlike functors between categories, functions between 1-morphisms do not need to strictly commute
with compositions, and do not need to strictly preserve the identity. Instead, there are
specified 2-morphisms `F.map (ùüô a) ‚ü∂ ùüô (F.obj a)` and `F.map (f ‚â´ g) ‚ü∂ F.map f ‚â´ F.map g`.

Functions between 2-morphisms strictly commute with compositions and preserve the identity.
They also preserve the associator, the left unitor, and the right unitor modulo some adjustments
of domains and codomains of 2-morphisms.
-/
structure oplax_functor extends prelax_functor B C : Type (max w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ) :=
(map_id (a : B) : map (ùüô a) ‚ü∂ ùüô (obj a))
(map_comp {a b c : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) : map (f ‚â´ g) ‚ü∂ map f ‚â´ map g)
(map_comp_naturality_left' : ‚àÄ {a b c : B} {f f' : a ‚ü∂ b} (Œ∑ : f ‚ü∂ f') (g : b ‚ü∂ c),
  map‚ÇÇ (Œ∑ ‚ñ∑ g) ‚â´ map_comp f' g = map_comp f g ‚â´ (map‚ÇÇ Œ∑ ‚ñ∑ map g) . obviously)
(map_comp_naturality_right' : ‚àÄ {a b c : B} (f : a ‚ü∂ b) {g g' : b ‚ü∂ c} (Œ∑ : g ‚ü∂ g'),
  map‚ÇÇ (f ‚óÅ Œ∑) ‚â´ map_comp f g' = map_comp f g ‚â´ (map f ‚óÅ map‚ÇÇ Œ∑) . obviously)
(map‚ÇÇ_id' : ‚àÄ {a b : B} (f : a ‚ü∂ b), map‚ÇÇ (ùüô f) = ùüô (map f) . obviously)
(map‚ÇÇ_comp' : ‚àÄ {a b : B} {f g h : a ‚ü∂ b} (Œ∑ : f ‚ü∂ g) (Œ∏ : g ‚ü∂ h),
  map‚ÇÇ (Œ∑ ‚â´ Œ∏) = map‚ÇÇ Œ∑ ‚â´ map‚ÇÇ Œ∏ . obviously)
(map‚ÇÇ_associator' : ‚àÄ {a b c d : B} (f : a ‚ü∂ b) (g : b ‚ü∂ c) (h : c ‚ü∂ d),
  oplax_functor.map‚ÇÇ_associator_aux obj (Œª a b, map) (Œª a b f g, map‚ÇÇ) (Œª a b c, map_comp) f g h
    . obviously)
(map‚ÇÇ_left_unitor' : ‚àÄ {a b : B} (f : a ‚ü∂ b),
  map‚ÇÇ (Œª_ f).hom = map_comp (ùüô a) f ‚â´ (map_id a ‚ñ∑ map f) ‚â´ (Œª_ (map f)).hom . obviously)
(map‚ÇÇ_right_unitor' : ‚àÄ {a b : B} (f : a ‚ü∂ b),
  map‚ÇÇ (œÅ_ f).hom = map_comp f (ùüô b) ‚â´ (map f ‚óÅ map_id b) ‚â´ (œÅ_ (map f)).hom . obviously)

restate_axiom oplax_functor.map_comp_naturality_left'
restate_axiom oplax_functor.map_comp_naturality_right'
restate_axiom oplax_functor.map‚ÇÇ_id'
restate_axiom oplax_functor.map‚ÇÇ_comp'
restate_axiom oplax_functor.map‚ÇÇ_associator'
restate_axiom oplax_functor.map‚ÇÇ_left_unitor'
restate_axiom oplax_functor.map‚ÇÇ_right_unitor'
attribute [simp]
  oplax_functor.map_comp_naturality_left oplax_functor.map_comp_naturality_right
  oplax_functor.map‚ÇÇ_id oplax_functor.map‚ÇÇ_associator
attribute [reassoc]
  oplax_functor.map_comp_naturality_left oplax_functor.map_comp_naturality_right
  oplax_functor.map‚ÇÇ_comp oplax_functor.map‚ÇÇ_associator
  oplax_functor.map‚ÇÇ_left_unitor oplax_functor.map‚ÇÇ_right_unitor
attribute [simp]
  oplax_functor.map‚ÇÇ_comp oplax_functor.map‚ÇÇ_left_unitor oplax_functor.map‚ÇÇ_right_unitor

namespace oplax_functor

variables {B} {C} {D : Type u‚ÇÉ} [bicategory.{w‚ÇÉ v‚ÇÉ} D]
variables (F : oplax_functor B C) (G : oplax_functor C D)

/-- Function between 1-morphisms as a functor. -/
@[simps]
def map_functor (a b : B) : (a ‚ü∂ b) ‚•§ (F.obj a ‚ü∂ F.obj b) :=
{ obj := Œª f, F.map f,
  map := Œª f g Œ∑, F.map‚ÇÇ Œ∑ }

/-- The prelax functor between the underlying quivers. -/
add_decl_doc oplax_functor.to_prelax_functor

@[simp] lemma to_prelax_functor_obj : F.to_prelax_functor.obj = F.obj := rfl
@[simp] lemma to_prelax_functor_map : F.to_prelax_functor.map = F.map := rfl
@[simp] lemma to_prelax_functor_map‚ÇÇ : F.to_prelax_functor.map‚ÇÇ = F.map‚ÇÇ := rfl

variables (B)

/-- The identity oplax functor. -/
@[simps]
def id : oplax_functor B B :=
{ map_id := Œª a, ùüô (ùüô a),
  map_comp := Œª a b c f g, ùüô (f ‚â´ g),
  .. prelax_functor.id B }

instance : inhabited (oplax_functor B B) := ‚ü®id B‚ü©

variables {B}

/-- Composition of oplax functors. -/
@[simps]
def comp : oplax_functor B D :=
{ map_id := Œª a,
    (G.map_functor _ _).map (F.map_id a) ‚â´ G.map_id (F.obj a),
  map_comp := Œª a b c f g,
    (G.map_functor _ _).map (F.map_comp f g) ‚â´ G.map_comp (F.map f) (F.map g),
  map_comp_naturality_left' := Œª a b c f f' Œ∑ g, by
  { dsimp,
    rw [‚Üêmap‚ÇÇ_comp_assoc, map_comp_naturality_left, map‚ÇÇ_comp_assoc, map_comp_naturality_left,
      assoc] },
  map_comp_naturality_right' := Œª a b c f g g' Œ∑, by
  { dsimp,
    rw [‚Üêmap‚ÇÇ_comp_assoc, map_comp_naturality_right, map‚ÇÇ_comp_assoc, map_comp_naturality_right,
      assoc] },
  map‚ÇÇ_associator' := Œª a b c d f g h, by
  { dsimp,
    simp only [map‚ÇÇ_associator, ‚Üêmap‚ÇÇ_comp_assoc, ‚Üêmap_comp_naturality_right_assoc,
      whisker_left_comp, assoc],
    simp only [map‚ÇÇ_associator, map‚ÇÇ_comp, map_comp_naturality_left_assoc,
      whisker_right_comp, assoc] },
  map‚ÇÇ_left_unitor' := Œª a b f, by
  { dsimp,
    simp only [map‚ÇÇ_left_unitor, map‚ÇÇ_comp, map_comp_naturality_left_assoc,
      whisker_right_comp, assoc] },
  map‚ÇÇ_right_unitor' := Œª a b f, by
  { dsimp,
    simp only [map‚ÇÇ_right_unitor, map‚ÇÇ_comp, map_comp_naturality_right_assoc,
      whisker_left_comp, assoc] },
  .. F.to_prelax_functor.comp G.to_prelax_functor }

end oplax_functor

end

end category_theory
